/* -*- mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "DOM.OpAtom.simple";

include "modules/dom/src/opatomdata.h";
include "modules/util/tempbuf.h";
include "modules/doc/frm_doc.h";

test("Sequenciality")
{
  /* If this test fails, chances are someone has modified the OpAtom
     declaration manually and not updated this file correctly. */

  int index = -1;

  verify(OP_ATOM_UNASSIGNED == index++);
  verify(OP_ATOM_AppleDashboardRegion == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_MIMEType == index++);
  verify(OP_ATOM_Multimedia == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_OBorderImage == index++);
#ifdef CSS_MINI_EXTENSIONS
  verify(OP_ATOM_OFocusOpacity == index++);
#endif // CSS_MINI_EXTENSIONS
  verify(OP_ATOM_OLink == index++);
  verify(OP_ATOM_OLinkSource == index++);
#ifdef CSS_MINI_EXTENSIONS
  verify(OP_ATOM_OMiniFold == index++);
#endif // CSS_MINI_EXTENSIONS
  verify(OP_ATOM_OObjectFit == index++);
  verify(OP_ATOM_OObjectPosition == index++);
  verify(OP_ATOM_OTabSize == index++);
  verify(OP_ATOM_OTableBaseline == index++);
#ifdef CSS_TRANSFORMS
  verify(OP_ATOM_OTransform == index++);
  verify(OP_ATOM_OTransformOrigin == index++);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(OP_ATOM_OTransition == index++);
  verify(OP_ATOM_OTransitionDelay == index++);
  verify(OP_ATOM_OTransitionDuration == index++);
  verify(OP_ATOM_OTransitionProperty == index++);
  verify(OP_ATOM_OTransitionTimingFunction == index++);
#endif // CSS_TRANSITIONS
  verify(OP_ATOM_URL == index++);
  verify(OP_ATOM_WapAccesskey == index++);
  verify(OP_ATOM_WapInputFormat == index++);
  verify(OP_ATOM_WapInputRequired == index++);
  verify(OP_ATOM_WapMarqueeDir == index++);
  verify(OP_ATOM_WapMarqueeLoop == index++);
  verify(OP_ATOM_WapMarqueeSpeed == index++);
  verify(OP_ATOM_WapMarqueeStyle == index++);
  verify(OP_ATOM_WebkitBackgroundSize == index++);
  verify(OP_ATOM_WebkitBorderBottomLeftRadius == index++);
  verify(OP_ATOM_WebkitBorderBottomRightRadius == index++);
  verify(OP_ATOM_WebkitBorderRadius == index++);
  verify(OP_ATOM_WebkitBorderTopLeftRadius == index++);
  verify(OP_ATOM_WebkitBorderTopRightRadius == index++);
  verify(OP_ATOM_WebkitBoxAlign == index++);
  verify(OP_ATOM_WebkitBoxDirection == index++);
  verify(OP_ATOM_WebkitBoxFlex == index++);
  verify(OP_ATOM_WebkitBoxLines == index++);
  verify(OP_ATOM_WebkitBoxOrdinalGroup == index++);
  verify(OP_ATOM_WebkitBoxOrient == index++);
  verify(OP_ATOM_WebkitBoxPack == index++);
  verify(OP_ATOM_WebkitBoxShadow == index++);
#ifdef CSS_TRANSFORMS
  verify(OP_ATOM_WebkitTransform == index++);
  verify(OP_ATOM_WebkitTransformOrigin == index++);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(OP_ATOM_WebkitTransition == index++);
  verify(OP_ATOM_WebkitTransitionDelay == index++);
  verify(OP_ATOM_WebkitTransitionDuration == index++);
  verify(OP_ATOM_WebkitTransitionProperty == index++);
  verify(OP_ATOM_WebkitTransitionTimingFunction == index++);
#endif // CSS_TRANSITIONS
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(OP_ATOM_a == index++);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(OP_ATOM_aLink == index++);
  verify(OP_ATOM_abbr == index++);
  verify(OP_ATOM_accept == index++);
  verify(OP_ATOM_acceptCharset == index++);
  verify(OP_ATOM_accessKey == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_accountId == index++);
  verify(OP_ATOM_accountName == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_accuracy == index++);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_action == index++);
#if defined WEBSERVER_SUPPORT || defined GADGET_SUPPORT
  verify(OP_ATOM_active == index++);
#endif // WEBSERVER_SUPPORT || GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_activeCues == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_activeElement == index++);
  verify(OP_ATOM_addEventListener == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_address == index++);
  verify(OP_ATOM_addressBookItemId == index++);
  verify(OP_ATOM_alarmDate == index++);
  verify(OP_ATOM_alarmed == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_align == index++);
  verify(OP_ATOM_alignContent == index++);
  verify(OP_ATOM_alignItems == index++);
  verify(OP_ATOM_alignSelf == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_alignmentBaseline == index++);
#endif // SVG_DOM
  verify(OP_ATOM_alinkColor == index++);
  verify(OP_ATOM_all == index++);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_allFeeds == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined EXTENSION_SUPPORT && defined URL_FILTER
  verify(OP_ATOM_allow == index++);
#endif // EXTENSION_SUPPORT && URL_FILTER
#ifdef CANVAS3D_SUPPORT
  verify(OP_ATOM_alpha == index++);
#endif // CANVAS3D_SUPPORT
  verify(OP_ATOM_alt == index++);
  verify(OP_ATOM_altKey == index++);
#ifdef UPNP_SUPPORT
  verify(OP_ATOM_alternateURL == index++);
#endif // UPNP_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_altitude == index++);
  verify(OP_ATOM_altitudeAccuracy == index++);
#endif // DOM_GEOLOCATION_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_amplitude == index++);
#endif // SVG_DOM
#ifdef DOM_SELECTION_SUPPORT
  verify(OP_ATOM_anchorNode == index++);
  verify(OP_ATOM_anchorOffset == index++);
#endif // DOM_SELECTION_SUPPORT
  verify(OP_ATOM_anchors == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_angle == index++);
  verify(OP_ATOM_animVal == index++);
  verify(OP_ATOM_animatedInstanceRoot == index++);
  verify(OP_ATOM_animatedNormalizedPathSegList == index++);
  verify(OP_ATOM_animatedPathSegList == index++);
  verify(OP_ATOM_animatedPoints == index++);
#endif // SVG_DOM
#ifdef CSS_ANIMATIONS
  verify(OP_ATOM_animation == index++);
  verify(OP_ATOM_animationDelay == index++);
  verify(OP_ATOM_animationDirection == index++);
  verify(OP_ATOM_animationDuration == index++);
  verify(OP_ATOM_animationFillMode == index++);
  verify(OP_ATOM_animationIterationCount == index++);
  verify(OP_ATOM_animationName == index++);
  verify(OP_ATOM_animationPlayState == index++);
  verify(OP_ATOM_animationTimingFunction == index++);
#endif // CSS_ANIMATIONS
#ifdef CANVAS3D_SUPPORT
  verify(OP_ATOM_antialias == index++);
#endif // CANVAS3D_SUPPORT
  verify(OP_ATOM_appCodeName == index++);
  verify(OP_ATOM_appMinorVersion == index++);
  verify(OP_ATOM_appName == index++);
  verify(OP_ATOM_appVersion == index++);
  verify(OP_ATOM_applets == index++);
#if defined APPLICATION_CACHE_SUPPORT || defined DOM_WEBWORKERS_SUPPORT
  verify(OP_ATOM_applicationCache == index++);
#endif // APPLICATION_CACHE_SUPPORT || DOM_WEBWORKERS_SUPPORT
  verify(OP_ATOM_archive == index++);
  verify(OP_ATOM_areas == index++);
  verify(OP_ATOM_async == index++);
#ifdef INTEGRATED_DEVTOOLS_SUPPORT
  verify(OP_ATOM_attached == index++);
#endif // INTEGRATED_DEVTOOLS_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_attachments == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM2_MUTATION_EVENTS
  verify(OP_ATOM_attrChange == index++);
  verify(OP_ATOM_attrName == index++);
#endif // DOM2_MUTATION_EVENTS
  verify(OP_ATOM_attributes == index++);
#if defined SVG_DOM
  verify(OP_ATOM_audioLevel == index++);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_audioPath == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef OPERA_AUTH_SUPPORT
  verify(OP_ATOM_authState == index++);
  verify(OP_ATOM_authStatus == index++);
#endif // OPERA_AUTH_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_authentication == index++);
#endif // WEBSERVER_SUPPORT
#if defined WEBFEEDS_BACKEND_SUPPORT || defined WEBSERVER_SUPPORT || defined GADGET_SUPPORT
  verify(OP_ATOM_author == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT || WEBSERVER_SUPPORT || GADGET_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_authorEmail == index++);
  verify(OP_ATOM_authorHref == index++);
#endif // GADGET_SUPPORT
  verify(OP_ATOM_autocomplete == index++);
  verify(OP_ATOM_autofocus == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_autoplay == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_availHeight == index++);
  verify(OP_ATOM_availWidth == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_availableMemory == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_axis == index++);
  verify(OP_ATOM_azimuth == index++);
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(OP_ATOM_b == index++);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_backLightOn == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_background == index++);
  verify(OP_ATOM_backgroundAttachment == index++);
  verify(OP_ATOM_backgroundClip == index++);
  verify(OP_ATOM_backgroundColor == index++);
  verify(OP_ATOM_backgroundImage == index++);
  verify(OP_ATOM_backgroundOrigin == index++);
  verify(OP_ATOM_backgroundPosition == index++);
  verify(OP_ATOM_backgroundRepeat == index++);
  verify(OP_ATOM_backgroundSize == index++);
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_badge == index++);
#endif // EXTENSION_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_baseFrequencyX == index++);
  verify(OP_ATOM_baseFrequencyY == index++);
#endif // SVG_DOM
  verify(OP_ATOM_baseURI == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_baseVal == index++);
  verify(OP_ATOM_baselineShift == index++);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_bccAddress == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_behavior == index++);
  verify(OP_ATOM_bgColor == index++);
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_bgProcess == index++);
#endif // EXTENSION_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_bias == index++);
#endif // SVG_DOM
#ifdef WEBSOCKETS_SUPPORT
  verify(OP_ATOM_binaryType == index++);
#endif // WEBSOCKETS_SUPPORT
#if defined EXTENSION_SUPPORT && defined URL_FILTER
  verify(OP_ATOM_block == index++);
#endif // EXTENSION_SUPPORT && URL_FILTER
#ifdef SVG_DOM
  verify(OP_ATOM_blue == index++);
#endif // SVG_DOM
  verify(OP_ATOM_blur == index++);
  verify(OP_ATOM_body == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_bodyItems == index++);
#endif // WEBSERVER_SUPPORT
#ifdef DOM3_XPATH
  verify(OP_ATOM_booleanValue == index++);
#endif // DOM3_XPATH
  verify(OP_ATOM_border == index++);
  verify(OP_ATOM_borderBottom == index++);
  verify(OP_ATOM_borderBottomColor == index++);
  verify(OP_ATOM_borderBottomLeftRadius == index++);
  verify(OP_ATOM_borderBottomRightRadius == index++);
  verify(OP_ATOM_borderBottomStyle == index++);
  verify(OP_ATOM_borderBottomWidth == index++);
  verify(OP_ATOM_borderCollapse == index++);
  verify(OP_ATOM_borderColor == index++);
  verify(OP_ATOM_borderLeft == index++);
  verify(OP_ATOM_borderLeftColor == index++);
  verify(OP_ATOM_borderLeftStyle == index++);
  verify(OP_ATOM_borderLeftWidth == index++);
  verify(OP_ATOM_borderRadius == index++);
  verify(OP_ATOM_borderRight == index++);
  verify(OP_ATOM_borderRightColor == index++);
  verify(OP_ATOM_borderRightStyle == index++);
  verify(OP_ATOM_borderRightWidth == index++);
  verify(OP_ATOM_borderSpacing == index++);
  verify(OP_ATOM_borderStyle == index++);
  verify(OP_ATOM_borderTop == index++);
  verify(OP_ATOM_borderTopColor == index++);
  verify(OP_ATOM_borderTopLeftRadius == index++);
  verify(OP_ATOM_borderTopRightRadius == index++);
  verify(OP_ATOM_borderTopStyle == index++);
  verify(OP_ATOM_borderTopWidth == index++);
  verify(OP_ATOM_borderWidth == index++);
  verify(OP_ATOM_bottom == index++);
  verify(OP_ATOM_boxDecorationBreak == index++);
  verify(OP_ATOM_boxShadow == index++);
  verify(OP_ATOM_boxSizing == index++);
  verify(OP_ATOM_breakAfter == index++);
  verify(OP_ATOM_breakBefore == index++);
  verify(OP_ATOM_breakInside == index++);
  verify(OP_ATOM_browserLanguage == index++);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_browserWindow == index++);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_bubbles == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_buffered == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(OP_ATOM_bufferedAmount == index++);
#endif // WEBSOCKETS_SUPPORT
  verify(OP_ATOM_bufferedRendering == index++);
  verify(OP_ATOM_busy == index++);
  verify(OP_ATOM_button == index++);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_bytesAvailable == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(OP_ATOM_c == index++);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_calendarItemId == index++);
  verify(OP_ATOM_callRecordAddress == index++);
  verify(OP_ATOM_callRecordId == index++);
  verify(OP_ATOM_callRecordName == index++);
  verify(OP_ATOM_callRecordType == index++);
  verify(OP_ATOM_callbackNumber == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_cancelBubble == index++);
  verify(OP_ATOM_cancelable == index++);
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_canvas == index++);
#endif // CANVAS_SUPPORT
  verify(OP_ATOM_caption == index++);
  verify(OP_ATOM_captionSide == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_ccAddress == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_cellIndex == index++);
  verify(OP_ATOM_cellPadding == index++);
  verify(OP_ATOM_cellSpacing == index++);
  verify(OP_ATOM_cells == index++);
  verify(OP_ATOM_ch == index++);
  verify(OP_ATOM_chOff == index++);
  verify(OP_ATOM_challenge == index++);
#ifdef TOUCH_EVENTS_SUPPORT
  verify(OP_ATOM_changedTouches == index++);
#endif // TOUCH_EVENTS_SUPPORT
  verify(OP_ATOM_char == index++);
  verify(OP_ATOM_charCode == index++);
  verify(OP_ATOM_characterSet == index++);
#ifdef CSS_CHARACTER_TYPE_SUPPORT
  verify(OP_ATOM_characterType == index++);
#endif // CSS_CHARACTER_TYPE_SUPPORT
  verify(OP_ATOM_charset == index++);
  verify(OP_ATOM_checked == index++);
  verify(OP_ATOM_childElementCount == index++);
  verify(OP_ATOM_childNodes == index++);
  verify(OP_ATOM_children == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_chunked == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_cite == index++);
  verify(OP_ATOM_class == index++);
  verify(OP_ATOM_classId == index++);
  verify(OP_ATOM_classList == index++);
  verify(OP_ATOM_className == index++);
  verify(OP_ATOM_clear == index++);
  verify(OP_ATOM_clientHeight == index++);
  verify(OP_ATOM_clientLeft == index++);
  verify(OP_ATOM_clientTop == index++);
  verify(OP_ATOM_clientWidth == index++);
  verify(OP_ATOM_clientX == index++);
  verify(OP_ATOM_clientY == index++);
  verify(OP_ATOM_clip == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_clipPath == index++);
  verify(OP_ATOM_clipPathUnits == index++);
  verify(OP_ATOM_clipRule == index++);
#endif // SVG_DOM
#ifdef USE_OP_CLIPBOARD
  verify(OP_ATOM_clipboardData == index++);
#endif // USE_OP_CLIPBOARD
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_clipboardString == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_close == index++);
  verify(OP_ATOM_closed == index++);
  verify(OP_ATOM_code == index++);
  verify(OP_ATOM_codeBase == index++);
  verify(OP_ATOM_codeType == index++);
  verify(OP_ATOM_colSpan == index++);
#ifdef DOM2_RANGE
  verify(OP_ATOM_collapsed == index++);
#endif // DOM2_RANGE
  verify(OP_ATOM_color == index++);
  verify(OP_ATOM_colorDepth == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_colorInterpolation == index++);
  verify(OP_ATOM_colorInterpolationFilters == index++);
  verify(OP_ATOM_colorProfile == index++);
  verify(OP_ATOM_colorRendering == index++);
#endif // SVG_DOM
  verify(OP_ATOM_cols == index++);
  verify(OP_ATOM_columnCount == index++);
  verify(OP_ATOM_columnFill == index++);
  verify(OP_ATOM_columnGap == index++);
  verify(OP_ATOM_columnRule == index++);
  verify(OP_ATOM_columnRuleColor == index++);
  verify(OP_ATOM_columnRuleStyle == index++);
  verify(OP_ATOM_columnRuleWidth == index++);
  verify(OP_ATOM_columnSpan == index++);
  verify(OP_ATOM_columnWidth == index++);
  verify(OP_ATOM_columns == index++);
#ifdef DOM2_RANGE
  verify(OP_ATOM_commonAncestorContainer == index++);
#endif // DOM2_RANGE
  verify(OP_ATOM_compact == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_company == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_compatMode == index++);
  verify(OP_ATOM_complete == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_connection == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_content == index++);
  verify(OP_ATOM_contentDocument == index++);
  verify(OP_ATOM_contentEditable == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_contentScriptType == index++);
  verify(OP_ATOM_contentStyleType == index++);
#endif // SVG_DOM
  verify(OP_ATOM_contentType == index++);
  verify(OP_ATOM_contentWindow == index++);
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_contexts == index++);
#endif // EXTENSION_SUPPORT
  verify(OP_ATOM_control == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_controls == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_cookie == index++);
  verify(OP_ATOM_cookieEnabled == index++);
  verify(OP_ATOM_coords == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_correspondingElement == index++);
  verify(OP_ATOM_correspondingUseElement == index++);
#endif // SVG_DOM
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_count == index++);
#endif // GADGET_SUPPORT
  verify(OP_ATOM_counterIncrement == index++);
  verify(OP_ATOM_counterReset == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_createDate == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_createDocumentFragment == index++);
  verify(OP_ATOM_createElement == index++);
  verify(OP_ATOM_createEvent == index++);
  verify(OP_ATOM_createTextNode == index++);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_created == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_crossOrigin == index++);
  verify(OP_ATOM_cssFloat == index++);
  verify(OP_ATOM_cssRules == index++);
  verify(OP_ATOM_cssText == index++);
  verify(OP_ATOM_ctrlKey == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_cues == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_current == index++);
#ifdef SVG_SUPPORT
  verify(OP_ATOM_currentFps == index++);
#endif // SVG_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_currentIcon == index++);
#endif // GADGET_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(OP_ATOM_currentNode == index++);
#endif // DOM2_TRAVERSAL
#ifdef PAGED_MEDIA_SUPPORT
  verify(OP_ATOM_currentPage == index++);
#endif // PAGED_MEDIA_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_currentRotate == index++);
  verify(OP_ATOM_currentScale == index++);
#endif // SVG_DOM
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_currentServiceName == index++);
  verify(OP_ATOM_currentServicePath == index++);
#endif // WEBSERVER_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_currentSrc == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef CURRENT_STYLE_SUPPORT
  verify(OP_ATOM_currentStyle == index++);
#endif // CURRENT_STYLE_SUPPORT
  verify(OP_ATOM_currentTarget == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_currentTime == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_currentTranslate == index++);
#endif // SVG_DOM
  verify(OP_ATOM_cursor == index++);
  verify(OP_ATOM_customError == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_cx == index++);
  verify(OP_ATOM_cy == index++);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(OP_ATOM_d == index++);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(OP_ATOM_data == index++);
#ifdef DRAG_SUPPORT
  verify(OP_ATOM_dataTransfer == index++);
#endif // DRAG_SUPPORT
  verify(OP_ATOM_dataset == index++);
  verify(OP_ATOM_dateTime == index++);
  verify(OP_ATOM_declare == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_default == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_defaultChecked == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_defaultMuted == index++);
  verify(OP_ATOM_defaultPlaybackRate == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_defaultPrevented == index++);
  verify(OP_ATOM_defaultSelected == index++);
  verify(OP_ATOM_defaultStatus == index++);
  verify(OP_ATOM_defaultValue == index++);
  verify(OP_ATOM_defaultView == index++);
  verify(OP_ATOM_defer == index++);
#ifdef CANVAS3D_SUPPORT
  verify(OP_ATOM_depth == index++);
#endif // CANVAS3D_SUPPORT
  verify(OP_ATOM_description == index++);
  verify(OP_ATOM_designMode == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_destinationAddress == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_detail == index++);
#if defined UPNP_SUPPORT || (defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL)
  verify(OP_ATOM_device == index++);
#endif // UPNP_SUPPORT || GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_deviceName == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_devicePixelRatio == index++);
#ifdef ABOUT_HTML_DIALOGS
  verify(OP_ATOM_dialogArguments == index++);
#endif // ABOUT_HTML_DIALOGS
#ifdef SVG_DOM
  verify(OP_ATOM_diffuseConstant == index++);
#endif // SVG_DOM
  verify(OP_ATOM_dir == index++);
  verify(OP_ATOM_dirName == index++);
  verify(OP_ATOM_direction == index++);
  verify(OP_ATOM_disabled == index++);
  verify(OP_ATOM_dispatchEvent == index++);
  verify(OP_ATOM_display == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_displayAlign == index++);
  verify(OP_ATOM_divisor == index++);
#endif // SVG_DOM
  verify(OP_ATOM_doNotTrack == index++);
  verify(OP_ATOM_doctype == index++);
  verify(OP_ATOM_document == index++);
  verify(OP_ATOM_documentElement == index++);
  verify(OP_ATOM_documentURI == index++);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_documentURL == index++);
  verify(OP_ATOM_documentURLPatterns == index++);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_domConfig == index++);
  verify(OP_ATOM_domain == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_dominantBaseline == index++);
#endif // SVG_DOM
#ifdef DRAG_SUPPORT
  verify(OP_ATOM_draggable == index++);
#endif // DRAG_SUPPORT
#ifdef CANVAS3D_SUPPORT
  verify(OP_ATOM_drawingBufferHeight == index++);
  verify(OP_ATOM_drawingBufferWidth == index++);
#endif // CANVAS3D_SUPPORT
#ifdef DRAG_SUPPORT
  verify(OP_ATOM_dropEffect == index++);
  verify(OP_ATOM_dropzone == index++);
#endif // DRAG_SUPPORT
#ifdef DOM_DSE_DEBUGGING
  verify(OP_ATOM_dseEnabled == index++);
  verify(OP_ATOM_dseRecovered == index++);
#endif // DOM_DSE_DEBUGGING
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_duration == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_durationSeconds == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_dx == index++);
  verify(OP_ATOM_dy == index++);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(OP_ATOM_e == index++);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_eMail == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_edgeMode == index++);
#endif // SVG_DOM
#ifdef DRAG_SUPPORT
  verify(OP_ATOM_effectAllowed == index++);
#endif // DRAG_SUPPORT
  verify(OP_ATOM_elapsedTime == index++);
  verify(OP_ATOM_element == index++);
  verify(OP_ATOM_elements == index++);
  verify(OP_ATOM_elevation == index++);
  verify(OP_ATOM_embeds == index++);
  verify(OP_ATOM_emptyCells == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_enableBackground == index++);
#endif // SVG_DOM
  verify(OP_ATOM_enabledPlugin == index++);
  verify(OP_ATOM_encoding == index++);
  verify(OP_ATOM_enctype == index++);
#ifdef DOM2_RANGE
  verify(OP_ATOM_endContainer == index++);
  verify(OP_ATOM_endOffset == index++);
#endif // DOM2_RANGE
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_endTime == index++);
  verify(OP_ATOM_ended == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_entities == index++);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_entries == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined WEBSERVER_SUPPORT || defined DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_eof == index++);
#endif // WEBSERVER_SUPPORT || DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_error == index++);
  verify(OP_ATOM_event == index++);
#ifdef USER_JAVASCRIPT
  verify(OP_ATOM_eventCancelled == index++);
#endif // USER_JAVASCRIPT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_eventEndTime == index++);
  verify(OP_ATOM_eventName == index++);
  verify(OP_ATOM_eventNotes == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_eventPhase == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_eventRecurrence == index++);
  verify(OP_ATOM_eventStartTime == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_exists == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(OP_ATOM_expandEntityReferences == index++);
#endif // DOM2_TRAVERSAL
#ifdef SVG_DOM
  verify(OP_ATOM_exponent == index++);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_extension == index++);
#endif // EXTENSION_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(OP_ATOM_extensions == index++);
#endif // WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_externalResourcesRequired == index++);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(OP_ATOM_f == index++);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(OP_ATOM_face == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_farthestViewportElement == index++);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_favicon == index++);
  verify(OP_ATOM_faviconUrl == index++);
#endif // EXTENSION_SUPPORT
  verify(OP_ATOM_fgColor == index++);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_fileInstance == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_fileName == index++);
  verify(OP_ATOM_filePath == index++);
#endif // DOM_JIL_API_SUPPORT
#if defined DOM_GADGET_FILE_API_SUPPORT || defined DOM_JIL_API_SUPPORT
  verify(OP_ATOM_fileSize == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT || DOM_JIL_API_SUPPORT
  verify(OP_ATOM_filename == index++);
  verify(OP_ATOM_files == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_fill == index++);
  verify(OP_ATOM_fillOpacity == index++);
  verify(OP_ATOM_fillRule == index++);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_fillStyle == index++);
#endif // CANVAS_SUPPORT
#if defined DOM2_TRAVERSAL || defined DOM3_LOAD || defined DOM3_SAVE || defined SVG_DOM
  verify(OP_ATOM_filter == index++);
#endif // DOM2_TRAVERSAL || DOM3_LOAD || DOM3_SAVE || SVG_DOM
#ifdef SVG_DOM
  verify(OP_ATOM_filterResX == index++);
  verify(OP_ATOM_filterResY == index++);
  verify(OP_ATOM_filterUnits == index++);
#endif // SVG_DOM
  verify(OP_ATOM_firstChild == index++);
  verify(OP_ATOM_firstElementChild == index++);
  verify(OP_ATOM_flex == index++);
  verify(OP_ATOM_flexBasis == index++);
  verify(OP_ATOM_flexDirection == index++);
  verify(OP_ATOM_flexFlow == index++);
  verify(OP_ATOM_flexGrow == index++);
  verify(OP_ATOM_flexShrink == index++);
  verify(OP_ATOM_flexWrap == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_floodColor == index++);
  verify(OP_ATOM_floodOpacity == index++);
#endif // SVG_DOM
  verify(OP_ATOM_focus == index++);
#ifdef DOM_SELECTION_SUPPORT
  verify(OP_ATOM_focusNode == index++);
  verify(OP_ATOM_focusOffset == index++);
#endif // DOM_SELECTION_SUPPORT
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_focused == index++);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_font == index++);
  verify(OP_ATOM_fontFamily == index++);
  verify(OP_ATOM_fontSize == index++);
  verify(OP_ATOM_fontSizeAdjust == index++);
  verify(OP_ATOM_fontStretch == index++);
  verify(OP_ATOM_fontStyle == index++);
  verify(OP_ATOM_fontVariant == index++);
  verify(OP_ATOM_fontWeight == index++);
  verify(OP_ATOM_for == index++);
  verify(OP_ATOM_form == index++);
  verify(OP_ATOM_formAction == index++);
  verify(OP_ATOM_formEnctype == index++);
  verify(OP_ATOM_formMethod == index++);
  verify(OP_ATOM_formNoValidate == index++);
  verify(OP_ATOM_formTarget == index++);
  verify(OP_ATOM_forms == index++);
  verify(OP_ATOM_frame == index++);
  verify(OP_ATOM_frameBorder == index++);
  verify(OP_ATOM_frameElement == index++);
  verify(OP_ATOM_frames == index++);
  verify(OP_ATOM_fromElement == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_fullName == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_FULLSCREEN_MODE
  verify(OP_ATOM_fullscreenElement == index++);
  verify(OP_ATOM_fullscreenEnabled == index++);
#endif // DOM_FULLSCREEN_MODE
#ifdef SVG_DOM
  verify(OP_ATOM_fx == index++);
  verify(OP_ATOM_fy == index++);
#endif // SVG_DOM
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_geolocation == index++);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_getElementById == index++);
  verify(OP_ATOM_getElementsByClassName == index++);
  verify(OP_ATOM_getElementsByTagName == index++);
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_globalAlpha == index++);
  verify(OP_ATOM_globalCompositeOperation == index++);
#endif // CANVAS_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_glyphOrientationHorizontal == index++);
  verify(OP_ATOM_glyphOrientationVertical == index++);
  verify(OP_ATOM_gradientTransform == index++);
  verify(OP_ATOM_gradientUnits == index++);
  verify(OP_ATOM_green == index++);
#endif // SVG_DOM
  verify(OP_ATOM_hash == index++);
  verify(OP_ATOM_head == index++);
  verify(OP_ATOM_headers == index++);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_heading == index++);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_height == index++);
  verify(OP_ATOM_hidden == index++);
  verify(OP_ATOM_high == index++);
  verify(OP_ATOM_history == index++);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(OP_ATOM_hits == index++);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(OP_ATOM_home == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_homePhone == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_host == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_hostName == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_hostname == index++);
  verify(OP_ATOM_href == index++);
  verify(OP_ATOM_hreflang == index++);
  verify(OP_ATOM_hspace == index++);
  verify(OP_ATOM_htmlFor == index++);
  verify(OP_ATOM_httpEquiv == index++);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_icon == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_icons == index++);
#endif // GADGET_SUPPORT
  verify(OP_ATOM_id == index++);
#if defined GADGET_SUPPORT || defined TOUCH_EVENTS_SUPPORT
  verify(OP_ATOM_identifier == index++);
#endif // GADGET_SUPPORT || TOUCH_EVENTS_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_imageRendering == index++);
#endif // SVG_DOM
  verify(OP_ATOM_images == index++);
  verify(OP_ATOM_implementation == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_implicitFlush == index++);
#endif // WEBSERVER_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_in1 == index++);
  verify(OP_ATOM_in2 == index++);
#endif // SVG_DOM
  verify(OP_ATOM_indeterminate == index++);
  verify(OP_ATOM_index == index++);
  verify(OP_ATOM_innerHTML == index++);
  verify(OP_ATOM_innerHeight == index++);
  verify(OP_ATOM_innerText == index++);
  verify(OP_ATOM_innerWidth == index++);
  verify(OP_ATOM_input == index++);
  verify(OP_ATOM_inputFormat == index++);
  verify(OP_ATOM_inputMethod == index++);
  verify(OP_ATOM_inputmode == index++);
  verify(OP_ATOM_insertAdjacentHTML == index++);
  verify(OP_ATOM_insertAdjacentText == index++);
#ifdef DATABASE_STORAGE_SUPPORT
  verify(OP_ATOM_insertId == index++);
#endif // DATABASE_STORAGE_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_instanceRoot == index++);
  verify(OP_ATOM_intercept == index++);
#endif // SVG_DOM
  verify(OP_ATOM_internalSubset == index++);
#ifdef DOM3_XPATH
  verify(OP_ATOM_invalidIteratorState == index++);
#endif // DOM3_XPATH
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_ip == index++);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_isArchive == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_isAudioPlaying == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_isBinary == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_isCharging == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_SELECTION_SUPPORT
  verify(OP_ATOM_isCollapsed == index++);
#endif // DOM_SELECTION_SUPPORT
  verify(OP_ATOM_isContentEditable == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_isDataNetworkConnected == index++);
#endif // DOM_JIL_API_SUPPORT
#if defined DOM_GADGET_FILE_API_SUPPORT || defined DOM_JIL_API_SUPPORT
  verify(OP_ATOM_isDirectory == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT || DOM_JIL_API_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_isEditable == index++);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_isElementContentWhitespace == index++);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_isFile == index++);
  verify(OP_ATOM_isHidden == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(OP_ATOM_isLocal == index++);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
  verify(OP_ATOM_isMap == index++);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_isMarkup == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_isOwner == index++);
#endif // WEBSERVER_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_isPaused == index++);
#endif // SVG_DOM
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_isPlainText == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_isProxied == index++);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_isRadioEnabled == index++);
  verify(OP_ATOM_isRead == index++);
  verify(OP_ATOM_isRoaming == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_isSubscribed == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_isTrusted == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_isVideoPlaying == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_item == index++);
  verify(OP_ATOM_itemId == index++);
  verify(OP_ATOM_itemProp == index++);
  verify(OP_ATOM_itemRef == index++);
  verify(OP_ATOM_itemScope == index++);
  verify(OP_ATOM_itemType == index++);
  verify(OP_ATOM_itemValue == index++);
#if defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(OP_ATOM_items == index++);
#endif // DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(OP_ATOM_justifyContent == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_k1 == index++);
  verify(OP_ATOM_k2 == index++);
  verify(OP_ATOM_k3 == index++);
  verify(OP_ATOM_k4 == index++);
#endif // SVG_DOM
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_keep == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_kernelMatrix == index++);
  verify(OP_ATOM_kernelUnitLengthX == index++);
  verify(OP_ATOM_kernelUnitLengthY == index++);
  verify(OP_ATOM_kerning == index++);
#endif // SVG_DOM
  verify(OP_ATOM_key == index++);
  verify(OP_ATOM_keyCode == index++);
#ifdef CSS_ANIMATIONS
  verify(OP_ATOM_keyText == index++);
#endif // CSS_ANIMATIONS
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_keypadLightOn == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_keytype == index++);
#if defined MEDIA_HTML_SUPPORT || defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(OP_ATOM_kind == index++);
#endif // MEDIA_HTML_SUPPORT || DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(OP_ATOM_label == index++);
  verify(OP_ATOM_labels == index++);
  verify(OP_ATOM_lang == index++);
  verify(OP_ATOM_language == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_largeArcFlag == index++);
#endif // SVG_DOM
  verify(OP_ATOM_lastChild == index++);
  verify(OP_ATOM_lastElementChild == index++);
#if defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(OP_ATOM_lastEventId == index++);
#endif // DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
  verify(OP_ATOM_lastModified == index++);
  verify(OP_ATOM_lastModifiedDate == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_lastModifyDate == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_lastPosition == index++);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_lastUpdate == index++);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_latitude == index++);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_left == index++);
  verify(OP_ATOM_length == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_lengthAdjust == index++);
#endif // SVG_DOM
#ifdef PROGRESS_EVENTS_SUPPORT
  verify(OP_ATOM_lengthComputable == index++);
#endif // PROGRESS_EVENTS_SUPPORT
  verify(OP_ATOM_letterSpacing == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_lightingColor == index++);
  verify(OP_ATOM_limitingConeAngle == index++);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_line == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_lineCap == index++);
#endif // CANVAS_SUPPORT
  verify(OP_ATOM_lineHeight == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_lineIncrement == index++);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_lineJoin == index++);
  verify(OP_ATOM_lineWidth == index++);
#endif // CANVAS_SUPPORT
  verify(OP_ATOM_lineno == index++);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(OP_ATOM_lines == index++);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(OP_ATOM_link == index++);
  verify(OP_ATOM_linkColor == index++);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_linkURL == index++);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_links == index++);
  verify(OP_ATOM_list == index++);
  verify(OP_ATOM_listStyle == index++);
  verify(OP_ATOM_listStyleImage == index++);
  verify(OP_ATOM_listStylePosition == index++);
  verify(OP_ATOM_listStyleType == index++);
  verify(OP_ATOM_listener == index++);
#ifdef PROGRESS_EVENTS_SUPPORT
  verify(OP_ATOM_loaded == index++);
#endif // PROGRESS_EVENTS_SUPPORT
#if defined USE_SPDY && defined DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_loadedWithSPDY == index++);
#endif // USE_SPDY && DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_localName == index++);
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(OP_ATOM_localStorage == index++);
#endif // CLIENTSIDE_STORAGE_SUPPORT
  verify(OP_ATOM_locale == index++);
  verify(OP_ATOM_location == index++);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_locked == index++);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_logo == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_longDesc == index++);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_longitude == index++);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_loop == index++);
  verify(OP_ATOM_low == index++);
  verify(OP_ATOM_lowsrc == index++);
  verify(OP_ATOM_margin == index++);
  verify(OP_ATOM_marginBottom == index++);
  verify(OP_ATOM_marginHeight == index++);
  verify(OP_ATOM_marginLeft == index++);
  verify(OP_ATOM_marginRight == index++);
  verify(OP_ATOM_marginTop == index++);
  verify(OP_ATOM_marginWidth == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_marker == index++);
  verify(OP_ATOM_markerEnd == index++);
  verify(OP_ATOM_markerHeight == index++);
  verify(OP_ATOM_markerMid == index++);
#endif // SVG_DOM
  verify(OP_ATOM_markerOffset == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_markerStart == index++);
  verify(OP_ATOM_markerUnits == index++);
  verify(OP_ATOM_markerWidth == index++);
  verify(OP_ATOM_mask == index++);
  verify(OP_ATOM_maskContentUnits == index++);
  verify(OP_ATOM_maskUnits == index++);
#endif // SVG_DOM
  verify(OP_ATOM_matches == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_matrix == index++);
#endif // SVG_DOM
  verify(OP_ATOM_max == index++);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_maxAge == index++);
  verify(OP_ATOM_maxEntries == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_maxHeight == index++);
  verify(OP_ATOM_maxLength == index++);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_maxPathLength == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_maxSize == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined UPNP_SUPPORT || (defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL)
  verify(OP_ATOM_maxUploadRate == index++);
#endif // UPNP_SUPPORT || GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(OP_ATOM_maxWidth == index++);
  verify(OP_ATOM_maxZoom == index++);
  verify(OP_ATOM_media == index++);
  verify(OP_ATOM_mediaText == index++);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_mediaType == index++);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_meetOrSlice == index++);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_menu == index++);
#endif // EXTENSION_SUPPORT
  verify(OP_ATOM_menubar == index++);
  verify(OP_ATOM_message == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_messageId == index++);
  verify(OP_ATOM_messagePriority == index++);
  verify(OP_ATOM_messageType == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_metaData == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_metaKey == index++);
  verify(OP_ATOM_method == index++);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(OP_ATOM_millisecondsSelf == index++);
  verify(OP_ATOM_millisecondsTotal == index++);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(OP_ATOM_mimeTypes == index++);
  verify(OP_ATOM_min == index++);
  verify(OP_ATOM_minHeight == index++);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_minUpdateInterval == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_minWidth == index++);
  verify(OP_ATOM_minZoom == index++);
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_miterLimit == index++);
#endif // CANVAS_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_mobilePhone == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_mode == index++);
#endif // SVG_DOM
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_modified == index++);
  verify(OP_ATOM_mountPoints == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_moveBy == index++);
  verify(OP_ATOM_moveTo == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_msgRingtoneVolume == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_multiple == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_muted == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_name == index++);
  verify(OP_ATOM_namedItem == index++);
  verify(OP_ATOM_names == index++);
  verify(OP_ATOM_namespaceURI == index++);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_nativePath == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_naturalHeight == index++);
  verify(OP_ATOM_naturalWidth == index++);
  verify(OP_ATOM_navDown == index++);
  verify(OP_ATOM_navIndex == index++);
  verify(OP_ATOM_navLeft == index++);
  verify(OP_ATOM_navRight == index++);
  verify(OP_ATOM_navUp == index++);
  verify(OP_ATOM_navigationMode == index++);
  verify(OP_ATOM_navigator == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_nearestViewportElement == index++);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_networkConnectionType == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_networkState == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM3_LOAD
  verify(OP_ATOM_newDocument == index++);
#endif // DOM3_LOAD
#if defined DOM3_SAVE || defined DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_newLine == index++);
#endif // DOM3_SAVE || DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_newURL == index++);
#if defined DOM2_MUTATION_EVENTS || defined CLIENTSIDE_STORAGE_SUPPORT
  verify(OP_ATOM_newValue == index++);
#endif // DOM2_MUTATION_EVENTS || CLIENTSIDE_STORAGE_SUPPORT
  verify(OP_ATOM_next == index++);
  verify(OP_ATOM_nextElementSibling == index++);
  verify(OP_ATOM_nextSibling == index++);
  verify(OP_ATOM_noHref == index++);
  verify(OP_ATOM_noResize == index++);
  verify(OP_ATOM_noShade == index++);
  verify(OP_ATOM_noValidate == index++);
  verify(OP_ATOM_noWrap == index++);
  verify(OP_ATOM_nodeName == index++);
  verify(OP_ATOM_nodeType == index++);
  verify(OP_ATOM_nodeValue == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_normalizedPathSegList == index++);
#endif // SVG_DOM
  verify(OP_ATOM_notationName == index++);
  verify(OP_ATOM_notations == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_numOctaves == index++);
  verify(OP_ATOM_numberOfItems == index++);
  verify(OP_ATOM_numberOfSegments == index++);
#endif // SVG_DOM
#ifdef DOM3_XPATH
  verify(OP_ATOM_numberValue == index++);
#endif // DOM3_XPATH
  verify(OP_ATOM_object == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_offset == index++);
#endif // SVG_DOM
  verify(OP_ATOM_offsetHeight == index++);
  verify(OP_ATOM_offsetLeft == index++);
  verify(OP_ATOM_offsetParent == index++);
  verify(OP_ATOM_offsetTop == index++);
  verify(OP_ATOM_offsetWidth == index++);
  verify(OP_ATOM_offsetX == index++);
  verify(OP_ATOM_offsetY == index++);
  verify(OP_ATOM_oldURL == index++);
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(OP_ATOM_oldValue == index++);
#endif // CLIENTSIDE_STORAGE_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_onAddressBookItemsFound == index++);
  verify(OP_ATOM_onCalendarItemAlert == index++);
  verify(OP_ATOM_onCalendarItemsFound == index++);
  verify(OP_ATOM_onCallEvent == index++);
  verify(OP_ATOM_onCallRecordsFound == index++);
  verify(OP_ATOM_onCameraCaptured == index++);
  verify(OP_ATOM_onChargeLevelChange == index++);
  verify(OP_ATOM_onChargeStateChange == index++);
  verify(OP_ATOM_onFilesFound == index++);
  verify(OP_ATOM_onFocus == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_onLine == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_onLowBattery == index++);
  verify(OP_ATOM_onMaximize == index++);
  verify(OP_ATOM_onMessageArrived == index++);
  verify(OP_ATOM_onMessageSendingFailure == index++);
  verify(OP_ATOM_onMessagesFound == index++);
  verify(OP_ATOM_onNetworkConnectionChanged == index++);
  verify(OP_ATOM_onPositionRetrieved == index++);
  verify(OP_ATOM_onRestore == index++);
  verify(OP_ATOM_onScreenChangeDimensions == index++);
  verify(OP_ATOM_onSignalSourceChange == index++);
  verify(OP_ATOM_onStateChange == index++);
  verify(OP_ATOM_onVCardExportingFinish == index++);
  verify(OP_ATOM_onWakeup == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_onaddtrack == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_onafterupdate == index++);
#endif // GADGET_SUPPORT
#ifdef OPERA_AUTH_SUPPORT
  verify(OP_ATOM_onauthenticationchange == index++);
#endif // OPERA_AUTH_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_onbeforeupdate == index++);
#endif // GADGET_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(OP_ATOM_onclose == index++);
#endif // WEBSOCKETS_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(OP_ATOM_onconnect == index++);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_oncreate == index++);
#endif // EXTENSION_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_oncuechange == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_ondisconnect == index++);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_ondragstart == index++);
  verify(OP_ATOM_ondragstop == index++);
#endif // GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_onenter == index++);
#endif // MEDIA_HTML_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(OP_ATOM_onerror == index++);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_onexit == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_onfocus == index++);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_onhide == index++);
#endif // GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_onload == index++);
#endif // MEDIA_HTML_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(OP_ATOM_onmessage == index++);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_onmove == index++);
#endif // EXTENSION_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(OP_ATOM_onopen == index++);
#endif // WEBSOCKETS_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(OP_ATOM_onrangechange == index++);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_onrefresh == index++);
#endif // GADGET_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_onremove == index++);
#endif // EXTENSION_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_onremovetrack == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_onshow == index++);
#endif // GADGET_SUPPORT
  verify(OP_ATOM_onthread == index++);
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_onupdate == index++);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_onviewstatechanged == index++);
#endif // GADGET_SUPPORT
  verify(OP_ATOM_opacity == index++);
  verify(OP_ATOM_opener == index++);
#ifdef CSS_TRANSFORMS
  verify(OP_ATOM_operationType == index++);
#endif // CSS_TRANSFORMS
#ifdef SVG_DOM
  verify(OP_ATOM_operator == index++);
#endif // SVG_DOM
  verify(OP_ATOM_optimum == index++);
  verify(OP_ATOM_options == index++);
  verify(OP_ATOM_order == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_orderX == index++);
  verify(OP_ATOM_orderY == index++);
  verify(OP_ATOM_orientAngle == index++);
  verify(OP_ATOM_orientType == index++);
#endif // SVG_DOM
  verify(OP_ATOM_orientation == index++);
  verify(OP_ATOM_origin == index++);
#if defined(GADGET_SUPPORT) || defined(WEBSERVER_SUPPORT)
  verify(OP_ATOM_originURL == index++);
#endif // GADGET_SUPPORT || WEBSERVER_SUPPORT
  verify(OP_ATOM_orphans == index++);
  verify(OP_ATOM_outerHTML == index++);
  verify(OP_ATOM_outerHeight == index++);
  verify(OP_ATOM_outerText == index++);
  verify(OP_ATOM_outerWidth == index++);
  verify(OP_ATOM_outline == index++);
  verify(OP_ATOM_outlineColor == index++);
  verify(OP_ATOM_outlineOffset == index++);
  verify(OP_ATOM_outlineStyle == index++);
  verify(OP_ATOM_outlineWidth == index++);
  verify(OP_ATOM_output == index++);
  verify(OP_ATOM_overflow == index++);
  verify(OP_ATOM_overflowWrap == index++);
  verify(OP_ATOM_overflowX == index++);
  verify(OP_ATOM_overflowY == index++);
  verify(OP_ATOM_ownerDocument == index++);
  verify(OP_ATOM_ownerElement == index++);
  verify(OP_ATOM_ownerNode == index++);
  verify(OP_ATOM_ownerRule == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_ownerSVGElement == index++);
#endif // SVG_DOM
  verify(OP_ATOM_padding == index++);
  verify(OP_ATOM_paddingBottom == index++);
  verify(OP_ATOM_paddingLeft == index++);
  verify(OP_ATOM_paddingRight == index++);
  verify(OP_ATOM_paddingTop == index++);
  verify(OP_ATOM_page == index++);
  verify(OP_ATOM_pageBreakAfter == index++);
  verify(OP_ATOM_pageBreakBefore == index++);
  verify(OP_ATOM_pageBreakInside == index++);
#ifdef PAGED_MEDIA_SUPPORT
  verify(OP_ATOM_pageCount == index++);
#endif // PAGED_MEDIA_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_pageURL == index++);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_pageX == index++);
  verify(OP_ATOM_pageXOffset == index++);
  verify(OP_ATOM_pageY == index++);
  verify(OP_ATOM_pageYOffset == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_paintType == index++);
#endif // SVG_DOM
  verify(OP_ATOM_parameterNames == index++);
  verify(OP_ATOM_parent == index++);
  verify(OP_ATOM_parentElement == index++);
  verify(OP_ATOM_parentNode == index++);
  verify(OP_ATOM_parentRule == index++);
  verify(OP_ATOM_parentStyleSheet == index++);
  verify(OP_ATOM_parentWindow == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_passwordProtected == index++);
#endif // WEBSERVER_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_path == index++);
#endif // GADGET_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_pathLength == index++);
  verify(OP_ATOM_pathSegList == index++);
  verify(OP_ATOM_pathSegType == index++);
  verify(OP_ATOM_pathSegTypeAsLetter == index++);
#endif // SVG_DOM
  verify(OP_ATOM_pathname == index++);
  verify(OP_ATOM_pattern == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_patternContentUnits == index++);
#endif // SVG_DOM
  verify(OP_ATOM_patternMismatch == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_patternTransform == index++);
  verify(OP_ATOM_patternUnits == index++);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_pauseOnExit == index++);
  verify(OP_ATOM_paused == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_percentRemaining == index++);
  verify(OP_ATOM_phoneColorDepthDefault == index++);
  verify(OP_ATOM_phoneFirmware == index++);
  verify(OP_ATOM_phoneMSISDN == index++);
  verify(OP_ATOM_phoneManufacturer == index++);
  verify(OP_ATOM_phoneModel == index++);
  verify(OP_ATOM_phoneOS == index++);
  verify(OP_ATOM_phoneOperatorName == index++);
  verify(OP_ATOM_phoneScreenHeightDefault == index++);
  verify(OP_ATOM_phoneScreenWidthDefault == index++);
  verify(OP_ATOM_phoneSoftware == index++);
  verify(OP_ATOM_phoneUserUniqueId == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_pixelBottom == index++);
  verify(OP_ATOM_pixelDepth == index++);
  verify(OP_ATOM_pixelHeight == index++);
  verify(OP_ATOM_pixelLeft == index++);
  verify(OP_ATOM_pixelRight == index++);
  verify(OP_ATOM_pixelTop == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_pixelUnitToMillimeterX == index++);
  verify(OP_ATOM_pixelUnitToMillimeterY == index++);
#endif // SVG_DOM
  verify(OP_ATOM_pixelWidth == index++);
  verify(OP_ATOM_placeholder == index++);
  verify(OP_ATOM_platform == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_playbackRate == index++);
  verify(OP_ATOM_played == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_plugins == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_pointerEvents == index++);
  verify(OP_ATOM_points == index++);
  verify(OP_ATOM_pointsAtX == index++);
  verify(OP_ATOM_pointsAtY == index++);
  verify(OP_ATOM_pointsAtZ == index++);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_popup == index++);
#endif // EXTENSION_SUPPORT
  verify(OP_ATOM_port == index++);
#ifdef DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(OP_ATOM_port1 == index++);
  verify(OP_ATOM_port2 == index++);
  verify(OP_ATOM_ports == index++);
#endif // DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(OP_ATOM_posBottom == index++);
  verify(OP_ATOM_posHeight == index++);
  verify(OP_ATOM_posLeft == index++);
  verify(OP_ATOM_posRight == index++);
  verify(OP_ATOM_posTop == index++);
  verify(OP_ATOM_posWidth == index++);
  verify(OP_ATOM_position == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_poster == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_preferences == index++);
#endif // GADGET_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_prefetchPrimaryLink == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_prefix == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_preload == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef CANVAS3D_SUPPORT
  verify(OP_ATOM_premultipliedAlpha == index++);
#endif // CANVAS3D_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_preserveAlpha == index++);
  verify(OP_ATOM_preserveAspectRatio == index++);
#endif // SVG_DOM
#ifdef CANVAS3D_SUPPORT
  verify(OP_ATOM_preserveDrawingBuffer == index++);
#endif // CANVAS3D_SUPPORT
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_prevPosition == index++);
  verify(OP_ATOM_prevTabGroup == index++);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef DOM2_MUTATION_EVENTS
  verify(OP_ATOM_prevValue == index++);
#endif // DOM2_MUTATION_EVENTS
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_prevWindow == index++);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_previous == index++);
  verify(OP_ATOM_previousElementSibling == index++);
  verify(OP_ATOM_previousSibling == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_primitiveUnits == index++);
#endif // SVG_DOM
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_private == index++);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_processorUtilizationPercent == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_prompt == index++);
#ifdef USER_JAVASCRIPT
  verify(OP_ATOM_propagationStopped == index++);
#endif // USER_JAVASCRIPT
  verify(OP_ATOM_properties == index++);
  verify(OP_ATOM_propertyName == index++);
  verify(OP_ATOM_protocol == index++);
  verify(OP_ATOM_prototype == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_proxyName == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_pubDate == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_publicIP == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_publicId == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_publicPort == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_publicationDate == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_queryItems == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_quotes == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_r == index++);
  verify(OP_ATOM_r1 == index++);
  verify(OP_ATOM_r2 == index++);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_radioSignalSource == index++);
  verify(OP_ATOM_radioSignalStrengthPercent == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_radiusX == index++);
  verify(OP_ATOM_radiusY == index++);
#endif // SVG_DOM
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(OP_ATOM_range == index++);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef DOM_SELECTION_SUPPORT
  verify(OP_ATOM_rangeCount == index++);
#endif // DOM_SELECTION_SUPPORT
  verify(OP_ATOM_rangeOverflow == index++);
  verify(OP_ATOM_rangeUnderflow == index++);
  verify(OP_ATOM_readOnly == index++);
  verify(OP_ATOM_readyState == index++);
#ifdef WEBSOCKETS_SUPPORT
  verify(OP_ATOM_reason == index++);
#endif // WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_red == index++);
  verify(OP_ATOM_refX == index++);
  verify(OP_ATOM_refY == index++);
#endif // SVG_DOM
  verify(OP_ATOM_referrer == index++);
  verify(OP_ATOM_rel == index++);
#ifdef DOM2_MUTATION_EVENTS
  verify(OP_ATOM_relatedNode == index++);
#endif // DOM2_MUTATION_EVENTS
  verify(OP_ATOM_relatedTarget == index++);
#ifdef OPERA_AUTH_SUPPORT
  verify(OP_ATOM_rememberMe == index++);
#endif // OPERA_AUTH_SUPPORT
  verify(OP_ATOM_renderingMode == index++);
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(OP_ATOM_rendezvous == index++);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(OP_ATOM_repeat == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_request == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_required == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_requiredExtensions == index++);
  verify(OP_ATOM_requiredFeatures == index++);
#endif // SVG_DOM
  verify(OP_ATOM_resize == index++);
  verify(OP_ATOM_resizeBy == index++);
  verify(OP_ATOM_resizeTo == index++);
  verify(OP_ATOM_response == index++);
  verify(OP_ATOM_responseText == index++);
  verify(OP_ATOM_responseType == index++);
  verify(OP_ATOM_responseXML == index++);
  verify(OP_ATOM_result == index++);
#ifdef DOM3_XPATH
  verify(OP_ATOM_resultType == index++);
#endif // DOM3_XPATH
  verify(OP_ATOM_returnValue == index++);
  verify(OP_ATOM_rev == index++);
  verify(OP_ATOM_reversed == index++);
  verify(OP_ATOM_rgbColor == index++);
  verify(OP_ATOM_right == index++);
  verify(OP_ATOM_rightMargin == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_ringtoneVolume == index++);
#endif // DOM_JIL_API_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(OP_ATOM_robotstxtEnabled == index++);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(OP_ATOM_root == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_rootElement == index++);
  verify(OP_ATOM_rotate == index++);
#endif // SVG_DOM
#ifdef TOUCH_EVENTS_SUPPORT
  verify(OP_ATOM_rotation == index++);
#endif // TOUCH_EVENTS_SUPPORT
  verify(OP_ATOM_rowIndex == index++);
  verify(OP_ATOM_rowSpan == index++);
  verify(OP_ATOM_rows == index++);
#ifdef DATABASE_STORAGE_SUPPORT
  verify(OP_ATOM_rowsAffected == index++);
#endif // DATABASE_STORAGE_SUPPORT
  verify(OP_ATOM_rules == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_rx == index++);
  verify(OP_ATOM_ry == index++);
#endif // SVG_DOM
#if defined(SVG_DOM) || defined(TOUCH_EVENTS_SUPPORT)
  verify(OP_ATOM_scale == index++);
#endif // SVG_DOM || TOUCH_EVENTS_SUPPORT
  verify(OP_ATOM_scheme == index++);
  verify(OP_ATOM_scope == index++);
#ifdef SCOPE_SUPPORT
  verify(OP_ATOM_scopeListenerAddress == index++);
#endif // SCOPE_SUPPORT
  verify(OP_ATOM_screen == index++);
  verify(OP_ATOM_screenLeft == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_screenPixelToMillimeterX == index++);
  verify(OP_ATOM_screenPixelToMillimeterY == index++);
#endif // SVG_DOM
  verify(OP_ATOM_screenTop == index++);
  verify(OP_ATOM_screenX == index++);
  verify(OP_ATOM_screenY == index++);
  verify(OP_ATOM_scripts == index++);
  verify(OP_ATOM_scroll == index++);
  verify(OP_ATOM_scrollAmount == index++);
  verify(OP_ATOM_scrollBy == index++);
  verify(OP_ATOM_scrollDelay == index++);
  verify(OP_ATOM_scrollHeight == index++);
  verify(OP_ATOM_scrollLeft == index++);
  verify(OP_ATOM_scrollTo == index++);
  verify(OP_ATOM_scrollTop == index++);
  verify(OP_ATOM_scrollWidth == index++);
  verify(OP_ATOM_scrollX == index++);
  verify(OP_ATOM_scrollY == index++);
  verify(OP_ATOM_scrollbar3dlightColor == index++);
  verify(OP_ATOM_scrollbarArrowColor == index++);
  verify(OP_ATOM_scrollbarBaseColor == index++);
  verify(OP_ATOM_scrollbarDarkshadowColor == index++);
  verify(OP_ATOM_scrollbarFaceColor == index++);
  verify(OP_ATOM_scrollbarHighlightColor == index++);
  verify(OP_ATOM_scrollbarShadowColor == index++);
  verify(OP_ATOM_scrollbarTrackColor == index++);
  verify(OP_ATOM_scrolling == index++);
  verify(OP_ATOM_search == index++);
  verify(OP_ATOM_sectionRowIndex == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_seed == index++);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_seekable == index++);
  verify(OP_ATOM_seeking == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_selected == index++);
  verify(OP_ATOM_selectedIndex == index++);
  verify(OP_ATOM_selectedOptions == index++);
#ifdef DOM_SELECTION_SUPPORT
  verify(OP_ATOM_selectionDirection == index++);
  verify(OP_ATOM_selectionEnd == index++);
  verify(OP_ATOM_selectionStart == index++);
#endif // DOM_SELECTION_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_selectionText == index++);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_selectorText == index++);
  verify(OP_ATOM_self == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_servicePath == index++);
#endif // WEBSERVER_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(OP_ATOM_services == index++);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_session == index++);
#endif // WEBSERVER_SUPPORT
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(OP_ATOM_sessionStorage == index++);
#endif // CLIENTSIDE_STORAGE_SUPPORT
  verify(OP_ATOM_setInterval == index++);
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_shadowBlur == index++);
  verify(OP_ATOM_shadowColor == index++);
  verify(OP_ATOM_shadowOffsetX == index++);
  verify(OP_ATOM_shadowOffsetY == index++);
#endif // CANVAS_SUPPORT
  verify(OP_ATOM_shape == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_shapeRendering == index++);
#endif // SVG_DOM
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT
  verify(OP_ATOM_sharedFolder == index++);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT
  verify(OP_ATOM_sheet == index++);
  verify(OP_ATOM_shiftKey == index++);
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_shortName == index++);
#endif // GADGET_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_showImages == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef DOM3_XPATH
  verify(OP_ATOM_singleNodeValue == index++);
#endif // DOM3_XPATH
  verify(OP_ATOM_size == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_slope == index++);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_snapToLines == index++);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM3_XPATH
  verify(OP_ATOM_snapshotLength == index++);
#endif // DOM3_XPATH
#ifdef SVG_DOM
  verify(OP_ATOM_solidColor == index++);
  verify(OP_ATOM_solidOpacity == index++);
#endif // SVG_DOM
  verify(OP_ATOM_source == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_sourceAddress == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_spacing == index++);
#endif // SVG_DOM
  verify(OP_ATOM_span == index++);
  verify(OP_ATOM_speakNumeral == index++);
  verify(OP_ATOM_specified == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_specularConstant == index++);
  verify(OP_ATOM_specularExponent == index++);
#endif // SVG_DOM
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_speed == index++);
#endif // DOM_GEOLOCATION_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_speeddial == index++);
#endif // EXTENSION_SUPPORT
#ifdef INTERNAL_SPELLCHECK_SUPPORT
  verify(OP_ATOM_spellcheck == index++);
#endif // INTERNAL_SPELLCHECK_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_spreadMethod == index++);
#endif // SVG_DOM
  verify(OP_ATOM_src == index++);
  verify(OP_ATOM_srcElement == index++);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_srcURL == index++);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_srclang == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_standby == index++);
  verify(OP_ATOM_start == index++);
#ifdef DOM2_RANGE
  verify(OP_ATOM_startContainer == index++);
#endif // DOM2_RANGE
#if defined(DOM2_RANGE) || defined(SVG_DOM)
  verify(OP_ATOM_startOffset == index++);
#endif // DOM2_RANGE || SVG_DOM
#if defined(MEDIA_HTML_SUPPORT) || defined(DOM_JIL_API_SUPPORT)
  verify(OP_ATOM_startTime == index++);
#endif // MEDIA_HTML_SUPPORT || DOM_JIL_API_SUPPORT
  verify(OP_ATOM_state == index++);
  verify(OP_ATOM_status == index++);
#ifdef DOM_HTTP_SUPPORT
  verify(OP_ATOM_statusText == index++);
#endif // DOM_HTTP_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_stdDeviationX == index++);
  verify(OP_ATOM_stdDeviationY == index++);
#endif // SVG_DOM
#ifdef CANVAS3D_SUPPORT
  verify(OP_ATOM_stencil == index++);
#endif // CANVAS3D_SUPPORT
  verify(OP_ATOM_step == index++);
  verify(OP_ATOM_stepMismatch == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_stitchTiles == index++);
  verify(OP_ATOM_stopColor == index++);
  verify(OP_ATOM_stopOpacity == index++);
#endif // SVG_DOM
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(OP_ATOM_storageArea == index++);
#endif // CLIENTSIDE_STORAGE_SUPPORT
#ifdef SCOPE_SUPPORT
  verify(OP_ATOM_stpVersion == index++);
#endif // SCOPE_SUPPORT
#ifdef DOM3_XPATH
  verify(OP_ATOM_stringValue == index++);
#endif // DOM3_XPATH
#ifdef SVG_DOM
  verify(OP_ATOM_stroke == index++);
  verify(OP_ATOM_strokeDasharray == index++);
  verify(OP_ATOM_strokeDashoffset == index++);
  verify(OP_ATOM_strokeLinecap == index++);
  verify(OP_ATOM_strokeLinejoin == index++);
  verify(OP_ATOM_strokeMiterlimit == index++);
  verify(OP_ATOM_strokeOpacity == index++);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_strokeStyle == index++);
#endif // CANVAS_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_strokeWidth == index++);
#endif // SVG_DOM
  verify(OP_ATOM_style == index++);
  verify(OP_ATOM_styleFloat == index++);
  verify(OP_ATOM_styleSheet == index++);
  verify(OP_ATOM_styleSheets == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_subject == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_subscribedFeeds == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_suffixes == index++);
  verify(OP_ATOM_summary == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_surfaceScale == index++);
  verify(OP_ATOM_sweepFlag == index++);
#endif // SVG_DOM
  verify(OP_ATOM_systemId == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_systemLanguage == index++);
#endif // SVG_DOM
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_systemNewLine == index++);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(OP_ATOM_tBodies == index++);
  verify(OP_ATOM_tFoot == index++);
  verify(OP_ATOM_tHead == index++);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_tab == index++);
  verify(OP_ATOM_tabGroup == index++);
  verify(OP_ATOM_tabGroups == index++);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_tabIndex == index++);
  verify(OP_ATOM_tableLayout == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_tableValues == index++);
#endif // SVG_DOM
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_tabs == index++);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(OP_ATOM_tagName == index++);
  verify(OP_ATOM_target == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_targetElement == index++);
#endif // SVG_DOM
#ifdef SVG_SUPPORT
  verify(OP_ATOM_targetFps == index++);
#endif // SVG_SUPPORT
#ifdef TOUCH_EVENTS_SUPPORT
  verify(OP_ATOM_targetTouches == index++);
#endif // TOUCH_EVENTS_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(OP_ATOM_targetURLPatterns == index++);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_targetX == index++);
  verify(OP_ATOM_targetY == index++);
#endif // SVG_DOM
  verify(OP_ATOM_text == index++);
  verify(OP_ATOM_textAlign == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_textAnchor == index++);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(OP_ATOM_textBaseline == index++);
#endif // CANVAS_SUPPORT
  verify(OP_ATOM_textContent == index++);
  verify(OP_ATOM_textDecoration == index++);
  verify(OP_ATOM_textIndent == index++);
  verify(OP_ATOM_textLength == index++);
  verify(OP_ATOM_textOverflow == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_textRendering == index++);
#endif // SVG_DOM
  verify(OP_ATOM_textShadow == index++);
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_textTracks == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_textTransform == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_time == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_timeStamp == index++);
#ifdef DOM_HTTP_SUPPORT
  verify(OP_ATOM_timeout == index++);
#endif // DOM_HTTP_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_timestamp == index++);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(OP_ATOM_title == index++);
  verify(OP_ATOM_toElement == index++);
  verify(OP_ATOM_tooLong == index++);
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_toolbar == index++);
#endif // EXTENSION_SUPPORT
  verify(OP_ATOM_top == index++);
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_topWindow == index++);
#endif // EXTENSION_SUPPORT
  verify(OP_ATOM_total == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_totalMemory == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef TOUCH_EVENTS_SUPPORT
  verify(OP_ATOM_touches == index++);
#endif // TOUCH_EVENTS_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_track == index++);
#endif // MEDIA_HTML_SUPPORT
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(OP_ATOM_transform == index++);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef CSS_TRANSFORMS
  verify(OP_ATOM_transformOrigin == index++);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(OP_ATOM_transition == index++);
  verify(OP_ATOM_transitionDelay == index++);
  verify(OP_ATOM_transitionDuration == index++);
  verify(OP_ATOM_transitionProperty == index++);
  verify(OP_ATOM_transitionTimingFunction == index++);
#endif // CSS_TRANSITIONS
  verify(OP_ATOM_type == index++);
  verify(OP_ATOM_typeMismatch == index++);
#if defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(OP_ATOM_types == index++);
#endif // DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(OP_ATOM_unicodeBidi == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_unitType == index++);
#endif // SVG_DOM
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(OP_ATOM_uniteDeviceName == index++);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef UPNP_SUPPORT
  verify(OP_ATOM_uniteServiceName == index++);
#endif // UPNP_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(OP_ATOM_uniteUser == index++);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_unread == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_unselectable == index++);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_updateInterval == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined DOM_HTTP_SUPPORT && defined PROGRESS_EVENTS_SUPPORT
  verify(OP_ATOM_upload == index++);
#endif // DOM_HTTP_SUPPORT && PROGRESS_EVENTS_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(OP_ATOM_upnpDeviceIcon == index++);
  verify(OP_ATOM_upnpDevicePayload == index++);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(OP_ATOM_upnpEnabled == index++);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(OP_ATOM_uri == index++);
#if defined CLIENTSIDE_STORAGE_SUPPORT || defined UPNP_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(OP_ATOM_url == index++);
#endif // CLIENTSIDE_STORAGE_SUPPORT || UPNP_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_useCurrentView == index++);
#endif // SVG_DOM
  verify(OP_ATOM_useMap == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_userAccountBalance == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_userAgent == index++);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_userDefinedTitle == index++);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(OP_ATOM_userLanguage == index++);
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_userName == index++);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_userSubscriptionType == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_userZoom == index++);
#ifdef OPERA_AUTH_SUPPORT
  verify(OP_ATOM_username == index++);
#endif // OPERA_AUTH_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(OP_ATOM_users == index++);
#endif // WEBSERVER_SUPPORT
  verify(OP_ATOM_vAlign == index++);
  verify(OP_ATOM_vLink == index++);
  verify(OP_ATOM_valid == index++);
  verify(OP_ATOM_validationMessage == index++);
  verify(OP_ATOM_validity == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_validityPeriodHours == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_value == index++);
  verify(OP_ATOM_valueAsDate == index++);
  verify(OP_ATOM_valueAsNumber == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_valueAsString == index++);
  verify(OP_ATOM_valueInSpecifiedUnits == index++);
#endif // SVG_DOM
  verify(OP_ATOM_valueMissing == index++);
  verify(OP_ATOM_valueType == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_values == index++);
  verify(OP_ATOM_vectorEffect == index++);
#endif // SVG_DOM
  verify(OP_ATOM_version == index++);
  verify(OP_ATOM_verticalAlign == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_vibrationSetting == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(OP_ATOM_videoHeight == index++);
  verify(OP_ATOM_videoWidth == index++);
#endif // MEDIA_HTML_SUPPORT
  verify(OP_ATOM_view == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_viewBox == index++);
  verify(OP_ATOM_viewport == index++);
  verify(OP_ATOM_viewportElement == index++);
  verify(OP_ATOM_viewportFill == index++);
  verify(OP_ATOM_viewportFillOpacity == index++);
#endif // SVG_DOM
  verify(OP_ATOM_visibility == index++);
  verify(OP_ATOM_visibilityState == index++);
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT
  verify(OP_ATOM_visibleToLocalNetwork == index++);
  verify(OP_ATOM_visibleToSearchEngines == index++);
  verify(OP_ATOM_visibleToServiceDiscovery == index++);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT
  verify(OP_ATOM_vlinkColor == index++);
  verify(OP_ATOM_volume == index++);
  verify(OP_ATOM_vspace == index++);
#ifdef WEBSOCKETS_SUPPORT
  verify(OP_ATOM_wasClean == index++);
#endif // WEBSOCKETS_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(OP_ATOM_whatToShow == index++);
#endif // DOM2_TRAVERSAL
  verify(OP_ATOM_wheelDelta == index++);
  verify(OP_ATOM_wheelDeltaX == index++);
  verify(OP_ATOM_wheelDeltaY == index++);
  verify(OP_ATOM_which == index++);
  verify(OP_ATOM_whiteSpace == index++);
  verify(OP_ATOM_wholeText == index++);
  verify(OP_ATOM_widgetMode == index++);
#ifdef GADGET_SUPPORT
  verify(OP_ATOM_widgets == index++);
#endif // GADGET_SUPPORT
  verify(OP_ATOM_widows == index++);
  verify(OP_ATOM_width == index++);
  verify(OP_ATOM_willValidate == index++);
  verify(OP_ATOM_window == index++);
#ifdef EXTENSION_SUPPORT
  verify(OP_ATOM_windows == index++);
#endif // EXTENSION_SUPPORT
#ifdef CORS_SUPPORT
  verify(OP_ATOM_withCredentials == index++);
#endif // CORS_SUPPORT
  verify(OP_ATOM_wordSpacing == index++);
  verify(OP_ATOM_wordWrap == index++);
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_workPhone == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_wrap == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_writingMode == index++);
#endif // SVG_DOM
  verify(OP_ATOM_x == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_x1 == index++);
  verify(OP_ATOM_x2 == index++);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_xAxis == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_xChannelSelector == index++);
  verify(OP_ATOM_xmlbase == index++);
  verify(OP_ATOM_xmlspace == index++);
#endif // SVG_DOM
  verify(OP_ATOM_y == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_y1 == index++);
  verify(OP_ATOM_y2 == index++);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_yAxis == index++);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(OP_ATOM_yChannelSelector == index++);
  verify(OP_ATOM_z == index++);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(OP_ATOM_zAxis == index++);
#endif // DOM_JIL_API_SUPPORT
  verify(OP_ATOM_zIndex == index++);
  verify(OP_ATOM_zoom == index++);
#ifdef SVG_DOM
  verify(OP_ATOM_zoomAndPan == index++);
#endif // SVG_DOM
  verify(OP_ATOM_ABSOLUTELY_LAST_ENUM == index);
}

test("Atom to string conversion")
{
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_AppleDashboardRegion), "AppleDashboardRegion") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_MIMEType), "MIMEType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_Multimedia), "Multimedia") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OBorderImage), "OBorderImage") == 0);
#ifdef CSS_MINI_EXTENSIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OFocusOpacity), "OFocusOpacity") == 0);
#endif // CSS_MINI_EXTENSIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OLink), "OLink") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OLinkSource), "OLinkSource") == 0);
#ifdef CSS_MINI_EXTENSIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OMiniFold), "OMiniFold") == 0);
#endif // CSS_MINI_EXTENSIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OObjectFit), "OObjectFit") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OObjectPosition), "OObjectPosition") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTabSize), "OTabSize") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTableBaseline), "OTableBaseline") == 0);
#ifdef CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTransform), "OTransform") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTransformOrigin), "OTransformOrigin") == 0);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTransition), "OTransition") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTransitionDelay), "OTransitionDelay") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTransitionDuration), "OTransitionDuration") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTransitionProperty), "OTransitionProperty") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_OTransitionTimingFunction), "OTransitionTimingFunction") == 0);
#endif // CSS_TRANSITIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_URL), "URL") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WapAccesskey), "WapAccesskey") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WapInputFormat), "WapInputFormat") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WapInputRequired), "WapInputRequired") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WapMarqueeDir), "WapMarqueeDir") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WapMarqueeLoop), "WapMarqueeLoop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WapMarqueeSpeed), "WapMarqueeSpeed") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WapMarqueeStyle), "WapMarqueeStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBackgroundSize), "WebkitBackgroundSize") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBorderBottomLeftRadius), "WebkitBorderBottomLeftRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBorderBottomRightRadius), "WebkitBorderBottomRightRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBorderRadius), "WebkitBorderRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBorderTopLeftRadius), "WebkitBorderTopLeftRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBorderTopRightRadius), "WebkitBorderTopRightRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBoxAlign), "WebkitBoxAlign") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBoxDirection), "WebkitBoxDirection") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBoxFlex), "WebkitBoxFlex") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBoxLines), "WebkitBoxLines") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBoxOrdinalGroup), "WebkitBoxOrdinalGroup") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBoxOrient), "WebkitBoxOrient") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBoxPack), "WebkitBoxPack") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitBoxShadow), "WebkitBoxShadow") == 0);
#ifdef CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitTransform), "WebkitTransform") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitTransformOrigin), "WebkitTransformOrigin") == 0);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitTransition), "WebkitTransition") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitTransitionDelay), "WebkitTransitionDelay") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitTransitionDuration), "WebkitTransitionDuration") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitTransitionProperty), "WebkitTransitionProperty") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_WebkitTransitionTimingFunction), "WebkitTransitionTimingFunction") == 0);
#endif // CSS_TRANSITIONS
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_a), "a") == 0);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_aLink), "aLink") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_abbr), "abbr") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_accept), "accept") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_acceptCharset), "acceptCharset") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_accessKey), "accessKey") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_accountId), "accountId") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_accountName), "accountName") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_accuracy), "accuracy") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_action), "action") == 0);
#if defined WEBSERVER_SUPPORT || defined GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_active), "active") == 0);
#endif // WEBSERVER_SUPPORT || GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_activeCues), "activeCues") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_activeElement), "activeElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_addEventListener), "addEventListener") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_address), "address") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_addressBookItemId), "addressBookItemId") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alarmDate), "alarmDate") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alarmed), "alarmed") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_align), "align") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alignContent), "alignContent") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alignItems), "alignItems") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alignSelf), "alignSelf") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alignmentBaseline), "alignmentBaseline") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alinkColor), "alinkColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_all), "all") == 0);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_allFeeds), "allFeeds") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined EXTENSION_SUPPORT && defined URL_FILTER
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_allow), "allow") == 0);
#endif // EXTENSION_SUPPORT && URL_FILTER
#ifdef CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alpha), "alpha") == 0);
#endif // CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alt), "alt") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_altKey), "altKey") == 0);
#ifdef UPNP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_alternateURL), "alternateURL") == 0);
#endif // UPNP_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_altitude), "altitude") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_altitudeAccuracy), "altitudeAccuracy") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_amplitude), "amplitude") == 0);
#endif // SVG_DOM
#ifdef DOM_SELECTION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_anchorNode), "anchorNode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_anchorOffset), "anchorOffset") == 0);
#endif // DOM_SELECTION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_anchors), "anchors") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_angle), "angle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animVal), "animVal") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animatedInstanceRoot), "animatedInstanceRoot") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animatedNormalizedPathSegList), "animatedNormalizedPathSegList") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animatedPathSegList), "animatedPathSegList") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animatedPoints), "animatedPoints") == 0);
#endif // SVG_DOM
#ifdef CSS_ANIMATIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animation), "animation") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animationDelay), "animationDelay") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animationDirection), "animationDirection") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animationDuration), "animationDuration") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animationFillMode), "animationFillMode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animationIterationCount), "animationIterationCount") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animationName), "animationName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animationPlayState), "animationPlayState") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_animationTimingFunction), "animationTimingFunction") == 0);
#endif // CSS_ANIMATIONS
#ifdef CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_antialias), "antialias") == 0);
#endif // CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_appCodeName), "appCodeName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_appMinorVersion), "appMinorVersion") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_appName), "appName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_appVersion), "appVersion") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_applets), "applets") == 0);
#if defined APPLICATION_CACHE_SUPPORT || defined DOM_WEBWORKERS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_applicationCache), "applicationCache") == 0);
#endif // APPLICATION_CACHE_SUPPORT || DOM_WEBWORKERS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_archive), "archive") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_areas), "areas") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_async), "async") == 0);
#ifdef INTEGRATED_DEVTOOLS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_attached), "attached") == 0);
#endif // INTEGRATED_DEVTOOLS_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_attachments), "attachments") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM2_MUTATION_EVENTS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_attrChange), "attrChange") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_attrName), "attrName") == 0);
#endif // DOM2_MUTATION_EVENTS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_attributes), "attributes") == 0);
#if defined SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_audioLevel), "audioLevel") == 0);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_audioPath), "audioPath") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef OPERA_AUTH_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_authState), "authState") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_authStatus), "authStatus") == 0);
#endif // OPERA_AUTH_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_authentication), "authentication") == 0);
#endif // WEBSERVER_SUPPORT
#if defined WEBFEEDS_BACKEND_SUPPORT || defined WEBSERVER_SUPPORT || defined GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_author), "author") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT || WEBSERVER_SUPPORT || GADGET_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_authorEmail), "authorEmail") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_authorHref), "authorHref") == 0);
#endif // GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_autocomplete), "autocomplete") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_autofocus), "autofocus") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_autoplay), "autoplay") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_availHeight), "availHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_availWidth), "availWidth") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_availableMemory), "availableMemory") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_axis), "axis") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_azimuth), "azimuth") == 0);
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_b), "b") == 0);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backLightOn), "backLightOn") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_background), "background") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backgroundAttachment), "backgroundAttachment") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backgroundClip), "backgroundClip") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backgroundColor), "backgroundColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backgroundImage), "backgroundImage") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backgroundOrigin), "backgroundOrigin") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backgroundPosition), "backgroundPosition") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backgroundRepeat), "backgroundRepeat") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_backgroundSize), "backgroundSize") == 0);
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_badge), "badge") == 0);
#endif // EXTENSION_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_baseFrequencyX), "baseFrequencyX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_baseFrequencyY), "baseFrequencyY") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_baseURI), "baseURI") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_baseVal), "baseVal") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_baselineShift), "baselineShift") == 0);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bccAddress), "bccAddress") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_behavior), "behavior") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bgColor), "bgColor") == 0);
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bgProcess), "bgProcess") == 0);
#endif // EXTENSION_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bias), "bias") == 0);
#endif // SVG_DOM
#ifdef WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_binaryType), "binaryType") == 0);
#endif // WEBSOCKETS_SUPPORT
#if defined EXTENSION_SUPPORT && defined URL_FILTER
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_block), "block") == 0);
#endif // EXTENSION_SUPPORT && URL_FILTER
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_blue), "blue") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_blur), "blur") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_body), "body") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bodyItems), "bodyItems") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_booleanValue), "booleanValue") == 0);
#endif // DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_border), "border") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderBottom), "borderBottom") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderBottomColor), "borderBottomColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderBottomLeftRadius), "borderBottomLeftRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderBottomRightRadius), "borderBottomRightRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderBottomStyle), "borderBottomStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderBottomWidth), "borderBottomWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderCollapse), "borderCollapse") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderColor), "borderColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderLeft), "borderLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderLeftColor), "borderLeftColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderLeftStyle), "borderLeftStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderLeftWidth), "borderLeftWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderRadius), "borderRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderRight), "borderRight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderRightColor), "borderRightColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderRightStyle), "borderRightStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderRightWidth), "borderRightWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderSpacing), "borderSpacing") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderStyle), "borderStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderTop), "borderTop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderTopColor), "borderTopColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderTopLeftRadius), "borderTopLeftRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderTopRightRadius), "borderTopRightRadius") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderTopStyle), "borderTopStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderTopWidth), "borderTopWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_borderWidth), "borderWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bottom), "bottom") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_boxDecorationBreak), "boxDecorationBreak") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_boxShadow), "boxShadow") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_boxSizing), "boxSizing") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_breakAfter), "breakAfter") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_breakBefore), "breakBefore") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_breakInside), "breakInside") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_browserLanguage), "browserLanguage") == 0);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_browserWindow), "browserWindow") == 0);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bubbles), "bubbles") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_buffered), "buffered") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bufferedAmount), "bufferedAmount") == 0);
#endif // WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bufferedRendering), "bufferedRendering") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_busy), "busy") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_button), "button") == 0);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_bytesAvailable), "bytesAvailable") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_c), "c") == 0);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_calendarItemId), "calendarItemId") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_callRecordAddress), "callRecordAddress") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_callRecordId), "callRecordId") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_callRecordName), "callRecordName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_callRecordType), "callRecordType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_callbackNumber), "callbackNumber") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cancelBubble), "cancelBubble") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cancelable), "cancelable") == 0);
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_canvas), "canvas") == 0);
#endif // CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_caption), "caption") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_captionSide), "captionSide") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ccAddress), "ccAddress") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cellIndex), "cellIndex") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cellPadding), "cellPadding") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cellSpacing), "cellSpacing") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cells), "cells") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ch), "ch") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_chOff), "chOff") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_challenge), "challenge") == 0);
#ifdef TOUCH_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_changedTouches), "changedTouches") == 0);
#endif // TOUCH_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_char), "char") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_charCode), "charCode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_characterSet), "characterSet") == 0);
#ifdef CSS_CHARACTER_TYPE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_characterType), "characterType") == 0);
#endif // CSS_CHARACTER_TYPE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_charset), "charset") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_checked), "checked") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_childElementCount), "childElementCount") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_childNodes), "childNodes") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_children), "children") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_chunked), "chunked") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cite), "cite") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_class), "class") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_classId), "classId") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_classList), "classList") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_className), "className") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clear), "clear") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clientHeight), "clientHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clientLeft), "clientLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clientTop), "clientTop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clientWidth), "clientWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clientX), "clientX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clientY), "clientY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clip), "clip") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clipPath), "clipPath") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clipPathUnits), "clipPathUnits") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clipRule), "clipRule") == 0);
#endif // SVG_DOM
#ifdef USE_OP_CLIPBOARD
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clipboardData), "clipboardData") == 0);
#endif // USE_OP_CLIPBOARD
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_clipboardString), "clipboardString") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_close), "close") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_closed), "closed") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_code), "code") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_codeBase), "codeBase") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_codeType), "codeType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_colSpan), "colSpan") == 0);
#ifdef DOM2_RANGE
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_collapsed), "collapsed") == 0);
#endif // DOM2_RANGE
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_color), "color") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_colorDepth), "colorDepth") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_colorInterpolation), "colorInterpolation") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_colorInterpolationFilters), "colorInterpolationFilters") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_colorProfile), "colorProfile") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_colorRendering), "colorRendering") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cols), "cols") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnCount), "columnCount") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnFill), "columnFill") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnGap), "columnGap") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnRule), "columnRule") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnRuleColor), "columnRuleColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnRuleStyle), "columnRuleStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnRuleWidth), "columnRuleWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnSpan), "columnSpan") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columnWidth), "columnWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_columns), "columns") == 0);
#ifdef DOM2_RANGE
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_commonAncestorContainer), "commonAncestorContainer") == 0);
#endif // DOM2_RANGE
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_compact), "compact") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_company), "company") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_compatMode), "compatMode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_complete), "complete") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_connection), "connection") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_content), "content") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_contentDocument), "contentDocument") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_contentEditable), "contentEditable") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_contentScriptType), "contentScriptType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_contentStyleType), "contentStyleType") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_contentType), "contentType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_contentWindow), "contentWindow") == 0);
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_contexts), "contexts") == 0);
#endif // EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_control), "control") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_controls), "controls") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cookie), "cookie") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cookieEnabled), "cookieEnabled") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_coords), "coords") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_correspondingElement), "correspondingElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_correspondingUseElement), "correspondingUseElement") == 0);
#endif // SVG_DOM
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_count), "count") == 0);
#endif // GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_counterIncrement), "counterIncrement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_counterReset), "counterReset") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_createDate), "createDate") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_createDocumentFragment), "createDocumentFragment") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_createElement), "createElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_createEvent), "createEvent") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_createTextNode), "createTextNode") == 0);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_created), "created") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_crossOrigin), "crossOrigin") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cssFloat), "cssFloat") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cssRules), "cssRules") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cssText), "cssText") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ctrlKey), "ctrlKey") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cues), "cues") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_current), "current") == 0);
#ifdef SVG_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentFps), "currentFps") == 0);
#endif // SVG_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentIcon), "currentIcon") == 0);
#endif // GADGET_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentNode), "currentNode") == 0);
#endif // DOM2_TRAVERSAL
#ifdef PAGED_MEDIA_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentPage), "currentPage") == 0);
#endif // PAGED_MEDIA_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentRotate), "currentRotate") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentScale), "currentScale") == 0);
#endif // SVG_DOM
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentServiceName), "currentServiceName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentServicePath), "currentServicePath") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentSrc), "currentSrc") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef CURRENT_STYLE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentStyle), "currentStyle") == 0);
#endif // CURRENT_STYLE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentTarget), "currentTarget") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentTime), "currentTime") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_currentTranslate), "currentTranslate") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cursor), "cursor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_customError), "customError") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cx), "cx") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_cy), "cy") == 0);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_d), "d") == 0);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_data), "data") == 0);
#ifdef DRAG_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dataTransfer), "dataTransfer") == 0);
#endif // DRAG_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dataset), "dataset") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dateTime), "dateTime") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_declare), "declare") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_default), "default") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defaultChecked), "defaultChecked") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defaultMuted), "defaultMuted") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defaultPlaybackRate), "defaultPlaybackRate") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defaultPrevented), "defaultPrevented") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defaultSelected), "defaultSelected") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defaultStatus), "defaultStatus") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defaultValue), "defaultValue") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defaultView), "defaultView") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_defer), "defer") == 0);
#ifdef CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_depth), "depth") == 0);
#endif // CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_description), "description") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_designMode), "designMode") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_destinationAddress), "destinationAddress") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_detail), "detail") == 0);
#if defined UPNP_SUPPORT || (defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL)
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_device), "device") == 0);
#endif // UPNP_SUPPORT || GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_deviceName), "deviceName") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_devicePixelRatio), "devicePixelRatio") == 0);
#ifdef ABOUT_HTML_DIALOGS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dialogArguments), "dialogArguments") == 0);
#endif // ABOUT_HTML_DIALOGS
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_diffuseConstant), "diffuseConstant") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dir), "dir") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dirName), "dirName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_direction), "direction") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_disabled), "disabled") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dispatchEvent), "dispatchEvent") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_display), "display") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_displayAlign), "displayAlign") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_divisor), "divisor") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_doNotTrack), "doNotTrack") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_doctype), "doctype") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_document), "document") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_documentElement), "documentElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_documentURI), "documentURI") == 0);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_documentURL), "documentURL") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_documentURLPatterns), "documentURLPatterns") == 0);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_domConfig), "domConfig") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_domain), "domain") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dominantBaseline), "dominantBaseline") == 0);
#endif // SVG_DOM
#ifdef DRAG_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_draggable), "draggable") == 0);
#endif // DRAG_SUPPORT
#ifdef CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_drawingBufferHeight), "drawingBufferHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_drawingBufferWidth), "drawingBufferWidth") == 0);
#endif // CANVAS3D_SUPPORT
#ifdef DRAG_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dropEffect), "dropEffect") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dropzone), "dropzone") == 0);
#endif // DRAG_SUPPORT
#ifdef DOM_DSE_DEBUGGING
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dseEnabled), "dseEnabled") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dseRecovered), "dseRecovered") == 0);
#endif // DOM_DSE_DEBUGGING
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_duration), "duration") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_durationSeconds), "durationSeconds") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dx), "dx") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_dy), "dy") == 0);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_e), "e") == 0);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eMail), "eMail") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_edgeMode), "edgeMode") == 0);
#endif // SVG_DOM
#ifdef DRAG_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_effectAllowed), "effectAllowed") == 0);
#endif // DRAG_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_elapsedTime), "elapsedTime") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_element), "element") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_elements), "elements") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_elevation), "elevation") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_embeds), "embeds") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_emptyCells), "emptyCells") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_enableBackground), "enableBackground") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_enabledPlugin), "enabledPlugin") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_encoding), "encoding") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_enctype), "enctype") == 0);
#ifdef DOM2_RANGE
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_endContainer), "endContainer") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_endOffset), "endOffset") == 0);
#endif // DOM2_RANGE
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_endTime), "endTime") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ended), "ended") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_entities), "entities") == 0);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_entries), "entries") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined WEBSERVER_SUPPORT || defined DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eof), "eof") == 0);
#endif // WEBSERVER_SUPPORT || DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_error), "error") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_event), "event") == 0);
#ifdef USER_JAVASCRIPT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eventCancelled), "eventCancelled") == 0);
#endif // USER_JAVASCRIPT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eventEndTime), "eventEndTime") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eventName), "eventName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eventNotes), "eventNotes") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eventPhase), "eventPhase") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eventRecurrence), "eventRecurrence") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_eventStartTime), "eventStartTime") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_exists), "exists") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_expandEntityReferences), "expandEntityReferences") == 0);
#endif // DOM2_TRAVERSAL
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_exponent), "exponent") == 0);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_extension), "extension") == 0);
#endif // EXTENSION_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_extensions), "extensions") == 0);
#endif // WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_externalResourcesRequired), "externalResourcesRequired") == 0);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_f), "f") == 0);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_face), "face") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_farthestViewportElement), "farthestViewportElement") == 0);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_favicon), "favicon") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_faviconUrl), "faviconUrl") == 0);
#endif // EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fgColor), "fgColor") == 0);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fileInstance), "fileInstance") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fileName), "fileName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_filePath), "filePath") == 0);
#endif // DOM_JIL_API_SUPPORT
#if defined DOM_GADGET_FILE_API_SUPPORT || defined DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fileSize), "fileSize") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT || DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_filename), "filename") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_files), "files") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fill), "fill") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fillOpacity), "fillOpacity") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fillRule), "fillRule") == 0);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fillStyle), "fillStyle") == 0);
#endif // CANVAS_SUPPORT
#if defined DOM2_TRAVERSAL || defined DOM3_LOAD || defined DOM3_SAVE || defined SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_filter), "filter") == 0);
#endif // DOM2_TRAVERSAL || DOM3_LOAD || DOM3_SAVE || SVG_DOM
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_filterResX), "filterResX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_filterResY), "filterResY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_filterUnits), "filterUnits") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_firstChild), "firstChild") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_firstElementChild), "firstElementChild") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_flex), "flex") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_flexBasis), "flexBasis") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_flexDirection), "flexDirection") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_flexFlow), "flexFlow") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_flexGrow), "flexGrow") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_flexShrink), "flexShrink") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_flexWrap), "flexWrap") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_floodColor), "floodColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_floodOpacity), "floodOpacity") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_focus), "focus") == 0);
#ifdef DOM_SELECTION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_focusNode), "focusNode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_focusOffset), "focusOffset") == 0);
#endif // DOM_SELECTION_SUPPORT
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_focused), "focused") == 0);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_font), "font") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fontFamily), "fontFamily") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fontSize), "fontSize") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fontSizeAdjust), "fontSizeAdjust") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fontStretch), "fontStretch") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fontStyle), "fontStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fontVariant), "fontVariant") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fontWeight), "fontWeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_for), "for") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_form), "form") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_formAction), "formAction") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_formEnctype), "formEnctype") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_formMethod), "formMethod") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_formNoValidate), "formNoValidate") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_formTarget), "formTarget") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_forms), "forms") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_frame), "frame") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_frameBorder), "frameBorder") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_frameElement), "frameElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_frames), "frames") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fromElement), "fromElement") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fullName), "fullName") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_FULLSCREEN_MODE
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fullscreenElement), "fullscreenElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fullscreenEnabled), "fullscreenEnabled") == 0);
#endif // DOM_FULLSCREEN_MODE
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fx), "fx") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_fy), "fy") == 0);
#endif // SVG_DOM
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_geolocation), "geolocation") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_getElementById), "getElementById") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_getElementsByClassName), "getElementsByClassName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_getElementsByTagName), "getElementsByTagName") == 0);
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_globalAlpha), "globalAlpha") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_globalCompositeOperation), "globalCompositeOperation") == 0);
#endif // CANVAS_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_glyphOrientationHorizontal), "glyphOrientationHorizontal") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_glyphOrientationVertical), "glyphOrientationVertical") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_gradientTransform), "gradientTransform") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_gradientUnits), "gradientUnits") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_green), "green") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_hash), "hash") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_head), "head") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_headers), "headers") == 0);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_heading), "heading") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_height), "height") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_hidden), "hidden") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_high), "high") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_history), "history") == 0);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_hits), "hits") == 0);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_home), "home") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_homePhone), "homePhone") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_host), "host") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_hostName), "hostName") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_hostname), "hostname") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_href), "href") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_hreflang), "hreflang") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_hspace), "hspace") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_htmlFor), "htmlFor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_httpEquiv), "httpEquiv") == 0);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_icon), "icon") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_icons), "icons") == 0);
#endif // GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_id), "id") == 0);
#if defined GADGET_SUPPORT || defined TOUCH_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_identifier), "identifier") == 0);
#endif // GADGET_SUPPORT || TOUCH_EVENTS_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_imageRendering), "imageRendering") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_images), "images") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_implementation), "implementation") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_implicitFlush), "implicitFlush") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_in1), "in1") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_in2), "in2") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_indeterminate), "indeterminate") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_index), "index") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_innerHTML), "innerHTML") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_innerHeight), "innerHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_innerText), "innerText") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_innerWidth), "innerWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_input), "input") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_inputFormat), "inputFormat") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_inputMethod), "inputMethod") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_inputmode), "inputmode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_insertAdjacentHTML), "insertAdjacentHTML") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_insertAdjacentText), "insertAdjacentText") == 0);
#ifdef DATABASE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_insertId), "insertId") == 0);
#endif // DATABASE_STORAGE_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_instanceRoot), "instanceRoot") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_intercept), "intercept") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_internalSubset), "internalSubset") == 0);
#ifdef DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_invalidIteratorState), "invalidIteratorState") == 0);
#endif // DOM3_XPATH
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ip), "ip") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isArchive), "isArchive") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isAudioPlaying), "isAudioPlaying") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isBinary), "isBinary") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isCharging), "isCharging") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_SELECTION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isCollapsed), "isCollapsed") == 0);
#endif // DOM_SELECTION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isContentEditable), "isContentEditable") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isDataNetworkConnected), "isDataNetworkConnected") == 0);
#endif // DOM_JIL_API_SUPPORT
#if defined DOM_GADGET_FILE_API_SUPPORT || defined DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isDirectory), "isDirectory") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT || DOM_JIL_API_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isEditable), "isEditable") == 0);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isElementContentWhitespace), "isElementContentWhitespace") == 0);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isFile), "isFile") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isHidden), "isHidden") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isLocal), "isLocal") == 0);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isMap), "isMap") == 0);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isMarkup), "isMarkup") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isOwner), "isOwner") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isPaused), "isPaused") == 0);
#endif // SVG_DOM
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isPlainText), "isPlainText") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isProxied), "isProxied") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isRadioEnabled), "isRadioEnabled") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isRead), "isRead") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isRoaming), "isRoaming") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isSubscribed), "isSubscribed") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isTrusted), "isTrusted") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_isVideoPlaying), "isVideoPlaying") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_item), "item") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_itemId), "itemId") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_itemProp), "itemProp") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_itemRef), "itemRef") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_itemScope), "itemScope") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_itemType), "itemType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_itemValue), "itemValue") == 0);
#if defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_items), "items") == 0);
#endif // DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_justifyContent), "justifyContent") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_k1), "k1") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_k2), "k2") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_k3), "k3") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_k4), "k4") == 0);
#endif // SVG_DOM
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_keep), "keep") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_kernelMatrix), "kernelMatrix") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_kernelUnitLengthX), "kernelUnitLengthX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_kernelUnitLengthY), "kernelUnitLengthY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_kerning), "kerning") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_key), "key") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_keyCode), "keyCode") == 0);
#ifdef CSS_ANIMATIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_keyText), "keyText") == 0);
#endif // CSS_ANIMATIONS
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_keypadLightOn), "keypadLightOn") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_keytype), "keytype") == 0);
#if defined MEDIA_HTML_SUPPORT || defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_kind), "kind") == 0);
#endif // MEDIA_HTML_SUPPORT || DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_label), "label") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_labels), "labels") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lang), "lang") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_language), "language") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_largeArcFlag), "largeArcFlag") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lastChild), "lastChild") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lastElementChild), "lastElementChild") == 0);
#if defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lastEventId), "lastEventId") == 0);
#endif // DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lastModified), "lastModified") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lastModifiedDate), "lastModifiedDate") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lastModifyDate), "lastModifyDate") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lastPosition), "lastPosition") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lastUpdate), "lastUpdate") == 0);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_latitude), "latitude") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_left), "left") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_length), "length") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lengthAdjust), "lengthAdjust") == 0);
#endif // SVG_DOM
#ifdef PROGRESS_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lengthComputable), "lengthComputable") == 0);
#endif // PROGRESS_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_letterSpacing), "letterSpacing") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lightingColor), "lightingColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_limitingConeAngle), "limitingConeAngle") == 0);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_line), "line") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lineCap), "lineCap") == 0);
#endif // CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lineHeight), "lineHeight") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lineIncrement), "lineIncrement") == 0);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lineJoin), "lineJoin") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lineWidth), "lineWidth") == 0);
#endif // CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lineno), "lineno") == 0);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lines), "lines") == 0);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_link), "link") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_linkColor), "linkColor") == 0);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_linkURL), "linkURL") == 0);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_links), "links") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_list), "list") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_listStyle), "listStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_listStyleImage), "listStyleImage") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_listStylePosition), "listStylePosition") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_listStyleType), "listStyleType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_listener), "listener") == 0);
#ifdef PROGRESS_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_loaded), "loaded") == 0);
#endif // PROGRESS_EVENTS_SUPPORT
#if defined USE_SPDY && defined DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_loadedWithSPDY), "loadedWithSPDY") == 0);
#endif // USE_SPDY && DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_localName), "localName") == 0);
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_localStorage), "localStorage") == 0);
#endif // CLIENTSIDE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_locale), "locale") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_location), "location") == 0);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_locked), "locked") == 0);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_logo), "logo") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_longDesc), "longDesc") == 0);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_longitude), "longitude") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_loop), "loop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_low), "low") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_lowsrc), "lowsrc") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_margin), "margin") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_marginBottom), "marginBottom") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_marginHeight), "marginHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_marginLeft), "marginLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_marginRight), "marginRight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_marginTop), "marginTop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_marginWidth), "marginWidth") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_marker), "marker") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_markerEnd), "markerEnd") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_markerHeight), "markerHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_markerMid), "markerMid") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_markerOffset), "markerOffset") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_markerStart), "markerStart") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_markerUnits), "markerUnits") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_markerWidth), "markerWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_mask), "mask") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maskContentUnits), "maskContentUnits") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maskUnits), "maskUnits") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_matches), "matches") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_matrix), "matrix") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_max), "max") == 0);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxAge), "maxAge") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxEntries), "maxEntries") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxHeight), "maxHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxLength), "maxLength") == 0);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxPathLength), "maxPathLength") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxSize), "maxSize") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined UPNP_SUPPORT || (defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL)
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxUploadRate), "maxUploadRate") == 0);
#endif // UPNP_SUPPORT || GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxWidth), "maxWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_maxZoom), "maxZoom") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_media), "media") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_mediaText), "mediaText") == 0);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_mediaType), "mediaType") == 0);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_meetOrSlice), "meetOrSlice") == 0);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_menu), "menu") == 0);
#endif // EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_menubar), "menubar") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_message), "message") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_messageId), "messageId") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_messagePriority), "messagePriority") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_messageType), "messageType") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_metaData), "metaData") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_metaKey), "metaKey") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_method), "method") == 0);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_millisecondsSelf), "millisecondsSelf") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_millisecondsTotal), "millisecondsTotal") == 0);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_mimeTypes), "mimeTypes") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_min), "min") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_minHeight), "minHeight") == 0);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_minUpdateInterval), "minUpdateInterval") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_minWidth), "minWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_minZoom), "minZoom") == 0);
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_miterLimit), "miterLimit") == 0);
#endif // CANVAS_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_mobilePhone), "mobilePhone") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_mode), "mode") == 0);
#endif // SVG_DOM
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_modified), "modified") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_mountPoints), "mountPoints") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_moveBy), "moveBy") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_moveTo), "moveTo") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_msgRingtoneVolume), "msgRingtoneVolume") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_multiple), "multiple") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_muted), "muted") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_name), "name") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_namedItem), "namedItem") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_names), "names") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_namespaceURI), "namespaceURI") == 0);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_nativePath), "nativePath") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_naturalHeight), "naturalHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_naturalWidth), "naturalWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_navDown), "navDown") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_navIndex), "navIndex") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_navLeft), "navLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_navRight), "navRight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_navUp), "navUp") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_navigationMode), "navigationMode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_navigator), "navigator") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_nearestViewportElement), "nearestViewportElement") == 0);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_networkConnectionType), "networkConnectionType") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_networkState), "networkState") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM3_LOAD
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_newDocument), "newDocument") == 0);
#endif // DOM3_LOAD
#if defined DOM3_SAVE || defined DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_newLine), "newLine") == 0);
#endif // DOM3_SAVE || DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_newURL), "newURL") == 0);
#if defined DOM2_MUTATION_EVENTS || defined CLIENTSIDE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_newValue), "newValue") == 0);
#endif // DOM2_MUTATION_EVENTS || CLIENTSIDE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_next), "next") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_nextElementSibling), "nextElementSibling") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_nextSibling), "nextSibling") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_noHref), "noHref") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_noResize), "noResize") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_noShade), "noShade") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_noValidate), "noValidate") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_noWrap), "noWrap") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_nodeName), "nodeName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_nodeType), "nodeType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_nodeValue), "nodeValue") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_normalizedPathSegList), "normalizedPathSegList") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_notationName), "notationName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_notations), "notations") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_numOctaves), "numOctaves") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_numberOfItems), "numberOfItems") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_numberOfSegments), "numberOfSegments") == 0);
#endif // SVG_DOM
#ifdef DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_numberValue), "numberValue") == 0);
#endif // DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_object), "object") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_offset), "offset") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_offsetHeight), "offsetHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_offsetLeft), "offsetLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_offsetParent), "offsetParent") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_offsetTop), "offsetTop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_offsetWidth), "offsetWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_offsetX), "offsetX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_offsetY), "offsetY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_oldURL), "oldURL") == 0);
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_oldValue), "oldValue") == 0);
#endif // CLIENTSIDE_STORAGE_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onAddressBookItemsFound), "onAddressBookItemsFound") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onCalendarItemAlert), "onCalendarItemAlert") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onCalendarItemsFound), "onCalendarItemsFound") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onCallEvent), "onCallEvent") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onCallRecordsFound), "onCallRecordsFound") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onCameraCaptured), "onCameraCaptured") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onChargeLevelChange), "onChargeLevelChange") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onChargeStateChange), "onChargeStateChange") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onFilesFound), "onFilesFound") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onFocus), "onFocus") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onLine), "onLine") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onLowBattery), "onLowBattery") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onMaximize), "onMaximize") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onMessageArrived), "onMessageArrived") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onMessageSendingFailure), "onMessageSendingFailure") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onMessagesFound), "onMessagesFound") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onNetworkConnectionChanged), "onNetworkConnectionChanged") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onPositionRetrieved), "onPositionRetrieved") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onRestore), "onRestore") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onScreenChangeDimensions), "onScreenChangeDimensions") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onSignalSourceChange), "onSignalSourceChange") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onStateChange), "onStateChange") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onVCardExportingFinish), "onVCardExportingFinish") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onWakeup), "onWakeup") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onaddtrack), "onaddtrack") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onafterupdate), "onafterupdate") == 0);
#endif // GADGET_SUPPORT
#ifdef OPERA_AUTH_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onauthenticationchange), "onauthenticationchange") == 0);
#endif // OPERA_AUTH_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onbeforeupdate), "onbeforeupdate") == 0);
#endif // GADGET_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onclose), "onclose") == 0);
#endif // WEBSOCKETS_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onconnect), "onconnect") == 0);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_oncreate), "oncreate") == 0);
#endif // EXTENSION_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_oncuechange), "oncuechange") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ondisconnect), "ondisconnect") == 0);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ondragstart), "ondragstart") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ondragstop), "ondragstop") == 0);
#endif // GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onenter), "onenter") == 0);
#endif // MEDIA_HTML_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onerror), "onerror") == 0);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onexit), "onexit") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onfocus), "onfocus") == 0);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onhide), "onhide") == 0);
#endif // GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onload), "onload") == 0);
#endif // MEDIA_HTML_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onmessage), "onmessage") == 0);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onmove), "onmove") == 0);
#endif // EXTENSION_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onopen), "onopen") == 0);
#endif // WEBSOCKETS_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onrangechange), "onrangechange") == 0);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onrefresh), "onrefresh") == 0);
#endif // GADGET_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onremove), "onremove") == 0);
#endif // EXTENSION_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onremovetrack), "onremovetrack") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onshow), "onshow") == 0);
#endif // GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onthread), "onthread") == 0);
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onupdate), "onupdate") == 0);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_onviewstatechanged), "onviewstatechanged") == 0);
#endif // GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_opacity), "opacity") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_opener), "opener") == 0);
#ifdef CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_operationType), "operationType") == 0);
#endif // CSS_TRANSFORMS
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_operator), "operator") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_optimum), "optimum") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_options), "options") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_order), "order") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_orderX), "orderX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_orderY), "orderY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_orientAngle), "orientAngle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_orientType), "orientType") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_orientation), "orientation") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_origin), "origin") == 0);
#if defined(GADGET_SUPPORT) || defined(WEBSERVER_SUPPORT)
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_originURL), "originURL") == 0);
#endif // GADGET_SUPPORT || WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_orphans), "orphans") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outerHTML), "outerHTML") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outerHeight), "outerHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outerText), "outerText") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outerWidth), "outerWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outline), "outline") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outlineColor), "outlineColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outlineOffset), "outlineOffset") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outlineStyle), "outlineStyle") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_outlineWidth), "outlineWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_output), "output") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_overflow), "overflow") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_overflowWrap), "overflowWrap") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_overflowX), "overflowX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_overflowY), "overflowY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ownerDocument), "ownerDocument") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ownerElement), "ownerElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ownerNode), "ownerNode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ownerRule), "ownerRule") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ownerSVGElement), "ownerSVGElement") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_padding), "padding") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_paddingBottom), "paddingBottom") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_paddingLeft), "paddingLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_paddingRight), "paddingRight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_paddingTop), "paddingTop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_page), "page") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageBreakAfter), "pageBreakAfter") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageBreakBefore), "pageBreakBefore") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageBreakInside), "pageBreakInside") == 0);
#ifdef PAGED_MEDIA_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageCount), "pageCount") == 0);
#endif // PAGED_MEDIA_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageURL), "pageURL") == 0);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageX), "pageX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageXOffset), "pageXOffset") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageY), "pageY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pageYOffset), "pageYOffset") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_paintType), "paintType") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_parameterNames), "parameterNames") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_parent), "parent") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_parentElement), "parentElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_parentNode), "parentNode") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_parentRule), "parentRule") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_parentStyleSheet), "parentStyleSheet") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_parentWindow), "parentWindow") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_passwordProtected), "passwordProtected") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_path), "path") == 0);
#endif // GADGET_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pathLength), "pathLength") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pathSegList), "pathSegList") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pathSegType), "pathSegType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pathSegTypeAsLetter), "pathSegTypeAsLetter") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pathname), "pathname") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pattern), "pattern") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_patternContentUnits), "patternContentUnits") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_patternMismatch), "patternMismatch") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_patternTransform), "patternTransform") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_patternUnits), "patternUnits") == 0);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pauseOnExit), "pauseOnExit") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_paused), "paused") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_percentRemaining), "percentRemaining") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneColorDepthDefault), "phoneColorDepthDefault") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneFirmware), "phoneFirmware") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneMSISDN), "phoneMSISDN") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneManufacturer), "phoneManufacturer") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneModel), "phoneModel") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneOS), "phoneOS") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneOperatorName), "phoneOperatorName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneScreenHeightDefault), "phoneScreenHeightDefault") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneScreenWidthDefault), "phoneScreenWidthDefault") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneSoftware), "phoneSoftware") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_phoneUserUniqueId), "phoneUserUniqueId") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelBottom), "pixelBottom") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelDepth), "pixelDepth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelHeight), "pixelHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelLeft), "pixelLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelRight), "pixelRight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelTop), "pixelTop") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelUnitToMillimeterX), "pixelUnitToMillimeterX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelUnitToMillimeterY), "pixelUnitToMillimeterY") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pixelWidth), "pixelWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_placeholder), "placeholder") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_platform), "platform") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_playbackRate), "playbackRate") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_played), "played") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_plugins), "plugins") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pointerEvents), "pointerEvents") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_points), "points") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pointsAtX), "pointsAtX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pointsAtY), "pointsAtY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pointsAtZ), "pointsAtZ") == 0);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_popup), "popup") == 0);
#endif // EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_port), "port") == 0);
#ifdef DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_port1), "port1") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_port2), "port2") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ports), "ports") == 0);
#endif // DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_posBottom), "posBottom") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_posHeight), "posHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_posLeft), "posLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_posRight), "posRight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_posTop), "posTop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_posWidth), "posWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_position), "position") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_poster), "poster") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_preferences), "preferences") == 0);
#endif // GADGET_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_prefetchPrimaryLink), "prefetchPrimaryLink") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_prefix), "prefix") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_preload), "preload") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_premultipliedAlpha), "premultipliedAlpha") == 0);
#endif // CANVAS3D_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_preserveAlpha), "preserveAlpha") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_preserveAspectRatio), "preserveAspectRatio") == 0);
#endif // SVG_DOM
#ifdef CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_preserveDrawingBuffer), "preserveDrawingBuffer") == 0);
#endif // CANVAS3D_SUPPORT
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_prevPosition), "prevPosition") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_prevTabGroup), "prevTabGroup") == 0);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef DOM2_MUTATION_EVENTS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_prevValue), "prevValue") == 0);
#endif // DOM2_MUTATION_EVENTS
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_prevWindow), "prevWindow") == 0);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_previous), "previous") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_previousElementSibling), "previousElementSibling") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_previousSibling), "previousSibling") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_primitiveUnits), "primitiveUnits") == 0);
#endif // SVG_DOM
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_private), "private") == 0);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_processorUtilizationPercent), "processorUtilizationPercent") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_prompt), "prompt") == 0);
#ifdef USER_JAVASCRIPT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_propagationStopped), "propagationStopped") == 0);
#endif // USER_JAVASCRIPT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_properties), "properties") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_propertyName), "propertyName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_protocol), "protocol") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_prototype), "prototype") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_proxyName), "proxyName") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_pubDate), "pubDate") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_publicIP), "publicIP") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_publicId), "publicId") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_publicPort), "publicPort") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_publicationDate), "publicationDate") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_queryItems), "queryItems") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_quotes), "quotes") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_r), "r") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_r1), "r1") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_r2), "r2") == 0);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_radioSignalSource), "radioSignalSource") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_radioSignalStrengthPercent), "radioSignalStrengthPercent") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_radiusX), "radiusX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_radiusY), "radiusY") == 0);
#endif // SVG_DOM
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_range), "range") == 0);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef DOM_SELECTION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rangeCount), "rangeCount") == 0);
#endif // DOM_SELECTION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rangeOverflow), "rangeOverflow") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rangeUnderflow), "rangeUnderflow") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_readOnly), "readOnly") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_readyState), "readyState") == 0);
#ifdef WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_reason), "reason") == 0);
#endif // WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_red), "red") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_refX), "refX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_refY), "refY") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_referrer), "referrer") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rel), "rel") == 0);
#ifdef DOM2_MUTATION_EVENTS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_relatedNode), "relatedNode") == 0);
#endif // DOM2_MUTATION_EVENTS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_relatedTarget), "relatedTarget") == 0);
#ifdef OPERA_AUTH_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rememberMe), "rememberMe") == 0);
#endif // OPERA_AUTH_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_renderingMode), "renderingMode") == 0);
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rendezvous), "rendezvous") == 0);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_repeat), "repeat") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_request), "request") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_required), "required") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_requiredExtensions), "requiredExtensions") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_requiredFeatures), "requiredFeatures") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_resize), "resize") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_resizeBy), "resizeBy") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_resizeTo), "resizeTo") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_response), "response") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_responseText), "responseText") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_responseType), "responseType") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_responseXML), "responseXML") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_result), "result") == 0);
#ifdef DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_resultType), "resultType") == 0);
#endif // DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_returnValue), "returnValue") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rev), "rev") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_reversed), "reversed") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rgbColor), "rgbColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_right), "right") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rightMargin), "rightMargin") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ringtoneVolume), "ringtoneVolume") == 0);
#endif // DOM_JIL_API_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_robotstxtEnabled), "robotstxtEnabled") == 0);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_root), "root") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rootElement), "rootElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rotate), "rotate") == 0);
#endif // SVG_DOM
#ifdef TOUCH_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rotation), "rotation") == 0);
#endif // TOUCH_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rowIndex), "rowIndex") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rowSpan), "rowSpan") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rows), "rows") == 0);
#ifdef DATABASE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rowsAffected), "rowsAffected") == 0);
#endif // DATABASE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rules), "rules") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_rx), "rx") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_ry), "ry") == 0);
#endif // SVG_DOM
#if defined(SVG_DOM) || defined(TOUCH_EVENTS_SUPPORT)
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scale), "scale") == 0);
#endif // SVG_DOM || TOUCH_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scheme), "scheme") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scope), "scope") == 0);
#ifdef SCOPE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scopeListenerAddress), "scopeListenerAddress") == 0);
#endif // SCOPE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_screen), "screen") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_screenLeft), "screenLeft") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_screenPixelToMillimeterX), "screenPixelToMillimeterX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_screenPixelToMillimeterY), "screenPixelToMillimeterY") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_screenTop), "screenTop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_screenX), "screenX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_screenY), "screenY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scripts), "scripts") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scroll), "scroll") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollAmount), "scrollAmount") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollBy), "scrollBy") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollDelay), "scrollDelay") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollHeight), "scrollHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollLeft), "scrollLeft") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollTo), "scrollTo") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollTop), "scrollTop") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollWidth), "scrollWidth") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollX), "scrollX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollY), "scrollY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollbar3dlightColor), "scrollbar3dlightColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollbarArrowColor), "scrollbarArrowColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollbarBaseColor), "scrollbarBaseColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollbarDarkshadowColor), "scrollbarDarkshadowColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollbarFaceColor), "scrollbarFaceColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollbarHighlightColor), "scrollbarHighlightColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollbarShadowColor), "scrollbarShadowColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrollbarTrackColor), "scrollbarTrackColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_scrolling), "scrolling") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_search), "search") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_sectionRowIndex), "sectionRowIndex") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_seed), "seed") == 0);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_seekable), "seekable") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_seeking), "seeking") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_selected), "selected") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_selectedIndex), "selectedIndex") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_selectedOptions), "selectedOptions") == 0);
#ifdef DOM_SELECTION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_selectionDirection), "selectionDirection") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_selectionEnd), "selectionEnd") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_selectionStart), "selectionStart") == 0);
#endif // DOM_SELECTION_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_selectionText), "selectionText") == 0);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_selectorText), "selectorText") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_self), "self") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_servicePath), "servicePath") == 0);
#endif // WEBSERVER_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_services), "services") == 0);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_session), "session") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_sessionStorage), "sessionStorage") == 0);
#endif // CLIENTSIDE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_setInterval), "setInterval") == 0);
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_shadowBlur), "shadowBlur") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_shadowColor), "shadowColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_shadowOffsetX), "shadowOffsetX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_shadowOffsetY), "shadowOffsetY") == 0);
#endif // CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_shape), "shape") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_shapeRendering), "shapeRendering") == 0);
#endif // SVG_DOM
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_sharedFolder), "sharedFolder") == 0);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_sheet), "sheet") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_shiftKey), "shiftKey") == 0);
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_shortName), "shortName") == 0);
#endif // GADGET_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_showImages), "showImages") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_singleNodeValue), "singleNodeValue") == 0);
#endif // DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_size), "size") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_slope), "slope") == 0);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_snapToLines), "snapToLines") == 0);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_snapshotLength), "snapshotLength") == 0);
#endif // DOM3_XPATH
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_solidColor), "solidColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_solidOpacity), "solidOpacity") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_source), "source") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_sourceAddress), "sourceAddress") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_spacing), "spacing") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_span), "span") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_speakNumeral), "speakNumeral") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_specified), "specified") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_specularConstant), "specularConstant") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_specularExponent), "specularExponent") == 0);
#endif // SVG_DOM
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_speed), "speed") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_speeddial), "speeddial") == 0);
#endif // EXTENSION_SUPPORT
#ifdef INTERNAL_SPELLCHECK_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_spellcheck), "spellcheck") == 0);
#endif // INTERNAL_SPELLCHECK_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_spreadMethod), "spreadMethod") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_src), "src") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_srcElement), "srcElement") == 0);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_srcURL), "srcURL") == 0);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_srclang), "srclang") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_standby), "standby") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_start), "start") == 0);
#ifdef DOM2_RANGE
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_startContainer), "startContainer") == 0);
#endif // DOM2_RANGE
#if defined(DOM2_RANGE) || defined(SVG_DOM)
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_startOffset), "startOffset") == 0);
#endif // DOM2_RANGE || SVG_DOM
#if defined(MEDIA_HTML_SUPPORT) || defined(DOM_JIL_API_SUPPORT)
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_startTime), "startTime") == 0);
#endif // MEDIA_HTML_SUPPORT || DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_state), "state") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_status), "status") == 0);
#ifdef DOM_HTTP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_statusText), "statusText") == 0);
#endif // DOM_HTTP_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stdDeviationX), "stdDeviationX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stdDeviationY), "stdDeviationY") == 0);
#endif // SVG_DOM
#ifdef CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stencil), "stencil") == 0);
#endif // CANVAS3D_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_step), "step") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stepMismatch), "stepMismatch") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stitchTiles), "stitchTiles") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stopColor), "stopColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stopOpacity), "stopOpacity") == 0);
#endif // SVG_DOM
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_storageArea), "storageArea") == 0);
#endif // CLIENTSIDE_STORAGE_SUPPORT
#ifdef SCOPE_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stpVersion), "stpVersion") == 0);
#endif // SCOPE_SUPPORT
#ifdef DOM3_XPATH
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stringValue), "stringValue") == 0);
#endif // DOM3_XPATH
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_stroke), "stroke") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_strokeDasharray), "strokeDasharray") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_strokeDashoffset), "strokeDashoffset") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_strokeLinecap), "strokeLinecap") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_strokeLinejoin), "strokeLinejoin") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_strokeMiterlimit), "strokeMiterlimit") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_strokeOpacity), "strokeOpacity") == 0);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_strokeStyle), "strokeStyle") == 0);
#endif // CANVAS_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_strokeWidth), "strokeWidth") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_style), "style") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_styleFloat), "styleFloat") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_styleSheet), "styleSheet") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_styleSheets), "styleSheets") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_subject), "subject") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_subscribedFeeds), "subscribedFeeds") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_suffixes), "suffixes") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_summary), "summary") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_surfaceScale), "surfaceScale") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_sweepFlag), "sweepFlag") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_systemId), "systemId") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_systemLanguage), "systemLanguage") == 0);
#endif // SVG_DOM
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_systemNewLine), "systemNewLine") == 0);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tBodies), "tBodies") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tFoot), "tFoot") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tHead), "tHead") == 0);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tab), "tab") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tabGroup), "tabGroup") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tabGroups), "tabGroups") == 0);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tabIndex), "tabIndex") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tableLayout), "tableLayout") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tableValues), "tableValues") == 0);
#endif // SVG_DOM
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tabs), "tabs") == 0);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tagName), "tagName") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_target), "target") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_targetElement), "targetElement") == 0);
#endif // SVG_DOM
#ifdef SVG_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_targetFps), "targetFps") == 0);
#endif // SVG_SUPPORT
#ifdef TOUCH_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_targetTouches), "targetTouches") == 0);
#endif // TOUCH_EVENTS_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_targetURLPatterns), "targetURLPatterns") == 0);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_targetX), "targetX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_targetY), "targetY") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_text), "text") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textAlign), "textAlign") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textAnchor), "textAnchor") == 0);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textBaseline), "textBaseline") == 0);
#endif // CANVAS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textContent), "textContent") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textDecoration), "textDecoration") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textIndent), "textIndent") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textLength), "textLength") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textOverflow), "textOverflow") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textRendering), "textRendering") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textShadow), "textShadow") == 0);
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textTracks), "textTracks") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_textTransform), "textTransform") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_time), "time") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_timeStamp), "timeStamp") == 0);
#ifdef DOM_HTTP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_timeout), "timeout") == 0);
#endif // DOM_HTTP_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_timestamp), "timestamp") == 0);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_title), "title") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_toElement), "toElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_tooLong), "tooLong") == 0);
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_toolbar), "toolbar") == 0);
#endif // EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_top), "top") == 0);
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_topWindow), "topWindow") == 0);
#endif // EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_total), "total") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_totalMemory), "totalMemory") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef TOUCH_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_touches), "touches") == 0);
#endif // TOUCH_EVENTS_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_track), "track") == 0);
#endif // MEDIA_HTML_SUPPORT
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_transform), "transform") == 0);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef CSS_TRANSFORMS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_transformOrigin), "transformOrigin") == 0);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_transition), "transition") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_transitionDelay), "transitionDelay") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_transitionDuration), "transitionDuration") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_transitionProperty), "transitionProperty") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_transitionTimingFunction), "transitionTimingFunction") == 0);
#endif // CSS_TRANSITIONS
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_type), "type") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_typeMismatch), "typeMismatch") == 0);
#if defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_types), "types") == 0);
#endif // DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_unicodeBidi), "unicodeBidi") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_unitType), "unitType") == 0);
#endif // SVG_DOM
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_uniteDeviceName), "uniteDeviceName") == 0);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef UPNP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_uniteServiceName), "uniteServiceName") == 0);
#endif // UPNP_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_uniteUser), "uniteUser") == 0);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_unread), "unread") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_unselectable), "unselectable") == 0);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_updateInterval), "updateInterval") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined DOM_HTTP_SUPPORT && defined PROGRESS_EVENTS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_upload), "upload") == 0);
#endif // DOM_HTTP_SUPPORT && PROGRESS_EVENTS_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_upnpDeviceIcon), "upnpDeviceIcon") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_upnpDevicePayload), "upnpDevicePayload") == 0);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_upnpEnabled), "upnpEnabled") == 0);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_uri), "uri") == 0);
#if defined CLIENTSIDE_STORAGE_SUPPORT || defined UPNP_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_url), "url") == 0);
#endif // CLIENTSIDE_STORAGE_SUPPORT || UPNP_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_useCurrentView), "useCurrentView") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_useMap), "useMap") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_userAccountBalance), "userAccountBalance") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_userAgent), "userAgent") == 0);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_userDefinedTitle), "userDefinedTitle") == 0);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_userLanguage), "userLanguage") == 0);
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_userName), "userName") == 0);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_userSubscriptionType), "userSubscriptionType") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_userZoom), "userZoom") == 0);
#ifdef OPERA_AUTH_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_username), "username") == 0);
#endif // OPERA_AUTH_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_users), "users") == 0);
#endif // WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_vAlign), "vAlign") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_vLink), "vLink") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_valid), "valid") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_validationMessage), "validationMessage") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_validity), "validity") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_validityPeriodHours), "validityPeriodHours") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_value), "value") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_valueAsDate), "valueAsDate") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_valueAsNumber), "valueAsNumber") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_valueAsString), "valueAsString") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_valueInSpecifiedUnits), "valueInSpecifiedUnits") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_valueMissing), "valueMissing") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_valueType), "valueType") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_values), "values") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_vectorEffect), "vectorEffect") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_version), "version") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_verticalAlign), "verticalAlign") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_vibrationSetting), "vibrationSetting") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_videoHeight), "videoHeight") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_videoWidth), "videoWidth") == 0);
#endif // MEDIA_HTML_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_view), "view") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_viewBox), "viewBox") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_viewport), "viewport") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_viewportElement), "viewportElement") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_viewportFill), "viewportFill") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_viewportFillOpacity), "viewportFillOpacity") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_visibility), "visibility") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_visibilityState), "visibilityState") == 0);
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_visibleToLocalNetwork), "visibleToLocalNetwork") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_visibleToSearchEngines), "visibleToSearchEngines") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_visibleToServiceDiscovery), "visibleToServiceDiscovery") == 0);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_vlinkColor), "vlinkColor") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_volume), "volume") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_vspace), "vspace") == 0);
#ifdef WEBSOCKETS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_wasClean), "wasClean") == 0);
#endif // WEBSOCKETS_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_whatToShow), "whatToShow") == 0);
#endif // DOM2_TRAVERSAL
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_wheelDelta), "wheelDelta") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_wheelDeltaX), "wheelDeltaX") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_wheelDeltaY), "wheelDeltaY") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_which), "which") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_whiteSpace), "whiteSpace") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_wholeText), "wholeText") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_widgetMode), "widgetMode") == 0);
#ifdef GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_widgets), "widgets") == 0);
#endif // GADGET_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_widows), "widows") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_width), "width") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_willValidate), "willValidate") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_window), "window") == 0);
#ifdef EXTENSION_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_windows), "windows") == 0);
#endif // EXTENSION_SUPPORT
#ifdef CORS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_withCredentials), "withCredentials") == 0);
#endif // CORS_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_wordSpacing), "wordSpacing") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_wordWrap), "wordWrap") == 0);
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_workPhone), "workPhone") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_wrap), "wrap") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_writingMode), "writingMode") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_x), "x") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_x1), "x1") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_x2), "x2") == 0);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_xAxis), "xAxis") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_xChannelSelector), "xChannelSelector") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_xmlbase), "xmlbase") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_xmlspace), "xmlspace") == 0);
#endif // SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_y), "y") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_y1), "y1") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_y2), "y2") == 0);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_yAxis), "yAxis") == 0);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_yChannelSelector), "yChannelSelector") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_z), "z") == 0);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_zAxis), "zAxis") == 0);
#endif // DOM_JIL_API_SUPPORT
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_zIndex), "zIndex") == 0);
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_zoom), "zoom") == 0);
#ifdef SVG_DOM
  verify(op_strcmp(DOM_AtomToString(OP_ATOM_zoomAndPan), "zoomAndPan") == 0);
#endif // SVG_DOM
}

test("String to atom conversion")
{
  verify(DOM_StringToAtom(UNI_L("aaaaaa")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("AppleDashboardRegion")) == OP_ATOM_AppleDashboardRegion);
  verify(DOM_StringToAtom(UNI_L("AppleDashboardRegionA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("MIMEType")) == OP_ATOM_MIMEType);
  verify(DOM_StringToAtom(UNI_L("MIMETypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("Multimedia")) == OP_ATOM_Multimedia);
  verify(DOM_StringToAtom(UNI_L("MultimediaA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("OBorderImage")) == OP_ATOM_OBorderImage);
  verify(DOM_StringToAtom(UNI_L("OBorderImageA")) == OP_ATOM_UNASSIGNED);
#ifdef CSS_MINI_EXTENSIONS
  verify(DOM_StringToAtom(UNI_L("OFocusOpacity")) == OP_ATOM_OFocusOpacity);
  verify(DOM_StringToAtom(UNI_L("OFocusOpacityA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_MINI_EXTENSIONS
  verify(DOM_StringToAtom(UNI_L("OLink")) == OP_ATOM_OLink);
  verify(DOM_StringToAtom(UNI_L("OLinkA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OLinkSource")) == OP_ATOM_OLinkSource);
  verify(DOM_StringToAtom(UNI_L("OLinkSourceA")) == OP_ATOM_UNASSIGNED);
#ifdef CSS_MINI_EXTENSIONS
  verify(DOM_StringToAtom(UNI_L("OMiniFold")) == OP_ATOM_OMiniFold);
  verify(DOM_StringToAtom(UNI_L("OMiniFoldA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_MINI_EXTENSIONS
  verify(DOM_StringToAtom(UNI_L("OObjectFit")) == OP_ATOM_OObjectFit);
  verify(DOM_StringToAtom(UNI_L("OObjectFitA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OObjectPosition")) == OP_ATOM_OObjectPosition);
  verify(DOM_StringToAtom(UNI_L("OObjectPositionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OTabSize")) == OP_ATOM_OTabSize);
  verify(DOM_StringToAtom(UNI_L("OTabSizeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OTableBaseline")) == OP_ATOM_OTableBaseline);
  verify(DOM_StringToAtom(UNI_L("OTableBaselineA")) == OP_ATOM_UNASSIGNED);
#ifdef CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("OTransform")) == OP_ATOM_OTransform);
  verify(DOM_StringToAtom(UNI_L("OTransformA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OTransformOrigin")) == OP_ATOM_OTransformOrigin);
  verify(DOM_StringToAtom(UNI_L("OTransformOriginA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(DOM_StringToAtom(UNI_L("OTransition")) == OP_ATOM_OTransition);
  verify(DOM_StringToAtom(UNI_L("OTransitionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OTransitionDelay")) == OP_ATOM_OTransitionDelay);
  verify(DOM_StringToAtom(UNI_L("OTransitionDelayA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OTransitionDuration")) == OP_ATOM_OTransitionDuration);
  verify(DOM_StringToAtom(UNI_L("OTransitionDurationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OTransitionProperty")) == OP_ATOM_OTransitionProperty);
  verify(DOM_StringToAtom(UNI_L("OTransitionPropertyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("OTransitionTimingFunction")) == OP_ATOM_OTransitionTimingFunction);
  verify(DOM_StringToAtom(UNI_L("OTransitionTimingFunctionA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_TRANSITIONS
  verify(DOM_StringToAtom(UNI_L("URL")) == OP_ATOM_URL);
  verify(DOM_StringToAtom(UNI_L("URLA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WapAccesskey")) == OP_ATOM_WapAccesskey);
  verify(DOM_StringToAtom(UNI_L("WapAccesskeyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WapInputFormat")) == OP_ATOM_WapInputFormat);
  verify(DOM_StringToAtom(UNI_L("WapInputFormatA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WapInputRequired")) == OP_ATOM_WapInputRequired);
  verify(DOM_StringToAtom(UNI_L("WapInputRequiredA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WapMarqueeDir")) == OP_ATOM_WapMarqueeDir);
  verify(DOM_StringToAtom(UNI_L("WapMarqueeDirA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WapMarqueeLoop")) == OP_ATOM_WapMarqueeLoop);
  verify(DOM_StringToAtom(UNI_L("WapMarqueeLoopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WapMarqueeSpeed")) == OP_ATOM_WapMarqueeSpeed);
  verify(DOM_StringToAtom(UNI_L("WapMarqueeSpeedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WapMarqueeStyle")) == OP_ATOM_WapMarqueeStyle);
  verify(DOM_StringToAtom(UNI_L("WapMarqueeStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBackgroundSize")) == OP_ATOM_WebkitBackgroundSize);
  verify(DOM_StringToAtom(UNI_L("WebkitBackgroundSizeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderBottomLeftRadius")) == OP_ATOM_WebkitBorderBottomLeftRadius);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderBottomLeftRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderBottomRightRadius")) == OP_ATOM_WebkitBorderBottomRightRadius);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderBottomRightRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderRadius")) == OP_ATOM_WebkitBorderRadius);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderTopLeftRadius")) == OP_ATOM_WebkitBorderTopLeftRadius);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderTopLeftRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderTopRightRadius")) == OP_ATOM_WebkitBorderTopRightRadius);
  verify(DOM_StringToAtom(UNI_L("WebkitBorderTopRightRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxAlign")) == OP_ATOM_WebkitBoxAlign);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxAlignA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxDirection")) == OP_ATOM_WebkitBoxDirection);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxDirectionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxFlex")) == OP_ATOM_WebkitBoxFlex);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxFlexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxLines")) == OP_ATOM_WebkitBoxLines);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxLinesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxOrdinalGroup")) == OP_ATOM_WebkitBoxOrdinalGroup);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxOrdinalGroupA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxOrient")) == OP_ATOM_WebkitBoxOrient);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxOrientA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxPack")) == OP_ATOM_WebkitBoxPack);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxPackA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxShadow")) == OP_ATOM_WebkitBoxShadow);
  verify(DOM_StringToAtom(UNI_L("WebkitBoxShadowA")) == OP_ATOM_UNASSIGNED);
#ifdef CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("WebkitTransform")) == OP_ATOM_WebkitTransform);
  verify(DOM_StringToAtom(UNI_L("WebkitTransformA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitTransformOrigin")) == OP_ATOM_WebkitTransformOrigin);
  verify(DOM_StringToAtom(UNI_L("WebkitTransformOriginA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(DOM_StringToAtom(UNI_L("WebkitTransition")) == OP_ATOM_WebkitTransition);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionDelay")) == OP_ATOM_WebkitTransitionDelay);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionDelayA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionDuration")) == OP_ATOM_WebkitTransitionDuration);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionDurationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionProperty")) == OP_ATOM_WebkitTransitionProperty);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionPropertyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionTimingFunction")) == OP_ATOM_WebkitTransitionTimingFunction);
  verify(DOM_StringToAtom(UNI_L("WebkitTransitionTimingFunctionA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_TRANSITIONS
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("a")) == OP_ATOM_a);
  verify(DOM_StringToAtom(UNI_L("aA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("aLink")) == OP_ATOM_aLink);
  verify(DOM_StringToAtom(UNI_L("aLinkA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("abbr")) == OP_ATOM_abbr);
  verify(DOM_StringToAtom(UNI_L("abbrA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("accept")) == OP_ATOM_accept);
  verify(DOM_StringToAtom(UNI_L("acceptA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("acceptCharset")) == OP_ATOM_acceptCharset);
  verify(DOM_StringToAtom(UNI_L("acceptCharsetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("accessKey")) == OP_ATOM_accessKey);
  verify(DOM_StringToAtom(UNI_L("accessKeyA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("accountId")) == OP_ATOM_accountId);
  verify(DOM_StringToAtom(UNI_L("accountIdA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("accountName")) == OP_ATOM_accountName);
  verify(DOM_StringToAtom(UNI_L("accountNameA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("accuracy")) == OP_ATOM_accuracy);
  verify(DOM_StringToAtom(UNI_L("accuracyA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("action")) == OP_ATOM_action);
  verify(DOM_StringToAtom(UNI_L("actionA")) == OP_ATOM_UNASSIGNED);
#if defined WEBSERVER_SUPPORT || defined GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("active")) == OP_ATOM_active);
  verify(DOM_StringToAtom(UNI_L("activeA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT || GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("activeCues")) == OP_ATOM_activeCues);
  verify(DOM_StringToAtom(UNI_L("activeCuesA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("activeElement")) == OP_ATOM_activeElement);
  verify(DOM_StringToAtom(UNI_L("activeElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("addEventListener")) == OP_ATOM_addEventListener);
  verify(DOM_StringToAtom(UNI_L("addEventListenerA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("address")) == OP_ATOM_address);
  verify(DOM_StringToAtom(UNI_L("addressA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("addressBookItemId")) == OP_ATOM_addressBookItemId);
  verify(DOM_StringToAtom(UNI_L("addressBookItemIdA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("alarmDate")) == OP_ATOM_alarmDate);
  verify(DOM_StringToAtom(UNI_L("alarmDateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("alarmed")) == OP_ATOM_alarmed);
  verify(DOM_StringToAtom(UNI_L("alarmedA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("align")) == OP_ATOM_align);
  verify(DOM_StringToAtom(UNI_L("alignA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("alignContent")) == OP_ATOM_alignContent);
  verify(DOM_StringToAtom(UNI_L("alignContentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("alignItems")) == OP_ATOM_alignItems);
  verify(DOM_StringToAtom(UNI_L("alignItemsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("alignSelf")) == OP_ATOM_alignSelf);
  verify(DOM_StringToAtom(UNI_L("alignSelfA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("alignmentBaseline")) == OP_ATOM_alignmentBaseline);
  verify(DOM_StringToAtom(UNI_L("alignmentBaselineA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("alinkColor")) == OP_ATOM_alinkColor);
  verify(DOM_StringToAtom(UNI_L("alinkColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("all")) == OP_ATOM_all);
  verify(DOM_StringToAtom(UNI_L("allA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("allFeeds")) == OP_ATOM_allFeeds);
  verify(DOM_StringToAtom(UNI_L("allFeedsA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined EXTENSION_SUPPORT && defined URL_FILTER
  verify(DOM_StringToAtom(UNI_L("allow")) == OP_ATOM_allow);
  verify(DOM_StringToAtom(UNI_L("allowA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT && URL_FILTER
#ifdef CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("alpha")) == OP_ATOM_alpha);
  verify(DOM_StringToAtom(UNI_L("alphaA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("alt")) == OP_ATOM_alt);
  verify(DOM_StringToAtom(UNI_L("altA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("altKey")) == OP_ATOM_altKey);
  verify(DOM_StringToAtom(UNI_L("altKeyA")) == OP_ATOM_UNASSIGNED);
#ifdef UPNP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("alternateURL")) == OP_ATOM_alternateURL);
  verify(DOM_StringToAtom(UNI_L("alternateURLA")) == OP_ATOM_UNASSIGNED);
#endif // UPNP_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("altitude")) == OP_ATOM_altitude);
  verify(DOM_StringToAtom(UNI_L("altitudeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("altitudeAccuracy")) == OP_ATOM_altitudeAccuracy);
  verify(DOM_StringToAtom(UNI_L("altitudeAccuracyA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("amplitude")) == OP_ATOM_amplitude);
  verify(DOM_StringToAtom(UNI_L("amplitudeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_SELECTION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("anchorNode")) == OP_ATOM_anchorNode);
  verify(DOM_StringToAtom(UNI_L("anchorNodeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("anchorOffset")) == OP_ATOM_anchorOffset);
  verify(DOM_StringToAtom(UNI_L("anchorOffsetA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_SELECTION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("anchors")) == OP_ATOM_anchors);
  verify(DOM_StringToAtom(UNI_L("anchorsA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("angle")) == OP_ATOM_angle);
  verify(DOM_StringToAtom(UNI_L("angleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animVal")) == OP_ATOM_animVal);
  verify(DOM_StringToAtom(UNI_L("animValA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animatedInstanceRoot")) == OP_ATOM_animatedInstanceRoot);
  verify(DOM_StringToAtom(UNI_L("animatedInstanceRootA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animatedNormalizedPathSegList")) == OP_ATOM_animatedNormalizedPathSegList);
  verify(DOM_StringToAtom(UNI_L("animatedNormalizedPathSegListA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animatedPathSegList")) == OP_ATOM_animatedPathSegList);
  verify(DOM_StringToAtom(UNI_L("animatedPathSegListA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animatedPoints")) == OP_ATOM_animatedPoints);
  verify(DOM_StringToAtom(UNI_L("animatedPointsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef CSS_ANIMATIONS
  verify(DOM_StringToAtom(UNI_L("animation")) == OP_ATOM_animation);
  verify(DOM_StringToAtom(UNI_L("animationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animationDelay")) == OP_ATOM_animationDelay);
  verify(DOM_StringToAtom(UNI_L("animationDelayA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animationDirection")) == OP_ATOM_animationDirection);
  verify(DOM_StringToAtom(UNI_L("animationDirectionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animationDuration")) == OP_ATOM_animationDuration);
  verify(DOM_StringToAtom(UNI_L("animationDurationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animationFillMode")) == OP_ATOM_animationFillMode);
  verify(DOM_StringToAtom(UNI_L("animationFillModeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animationIterationCount")) == OP_ATOM_animationIterationCount);
  verify(DOM_StringToAtom(UNI_L("animationIterationCountA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animationName")) == OP_ATOM_animationName);
  verify(DOM_StringToAtom(UNI_L("animationNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animationPlayState")) == OP_ATOM_animationPlayState);
  verify(DOM_StringToAtom(UNI_L("animationPlayStateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("animationTimingFunction")) == OP_ATOM_animationTimingFunction);
  verify(DOM_StringToAtom(UNI_L("animationTimingFunctionA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_ANIMATIONS
#ifdef CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("antialias")) == OP_ATOM_antialias);
  verify(DOM_StringToAtom(UNI_L("antialiasA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("appCodeName")) == OP_ATOM_appCodeName);
  verify(DOM_StringToAtom(UNI_L("appCodeNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("appMinorVersion")) == OP_ATOM_appMinorVersion);
  verify(DOM_StringToAtom(UNI_L("appMinorVersionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("appName")) == OP_ATOM_appName);
  verify(DOM_StringToAtom(UNI_L("appNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("appVersion")) == OP_ATOM_appVersion);
  verify(DOM_StringToAtom(UNI_L("appVersionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("applets")) == OP_ATOM_applets);
  verify(DOM_StringToAtom(UNI_L("appletsA")) == OP_ATOM_UNASSIGNED);
#if defined APPLICATION_CACHE_SUPPORT || defined DOM_WEBWORKERS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("applicationCache")) == OP_ATOM_applicationCache);
  verify(DOM_StringToAtom(UNI_L("applicationCacheA")) == OP_ATOM_UNASSIGNED);
#endif // APPLICATION_CACHE_SUPPORT || DOM_WEBWORKERS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("archive")) == OP_ATOM_archive);
  verify(DOM_StringToAtom(UNI_L("archiveA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("areas")) == OP_ATOM_areas);
  verify(DOM_StringToAtom(UNI_L("areasA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("async")) == OP_ATOM_async);
  verify(DOM_StringToAtom(UNI_L("asyncA")) == OP_ATOM_UNASSIGNED);
#ifdef INTEGRATED_DEVTOOLS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("attached")) == OP_ATOM_attached);
  verify(DOM_StringToAtom(UNI_L("attachedA")) == OP_ATOM_UNASSIGNED);
#endif // INTEGRATED_DEVTOOLS_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("attachments")) == OP_ATOM_attachments);
  verify(DOM_StringToAtom(UNI_L("attachmentsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM2_MUTATION_EVENTS
  verify(DOM_StringToAtom(UNI_L("attrChange")) == OP_ATOM_attrChange);
  verify(DOM_StringToAtom(UNI_L("attrChangeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("attrName")) == OP_ATOM_attrName);
  verify(DOM_StringToAtom(UNI_L("attrNameA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_MUTATION_EVENTS
  verify(DOM_StringToAtom(UNI_L("attributes")) == OP_ATOM_attributes);
  verify(DOM_StringToAtom(UNI_L("attributesA")) == OP_ATOM_UNASSIGNED);
#if defined SVG_DOM
  verify(DOM_StringToAtom(UNI_L("audioLevel")) == OP_ATOM_audioLevel);
  verify(DOM_StringToAtom(UNI_L("audioLevelA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("audioPath")) == OP_ATOM_audioPath);
  verify(DOM_StringToAtom(UNI_L("audioPathA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef OPERA_AUTH_SUPPORT
  verify(DOM_StringToAtom(UNI_L("authState")) == OP_ATOM_authState);
  verify(DOM_StringToAtom(UNI_L("authStateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("authStatus")) == OP_ATOM_authStatus);
  verify(DOM_StringToAtom(UNI_L("authStatusA")) == OP_ATOM_UNASSIGNED);
#endif // OPERA_AUTH_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("authentication")) == OP_ATOM_authentication);
  verify(DOM_StringToAtom(UNI_L("authenticationA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#if defined WEBFEEDS_BACKEND_SUPPORT || defined WEBSERVER_SUPPORT || defined GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("author")) == OP_ATOM_author);
  verify(DOM_StringToAtom(UNI_L("authorA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT || WEBSERVER_SUPPORT || GADGET_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("authorEmail")) == OP_ATOM_authorEmail);
  verify(DOM_StringToAtom(UNI_L("authorEmailA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("authorHref")) == OP_ATOM_authorHref);
  verify(DOM_StringToAtom(UNI_L("authorHrefA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("autocomplete")) == OP_ATOM_autocomplete);
  verify(DOM_StringToAtom(UNI_L("autocompleteA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("autofocus")) == OP_ATOM_autofocus);
  verify(DOM_StringToAtom(UNI_L("autofocusA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("autoplay")) == OP_ATOM_autoplay);
  verify(DOM_StringToAtom(UNI_L("autoplayA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("availHeight")) == OP_ATOM_availHeight);
  verify(DOM_StringToAtom(UNI_L("availHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("availWidth")) == OP_ATOM_availWidth);
  verify(DOM_StringToAtom(UNI_L("availWidthA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("availableMemory")) == OP_ATOM_availableMemory);
  verify(DOM_StringToAtom(UNI_L("availableMemoryA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("axis")) == OP_ATOM_axis);
  verify(DOM_StringToAtom(UNI_L("axisA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("azimuth")) == OP_ATOM_azimuth);
  verify(DOM_StringToAtom(UNI_L("azimuthA")) == OP_ATOM_UNASSIGNED);
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("b")) == OP_ATOM_b);
  verify(DOM_StringToAtom(UNI_L("bA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("backLightOn")) == OP_ATOM_backLightOn);
  verify(DOM_StringToAtom(UNI_L("backLightOnA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("background")) == OP_ATOM_background);
  verify(DOM_StringToAtom(UNI_L("backgroundA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("backgroundAttachment")) == OP_ATOM_backgroundAttachment);
  verify(DOM_StringToAtom(UNI_L("backgroundAttachmentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("backgroundClip")) == OP_ATOM_backgroundClip);
  verify(DOM_StringToAtom(UNI_L("backgroundClipA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("backgroundColor")) == OP_ATOM_backgroundColor);
  verify(DOM_StringToAtom(UNI_L("backgroundColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("backgroundImage")) == OP_ATOM_backgroundImage);
  verify(DOM_StringToAtom(UNI_L("backgroundImageA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("backgroundOrigin")) == OP_ATOM_backgroundOrigin);
  verify(DOM_StringToAtom(UNI_L("backgroundOriginA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("backgroundPosition")) == OP_ATOM_backgroundPosition);
  verify(DOM_StringToAtom(UNI_L("backgroundPositionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("backgroundRepeat")) == OP_ATOM_backgroundRepeat);
  verify(DOM_StringToAtom(UNI_L("backgroundRepeatA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("backgroundSize")) == OP_ATOM_backgroundSize);
  verify(DOM_StringToAtom(UNI_L("backgroundSizeA")) == OP_ATOM_UNASSIGNED);
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("badge")) == OP_ATOM_badge);
  verify(DOM_StringToAtom(UNI_L("badgeA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("baseFrequencyX")) == OP_ATOM_baseFrequencyX);
  verify(DOM_StringToAtom(UNI_L("baseFrequencyXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("baseFrequencyY")) == OP_ATOM_baseFrequencyY);
  verify(DOM_StringToAtom(UNI_L("baseFrequencyYA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("baseURI")) == OP_ATOM_baseURI);
  verify(DOM_StringToAtom(UNI_L("baseURIA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("baseVal")) == OP_ATOM_baseVal);
  verify(DOM_StringToAtom(UNI_L("baseValA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("baselineShift")) == OP_ATOM_baselineShift);
  verify(DOM_StringToAtom(UNI_L("baselineShiftA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("bccAddress")) == OP_ATOM_bccAddress);
  verify(DOM_StringToAtom(UNI_L("bccAddressA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("behavior")) == OP_ATOM_behavior);
  verify(DOM_StringToAtom(UNI_L("behaviorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("bgColor")) == OP_ATOM_bgColor);
  verify(DOM_StringToAtom(UNI_L("bgColorA")) == OP_ATOM_UNASSIGNED);
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("bgProcess")) == OP_ATOM_bgProcess);
  verify(DOM_StringToAtom(UNI_L("bgProcessA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("bias")) == OP_ATOM_bias);
  verify(DOM_StringToAtom(UNI_L("biasA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("binaryType")) == OP_ATOM_binaryType);
  verify(DOM_StringToAtom(UNI_L("binaryTypeA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSOCKETS_SUPPORT
#if defined EXTENSION_SUPPORT && defined URL_FILTER
  verify(DOM_StringToAtom(UNI_L("block")) == OP_ATOM_block);
  verify(DOM_StringToAtom(UNI_L("blockA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT && URL_FILTER
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("blue")) == OP_ATOM_blue);
  verify(DOM_StringToAtom(UNI_L("blueA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("blur")) == OP_ATOM_blur);
  verify(DOM_StringToAtom(UNI_L("blurA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("body")) == OP_ATOM_body);
  verify(DOM_StringToAtom(UNI_L("bodyA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("bodyItems")) == OP_ATOM_bodyItems);
  verify(DOM_StringToAtom(UNI_L("bodyItemsA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("booleanValue")) == OP_ATOM_booleanValue);
  verify(DOM_StringToAtom(UNI_L("booleanValueA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("border")) == OP_ATOM_border);
  verify(DOM_StringToAtom(UNI_L("borderA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderBottom")) == OP_ATOM_borderBottom);
  verify(DOM_StringToAtom(UNI_L("borderBottomA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderBottomColor")) == OP_ATOM_borderBottomColor);
  verify(DOM_StringToAtom(UNI_L("borderBottomColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderBottomLeftRadius")) == OP_ATOM_borderBottomLeftRadius);
  verify(DOM_StringToAtom(UNI_L("borderBottomLeftRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderBottomRightRadius")) == OP_ATOM_borderBottomRightRadius);
  verify(DOM_StringToAtom(UNI_L("borderBottomRightRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderBottomStyle")) == OP_ATOM_borderBottomStyle);
  verify(DOM_StringToAtom(UNI_L("borderBottomStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderBottomWidth")) == OP_ATOM_borderBottomWidth);
  verify(DOM_StringToAtom(UNI_L("borderBottomWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderCollapse")) == OP_ATOM_borderCollapse);
  verify(DOM_StringToAtom(UNI_L("borderCollapseA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderColor")) == OP_ATOM_borderColor);
  verify(DOM_StringToAtom(UNI_L("borderColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderLeft")) == OP_ATOM_borderLeft);
  verify(DOM_StringToAtom(UNI_L("borderLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderLeftColor")) == OP_ATOM_borderLeftColor);
  verify(DOM_StringToAtom(UNI_L("borderLeftColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderLeftStyle")) == OP_ATOM_borderLeftStyle);
  verify(DOM_StringToAtom(UNI_L("borderLeftStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderLeftWidth")) == OP_ATOM_borderLeftWidth);
  verify(DOM_StringToAtom(UNI_L("borderLeftWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderRadius")) == OP_ATOM_borderRadius);
  verify(DOM_StringToAtom(UNI_L("borderRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderRight")) == OP_ATOM_borderRight);
  verify(DOM_StringToAtom(UNI_L("borderRightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderRightColor")) == OP_ATOM_borderRightColor);
  verify(DOM_StringToAtom(UNI_L("borderRightColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderRightStyle")) == OP_ATOM_borderRightStyle);
  verify(DOM_StringToAtom(UNI_L("borderRightStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderRightWidth")) == OP_ATOM_borderRightWidth);
  verify(DOM_StringToAtom(UNI_L("borderRightWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderSpacing")) == OP_ATOM_borderSpacing);
  verify(DOM_StringToAtom(UNI_L("borderSpacingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderStyle")) == OP_ATOM_borderStyle);
  verify(DOM_StringToAtom(UNI_L("borderStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderTop")) == OP_ATOM_borderTop);
  verify(DOM_StringToAtom(UNI_L("borderTopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderTopColor")) == OP_ATOM_borderTopColor);
  verify(DOM_StringToAtom(UNI_L("borderTopColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderTopLeftRadius")) == OP_ATOM_borderTopLeftRadius);
  verify(DOM_StringToAtom(UNI_L("borderTopLeftRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderTopRightRadius")) == OP_ATOM_borderTopRightRadius);
  verify(DOM_StringToAtom(UNI_L("borderTopRightRadiusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderTopStyle")) == OP_ATOM_borderTopStyle);
  verify(DOM_StringToAtom(UNI_L("borderTopStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderTopWidth")) == OP_ATOM_borderTopWidth);
  verify(DOM_StringToAtom(UNI_L("borderTopWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("borderWidth")) == OP_ATOM_borderWidth);
  verify(DOM_StringToAtom(UNI_L("borderWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("bottom")) == OP_ATOM_bottom);
  verify(DOM_StringToAtom(UNI_L("bottomA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("boxDecorationBreak")) == OP_ATOM_boxDecorationBreak);
  verify(DOM_StringToAtom(UNI_L("boxDecorationBreakA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("boxShadow")) == OP_ATOM_boxShadow);
  verify(DOM_StringToAtom(UNI_L("boxShadowA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("boxSizing")) == OP_ATOM_boxSizing);
  verify(DOM_StringToAtom(UNI_L("boxSizingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("breakAfter")) == OP_ATOM_breakAfter);
  verify(DOM_StringToAtom(UNI_L("breakAfterA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("breakBefore")) == OP_ATOM_breakBefore);
  verify(DOM_StringToAtom(UNI_L("breakBeforeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("breakInside")) == OP_ATOM_breakInside);
  verify(DOM_StringToAtom(UNI_L("breakInsideA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("browserLanguage")) == OP_ATOM_browserLanguage);
  verify(DOM_StringToAtom(UNI_L("browserLanguageA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("browserWindow")) == OP_ATOM_browserWindow);
  verify(DOM_StringToAtom(UNI_L("browserWindowA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("bubbles")) == OP_ATOM_bubbles);
  verify(DOM_StringToAtom(UNI_L("bubblesA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("buffered")) == OP_ATOM_buffered);
  verify(DOM_StringToAtom(UNI_L("bufferedA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("bufferedAmount")) == OP_ATOM_bufferedAmount);
  verify(DOM_StringToAtom(UNI_L("bufferedAmountA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("bufferedRendering")) == OP_ATOM_bufferedRendering);
  verify(DOM_StringToAtom(UNI_L("bufferedRenderingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("busy")) == OP_ATOM_busy);
  verify(DOM_StringToAtom(UNI_L("busyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("button")) == OP_ATOM_button);
  verify(DOM_StringToAtom(UNI_L("buttonA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("bytesAvailable")) == OP_ATOM_bytesAvailable);
  verify(DOM_StringToAtom(UNI_L("bytesAvailableA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("c")) == OP_ATOM_c);
  verify(DOM_StringToAtom(UNI_L("cA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("calendarItemId")) == OP_ATOM_calendarItemId);
  verify(DOM_StringToAtom(UNI_L("calendarItemIdA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("callRecordAddress")) == OP_ATOM_callRecordAddress);
  verify(DOM_StringToAtom(UNI_L("callRecordAddressA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("callRecordId")) == OP_ATOM_callRecordId);
  verify(DOM_StringToAtom(UNI_L("callRecordIdA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("callRecordName")) == OP_ATOM_callRecordName);
  verify(DOM_StringToAtom(UNI_L("callRecordNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("callRecordType")) == OP_ATOM_callRecordType);
  verify(DOM_StringToAtom(UNI_L("callRecordTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("callbackNumber")) == OP_ATOM_callbackNumber);
  verify(DOM_StringToAtom(UNI_L("callbackNumberA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("cancelBubble")) == OP_ATOM_cancelBubble);
  verify(DOM_StringToAtom(UNI_L("cancelBubbleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cancelable")) == OP_ATOM_cancelable);
  verify(DOM_StringToAtom(UNI_L("cancelableA")) == OP_ATOM_UNASSIGNED);
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("canvas")) == OP_ATOM_canvas);
  verify(DOM_StringToAtom(UNI_L("canvasA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("caption")) == OP_ATOM_caption);
  verify(DOM_StringToAtom(UNI_L("captionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("captionSide")) == OP_ATOM_captionSide);
  verify(DOM_StringToAtom(UNI_L("captionSideA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("ccAddress")) == OP_ATOM_ccAddress);
  verify(DOM_StringToAtom(UNI_L("ccAddressA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("cellIndex")) == OP_ATOM_cellIndex);
  verify(DOM_StringToAtom(UNI_L("cellIndexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cellPadding")) == OP_ATOM_cellPadding);
  verify(DOM_StringToAtom(UNI_L("cellPaddingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cellSpacing")) == OP_ATOM_cellSpacing);
  verify(DOM_StringToAtom(UNI_L("cellSpacingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cells")) == OP_ATOM_cells);
  verify(DOM_StringToAtom(UNI_L("cellsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ch")) == OP_ATOM_ch);
  verify(DOM_StringToAtom(UNI_L("chA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("chOff")) == OP_ATOM_chOff);
  verify(DOM_StringToAtom(UNI_L("chOffA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("challenge")) == OP_ATOM_challenge);
  verify(DOM_StringToAtom(UNI_L("challengeA")) == OP_ATOM_UNASSIGNED);
#ifdef TOUCH_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("changedTouches")) == OP_ATOM_changedTouches);
  verify(DOM_StringToAtom(UNI_L("changedTouchesA")) == OP_ATOM_UNASSIGNED);
#endif // TOUCH_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("char")) == OP_ATOM_char);
  verify(DOM_StringToAtom(UNI_L("charA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("charCode")) == OP_ATOM_charCode);
  verify(DOM_StringToAtom(UNI_L("charCodeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("characterSet")) == OP_ATOM_characterSet);
  verify(DOM_StringToAtom(UNI_L("characterSetA")) == OP_ATOM_UNASSIGNED);
#ifdef CSS_CHARACTER_TYPE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("characterType")) == OP_ATOM_characterType);
  verify(DOM_StringToAtom(UNI_L("characterTypeA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_CHARACTER_TYPE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("charset")) == OP_ATOM_charset);
  verify(DOM_StringToAtom(UNI_L("charsetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("checked")) == OP_ATOM_checked);
  verify(DOM_StringToAtom(UNI_L("checkedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("childElementCount")) == OP_ATOM_childElementCount);
  verify(DOM_StringToAtom(UNI_L("childElementCountA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("childNodes")) == OP_ATOM_childNodes);
  verify(DOM_StringToAtom(UNI_L("childNodesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("children")) == OP_ATOM_children);
  verify(DOM_StringToAtom(UNI_L("childrenA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("chunked")) == OP_ATOM_chunked);
  verify(DOM_StringToAtom(UNI_L("chunkedA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("cite")) == OP_ATOM_cite);
  verify(DOM_StringToAtom(UNI_L("citeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("class")) == OP_ATOM_class);
  verify(DOM_StringToAtom(UNI_L("classA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("classId")) == OP_ATOM_classId);
  verify(DOM_StringToAtom(UNI_L("classIdA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("classList")) == OP_ATOM_classList);
  verify(DOM_StringToAtom(UNI_L("classListA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("className")) == OP_ATOM_className);
  verify(DOM_StringToAtom(UNI_L("classNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clear")) == OP_ATOM_clear);
  verify(DOM_StringToAtom(UNI_L("clearA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clientHeight")) == OP_ATOM_clientHeight);
  verify(DOM_StringToAtom(UNI_L("clientHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clientLeft")) == OP_ATOM_clientLeft);
  verify(DOM_StringToAtom(UNI_L("clientLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clientTop")) == OP_ATOM_clientTop);
  verify(DOM_StringToAtom(UNI_L("clientTopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clientWidth")) == OP_ATOM_clientWidth);
  verify(DOM_StringToAtom(UNI_L("clientWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clientX")) == OP_ATOM_clientX);
  verify(DOM_StringToAtom(UNI_L("clientXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clientY")) == OP_ATOM_clientY);
  verify(DOM_StringToAtom(UNI_L("clientYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clip")) == OP_ATOM_clip);
  verify(DOM_StringToAtom(UNI_L("clipA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("clipPath")) == OP_ATOM_clipPath);
  verify(DOM_StringToAtom(UNI_L("clipPathA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clipPathUnits")) == OP_ATOM_clipPathUnits);
  verify(DOM_StringToAtom(UNI_L("clipPathUnitsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("clipRule")) == OP_ATOM_clipRule);
  verify(DOM_StringToAtom(UNI_L("clipRuleA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef USE_OP_CLIPBOARD
  verify(DOM_StringToAtom(UNI_L("clipboardData")) == OP_ATOM_clipboardData);
  verify(DOM_StringToAtom(UNI_L("clipboardDataA")) == OP_ATOM_UNASSIGNED);
#endif // USE_OP_CLIPBOARD
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("clipboardString")) == OP_ATOM_clipboardString);
  verify(DOM_StringToAtom(UNI_L("clipboardStringA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("close")) == OP_ATOM_close);
  verify(DOM_StringToAtom(UNI_L("closeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("closed")) == OP_ATOM_closed);
  verify(DOM_StringToAtom(UNI_L("closedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("code")) == OP_ATOM_code);
  verify(DOM_StringToAtom(UNI_L("codeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("codeBase")) == OP_ATOM_codeBase);
  verify(DOM_StringToAtom(UNI_L("codeBaseA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("codeType")) == OP_ATOM_codeType);
  verify(DOM_StringToAtom(UNI_L("codeTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("colSpan")) == OP_ATOM_colSpan);
  verify(DOM_StringToAtom(UNI_L("colSpanA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM2_RANGE
  verify(DOM_StringToAtom(UNI_L("collapsed")) == OP_ATOM_collapsed);
  verify(DOM_StringToAtom(UNI_L("collapsedA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_RANGE
  verify(DOM_StringToAtom(UNI_L("color")) == OP_ATOM_color);
  verify(DOM_StringToAtom(UNI_L("colorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("colorDepth")) == OP_ATOM_colorDepth);
  verify(DOM_StringToAtom(UNI_L("colorDepthA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("colorInterpolation")) == OP_ATOM_colorInterpolation);
  verify(DOM_StringToAtom(UNI_L("colorInterpolationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("colorInterpolationFilters")) == OP_ATOM_colorInterpolationFilters);
  verify(DOM_StringToAtom(UNI_L("colorInterpolationFiltersA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("colorProfile")) == OP_ATOM_colorProfile);
  verify(DOM_StringToAtom(UNI_L("colorProfileA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("colorRendering")) == OP_ATOM_colorRendering);
  verify(DOM_StringToAtom(UNI_L("colorRenderingA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("cols")) == OP_ATOM_cols);
  verify(DOM_StringToAtom(UNI_L("colsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnCount")) == OP_ATOM_columnCount);
  verify(DOM_StringToAtom(UNI_L("columnCountA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnFill")) == OP_ATOM_columnFill);
  verify(DOM_StringToAtom(UNI_L("columnFillA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnGap")) == OP_ATOM_columnGap);
  verify(DOM_StringToAtom(UNI_L("columnGapA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnRule")) == OP_ATOM_columnRule);
  verify(DOM_StringToAtom(UNI_L("columnRuleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnRuleColor")) == OP_ATOM_columnRuleColor);
  verify(DOM_StringToAtom(UNI_L("columnRuleColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnRuleStyle")) == OP_ATOM_columnRuleStyle);
  verify(DOM_StringToAtom(UNI_L("columnRuleStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnRuleWidth")) == OP_ATOM_columnRuleWidth);
  verify(DOM_StringToAtom(UNI_L("columnRuleWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnSpan")) == OP_ATOM_columnSpan);
  verify(DOM_StringToAtom(UNI_L("columnSpanA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columnWidth")) == OP_ATOM_columnWidth);
  verify(DOM_StringToAtom(UNI_L("columnWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("columns")) == OP_ATOM_columns);
  verify(DOM_StringToAtom(UNI_L("columnsA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM2_RANGE
  verify(DOM_StringToAtom(UNI_L("commonAncestorContainer")) == OP_ATOM_commonAncestorContainer);
  verify(DOM_StringToAtom(UNI_L("commonAncestorContainerA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_RANGE
  verify(DOM_StringToAtom(UNI_L("compact")) == OP_ATOM_compact);
  verify(DOM_StringToAtom(UNI_L("compactA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("company")) == OP_ATOM_company);
  verify(DOM_StringToAtom(UNI_L("companyA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("compatMode")) == OP_ATOM_compatMode);
  verify(DOM_StringToAtom(UNI_L("compatModeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("complete")) == OP_ATOM_complete);
  verify(DOM_StringToAtom(UNI_L("completeA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("connection")) == OP_ATOM_connection);
  verify(DOM_StringToAtom(UNI_L("connectionA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("content")) == OP_ATOM_content);
  verify(DOM_StringToAtom(UNI_L("contentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("contentDocument")) == OP_ATOM_contentDocument);
  verify(DOM_StringToAtom(UNI_L("contentDocumentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("contentEditable")) == OP_ATOM_contentEditable);
  verify(DOM_StringToAtom(UNI_L("contentEditableA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("contentScriptType")) == OP_ATOM_contentScriptType);
  verify(DOM_StringToAtom(UNI_L("contentScriptTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("contentStyleType")) == OP_ATOM_contentStyleType);
  verify(DOM_StringToAtom(UNI_L("contentStyleTypeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("contentType")) == OP_ATOM_contentType);
  verify(DOM_StringToAtom(UNI_L("contentTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("contentWindow")) == OP_ATOM_contentWindow);
  verify(DOM_StringToAtom(UNI_L("contentWindowA")) == OP_ATOM_UNASSIGNED);
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("contexts")) == OP_ATOM_contexts);
  verify(DOM_StringToAtom(UNI_L("contextsA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("control")) == OP_ATOM_control);
  verify(DOM_StringToAtom(UNI_L("controlA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("controls")) == OP_ATOM_controls);
  verify(DOM_StringToAtom(UNI_L("controlsA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("cookie")) == OP_ATOM_cookie);
  verify(DOM_StringToAtom(UNI_L("cookieA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cookieEnabled")) == OP_ATOM_cookieEnabled);
  verify(DOM_StringToAtom(UNI_L("cookieEnabledA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("coords")) == OP_ATOM_coords);
  verify(DOM_StringToAtom(UNI_L("coordsA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("correspondingElement")) == OP_ATOM_correspondingElement);
  verify(DOM_StringToAtom(UNI_L("correspondingElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("correspondingUseElement")) == OP_ATOM_correspondingUseElement);
  verify(DOM_StringToAtom(UNI_L("correspondingUseElementA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("count")) == OP_ATOM_count);
  verify(DOM_StringToAtom(UNI_L("countA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("counterIncrement")) == OP_ATOM_counterIncrement);
  verify(DOM_StringToAtom(UNI_L("counterIncrementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("counterReset")) == OP_ATOM_counterReset);
  verify(DOM_StringToAtom(UNI_L("counterResetA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("createDate")) == OP_ATOM_createDate);
  verify(DOM_StringToAtom(UNI_L("createDateA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("createDocumentFragment")) == OP_ATOM_createDocumentFragment);
  verify(DOM_StringToAtom(UNI_L("createDocumentFragmentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("createElement")) == OP_ATOM_createElement);
  verify(DOM_StringToAtom(UNI_L("createElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("createEvent")) == OP_ATOM_createEvent);
  verify(DOM_StringToAtom(UNI_L("createEventA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("createTextNode")) == OP_ATOM_createTextNode);
  verify(DOM_StringToAtom(UNI_L("createTextNodeA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("created")) == OP_ATOM_created);
  verify(DOM_StringToAtom(UNI_L("createdA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("crossOrigin")) == OP_ATOM_crossOrigin);
  verify(DOM_StringToAtom(UNI_L("crossOriginA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cssFloat")) == OP_ATOM_cssFloat);
  verify(DOM_StringToAtom(UNI_L("cssFloatA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cssRules")) == OP_ATOM_cssRules);
  verify(DOM_StringToAtom(UNI_L("cssRulesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cssText")) == OP_ATOM_cssText);
  verify(DOM_StringToAtom(UNI_L("cssTextA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ctrlKey")) == OP_ATOM_ctrlKey);
  verify(DOM_StringToAtom(UNI_L("ctrlKeyA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("cues")) == OP_ATOM_cues);
  verify(DOM_StringToAtom(UNI_L("cuesA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("current")) == OP_ATOM_current);
  verify(DOM_StringToAtom(UNI_L("currentA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_SUPPORT
  verify(DOM_StringToAtom(UNI_L("currentFps")) == OP_ATOM_currentFps);
  verify(DOM_StringToAtom(UNI_L("currentFpsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("currentIcon")) == OP_ATOM_currentIcon);
  verify(DOM_StringToAtom(UNI_L("currentIconA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(DOM_StringToAtom(UNI_L("currentNode")) == OP_ATOM_currentNode);
  verify(DOM_StringToAtom(UNI_L("currentNodeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_TRAVERSAL
#ifdef PAGED_MEDIA_SUPPORT
  verify(DOM_StringToAtom(UNI_L("currentPage")) == OP_ATOM_currentPage);
  verify(DOM_StringToAtom(UNI_L("currentPageA")) == OP_ATOM_UNASSIGNED);
#endif // PAGED_MEDIA_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("currentRotate")) == OP_ATOM_currentRotate);
  verify(DOM_StringToAtom(UNI_L("currentRotateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("currentScale")) == OP_ATOM_currentScale);
  verify(DOM_StringToAtom(UNI_L("currentScaleA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("currentServiceName")) == OP_ATOM_currentServiceName);
  verify(DOM_StringToAtom(UNI_L("currentServiceNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("currentServicePath")) == OP_ATOM_currentServicePath);
  verify(DOM_StringToAtom(UNI_L("currentServicePathA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("currentSrc")) == OP_ATOM_currentSrc);
  verify(DOM_StringToAtom(UNI_L("currentSrcA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef CURRENT_STYLE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("currentStyle")) == OP_ATOM_currentStyle);
  verify(DOM_StringToAtom(UNI_L("currentStyleA")) == OP_ATOM_UNASSIGNED);
#endif // CURRENT_STYLE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("currentTarget")) == OP_ATOM_currentTarget);
  verify(DOM_StringToAtom(UNI_L("currentTargetA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("currentTime")) == OP_ATOM_currentTime);
  verify(DOM_StringToAtom(UNI_L("currentTimeA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("currentTranslate")) == OP_ATOM_currentTranslate);
  verify(DOM_StringToAtom(UNI_L("currentTranslateA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("cursor")) == OP_ATOM_cursor);
  verify(DOM_StringToAtom(UNI_L("cursorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("customError")) == OP_ATOM_customError);
  verify(DOM_StringToAtom(UNI_L("customErrorA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("cx")) == OP_ATOM_cx);
  verify(DOM_StringToAtom(UNI_L("cxA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("cy")) == OP_ATOM_cy);
  verify(DOM_StringToAtom(UNI_L("cyA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("d")) == OP_ATOM_d);
  verify(DOM_StringToAtom(UNI_L("dA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("data")) == OP_ATOM_data);
  verify(DOM_StringToAtom(UNI_L("dataA")) == OP_ATOM_UNASSIGNED);
#ifdef DRAG_SUPPORT
  verify(DOM_StringToAtom(UNI_L("dataTransfer")) == OP_ATOM_dataTransfer);
  verify(DOM_StringToAtom(UNI_L("dataTransferA")) == OP_ATOM_UNASSIGNED);
#endif // DRAG_SUPPORT
  verify(DOM_StringToAtom(UNI_L("dataset")) == OP_ATOM_dataset);
  verify(DOM_StringToAtom(UNI_L("datasetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("dateTime")) == OP_ATOM_dateTime);
  verify(DOM_StringToAtom(UNI_L("dateTimeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("declare")) == OP_ATOM_declare);
  verify(DOM_StringToAtom(UNI_L("declareA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("default")) == OP_ATOM_default);
  verify(DOM_StringToAtom(UNI_L("defaultA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("defaultChecked")) == OP_ATOM_defaultChecked);
  verify(DOM_StringToAtom(UNI_L("defaultCheckedA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("defaultMuted")) == OP_ATOM_defaultMuted);
  verify(DOM_StringToAtom(UNI_L("defaultMutedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("defaultPlaybackRate")) == OP_ATOM_defaultPlaybackRate);
  verify(DOM_StringToAtom(UNI_L("defaultPlaybackRateA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("defaultPrevented")) == OP_ATOM_defaultPrevented);
  verify(DOM_StringToAtom(UNI_L("defaultPreventedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("defaultSelected")) == OP_ATOM_defaultSelected);
  verify(DOM_StringToAtom(UNI_L("defaultSelectedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("defaultStatus")) == OP_ATOM_defaultStatus);
  verify(DOM_StringToAtom(UNI_L("defaultStatusA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("defaultValue")) == OP_ATOM_defaultValue);
  verify(DOM_StringToAtom(UNI_L("defaultValueA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("defaultView")) == OP_ATOM_defaultView);
  verify(DOM_StringToAtom(UNI_L("defaultViewA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("defer")) == OP_ATOM_defer);
  verify(DOM_StringToAtom(UNI_L("deferA")) == OP_ATOM_UNASSIGNED);
#ifdef CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("depth")) == OP_ATOM_depth);
  verify(DOM_StringToAtom(UNI_L("depthA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("description")) == OP_ATOM_description);
  verify(DOM_StringToAtom(UNI_L("descriptionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("designMode")) == OP_ATOM_designMode);
  verify(DOM_StringToAtom(UNI_L("designModeA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("destinationAddress")) == OP_ATOM_destinationAddress);
  verify(DOM_StringToAtom(UNI_L("destinationAddressA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("detail")) == OP_ATOM_detail);
  verify(DOM_StringToAtom(UNI_L("detailA")) == OP_ATOM_UNASSIGNED);
#if defined UPNP_SUPPORT || (defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL)
  verify(DOM_StringToAtom(UNI_L("device")) == OP_ATOM_device);
  verify(DOM_StringToAtom(UNI_L("deviceA")) == OP_ATOM_UNASSIGNED);
#endif // UPNP_SUPPORT || GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("deviceName")) == OP_ATOM_deviceName);
  verify(DOM_StringToAtom(UNI_L("deviceNameA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("devicePixelRatio")) == OP_ATOM_devicePixelRatio);
  verify(DOM_StringToAtom(UNI_L("devicePixelRatioA")) == OP_ATOM_UNASSIGNED);
#ifdef ABOUT_HTML_DIALOGS
  verify(DOM_StringToAtom(UNI_L("dialogArguments")) == OP_ATOM_dialogArguments);
  verify(DOM_StringToAtom(UNI_L("dialogArgumentsA")) == OP_ATOM_UNASSIGNED);
#endif // ABOUT_HTML_DIALOGS
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("diffuseConstant")) == OP_ATOM_diffuseConstant);
  verify(DOM_StringToAtom(UNI_L("diffuseConstantA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("dir")) == OP_ATOM_dir);
  verify(DOM_StringToAtom(UNI_L("dirA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("dirName")) == OP_ATOM_dirName);
  verify(DOM_StringToAtom(UNI_L("dirNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("direction")) == OP_ATOM_direction);
  verify(DOM_StringToAtom(UNI_L("directionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("disabled")) == OP_ATOM_disabled);
  verify(DOM_StringToAtom(UNI_L("disabledA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("dispatchEvent")) == OP_ATOM_dispatchEvent);
  verify(DOM_StringToAtom(UNI_L("dispatchEventA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("display")) == OP_ATOM_display);
  verify(DOM_StringToAtom(UNI_L("displayA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("displayAlign")) == OP_ATOM_displayAlign);
  verify(DOM_StringToAtom(UNI_L("displayAlignA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("divisor")) == OP_ATOM_divisor);
  verify(DOM_StringToAtom(UNI_L("divisorA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("doNotTrack")) == OP_ATOM_doNotTrack);
  verify(DOM_StringToAtom(UNI_L("doNotTrackA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("doctype")) == OP_ATOM_doctype);
  verify(DOM_StringToAtom(UNI_L("doctypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("document")) == OP_ATOM_document);
  verify(DOM_StringToAtom(UNI_L("documentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("documentElement")) == OP_ATOM_documentElement);
  verify(DOM_StringToAtom(UNI_L("documentElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("documentURI")) == OP_ATOM_documentURI);
  verify(DOM_StringToAtom(UNI_L("documentURIA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("documentURL")) == OP_ATOM_documentURL);
  verify(DOM_StringToAtom(UNI_L("documentURLA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("documentURLPatterns")) == OP_ATOM_documentURLPatterns);
  verify(DOM_StringToAtom(UNI_L("documentURLPatternsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("domConfig")) == OP_ATOM_domConfig);
  verify(DOM_StringToAtom(UNI_L("domConfigA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("domain")) == OP_ATOM_domain);
  verify(DOM_StringToAtom(UNI_L("domainA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("dominantBaseline")) == OP_ATOM_dominantBaseline);
  verify(DOM_StringToAtom(UNI_L("dominantBaselineA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DRAG_SUPPORT
  verify(DOM_StringToAtom(UNI_L("draggable")) == OP_ATOM_draggable);
  verify(DOM_StringToAtom(UNI_L("draggableA")) == OP_ATOM_UNASSIGNED);
#endif // DRAG_SUPPORT
#ifdef CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("drawingBufferHeight")) == OP_ATOM_drawingBufferHeight);
  verify(DOM_StringToAtom(UNI_L("drawingBufferHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("drawingBufferWidth")) == OP_ATOM_drawingBufferWidth);
  verify(DOM_StringToAtom(UNI_L("drawingBufferWidthA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS3D_SUPPORT
#ifdef DRAG_SUPPORT
  verify(DOM_StringToAtom(UNI_L("dropEffect")) == OP_ATOM_dropEffect);
  verify(DOM_StringToAtom(UNI_L("dropEffectA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("dropzone")) == OP_ATOM_dropzone);
  verify(DOM_StringToAtom(UNI_L("dropzoneA")) == OP_ATOM_UNASSIGNED);
#endif // DRAG_SUPPORT
#ifdef DOM_DSE_DEBUGGING
  verify(DOM_StringToAtom(UNI_L("dseEnabled")) == OP_ATOM_dseEnabled);
  verify(DOM_StringToAtom(UNI_L("dseEnabledA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("dseRecovered")) == OP_ATOM_dseRecovered);
  verify(DOM_StringToAtom(UNI_L("dseRecoveredA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_DSE_DEBUGGING
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("duration")) == OP_ATOM_duration);
  verify(DOM_StringToAtom(UNI_L("durationA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("durationSeconds")) == OP_ATOM_durationSeconds);
  verify(DOM_StringToAtom(UNI_L("durationSecondsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("dx")) == OP_ATOM_dx);
  verify(DOM_StringToAtom(UNI_L("dxA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("dy")) == OP_ATOM_dy);
  verify(DOM_StringToAtom(UNI_L("dyA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("e")) == OP_ATOM_e);
  verify(DOM_StringToAtom(UNI_L("eA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("eMail")) == OP_ATOM_eMail);
  verify(DOM_StringToAtom(UNI_L("eMailA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("edgeMode")) == OP_ATOM_edgeMode);
  verify(DOM_StringToAtom(UNI_L("edgeModeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DRAG_SUPPORT
  verify(DOM_StringToAtom(UNI_L("effectAllowed")) == OP_ATOM_effectAllowed);
  verify(DOM_StringToAtom(UNI_L("effectAllowedA")) == OP_ATOM_UNASSIGNED);
#endif // DRAG_SUPPORT
  verify(DOM_StringToAtom(UNI_L("elapsedTime")) == OP_ATOM_elapsedTime);
  verify(DOM_StringToAtom(UNI_L("elapsedTimeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("element")) == OP_ATOM_element);
  verify(DOM_StringToAtom(UNI_L("elementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("elements")) == OP_ATOM_elements);
  verify(DOM_StringToAtom(UNI_L("elementsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("elevation")) == OP_ATOM_elevation);
  verify(DOM_StringToAtom(UNI_L("elevationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("embeds")) == OP_ATOM_embeds);
  verify(DOM_StringToAtom(UNI_L("embedsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("emptyCells")) == OP_ATOM_emptyCells);
  verify(DOM_StringToAtom(UNI_L("emptyCellsA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("enableBackground")) == OP_ATOM_enableBackground);
  verify(DOM_StringToAtom(UNI_L("enableBackgroundA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("enabledPlugin")) == OP_ATOM_enabledPlugin);
  verify(DOM_StringToAtom(UNI_L("enabledPluginA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("encoding")) == OP_ATOM_encoding);
  verify(DOM_StringToAtom(UNI_L("encodingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("enctype")) == OP_ATOM_enctype);
  verify(DOM_StringToAtom(UNI_L("enctypeA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM2_RANGE
  verify(DOM_StringToAtom(UNI_L("endContainer")) == OP_ATOM_endContainer);
  verify(DOM_StringToAtom(UNI_L("endContainerA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("endOffset")) == OP_ATOM_endOffset);
  verify(DOM_StringToAtom(UNI_L("endOffsetA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_RANGE
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("endTime")) == OP_ATOM_endTime);
  verify(DOM_StringToAtom(UNI_L("endTimeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ended")) == OP_ATOM_ended);
  verify(DOM_StringToAtom(UNI_L("endedA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("entities")) == OP_ATOM_entities);
  verify(DOM_StringToAtom(UNI_L("entitiesA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("entries")) == OP_ATOM_entries);
  verify(DOM_StringToAtom(UNI_L("entriesA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined WEBSERVER_SUPPORT || defined DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("eof")) == OP_ATOM_eof);
  verify(DOM_StringToAtom(UNI_L("eofA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT || DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("error")) == OP_ATOM_error);
  verify(DOM_StringToAtom(UNI_L("errorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("event")) == OP_ATOM_event);
  verify(DOM_StringToAtom(UNI_L("eventA")) == OP_ATOM_UNASSIGNED);
#ifdef USER_JAVASCRIPT
  verify(DOM_StringToAtom(UNI_L("eventCancelled")) == OP_ATOM_eventCancelled);
  verify(DOM_StringToAtom(UNI_L("eventCancelledA")) == OP_ATOM_UNASSIGNED);
#endif // USER_JAVASCRIPT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("eventEndTime")) == OP_ATOM_eventEndTime);
  verify(DOM_StringToAtom(UNI_L("eventEndTimeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("eventName")) == OP_ATOM_eventName);
  verify(DOM_StringToAtom(UNI_L("eventNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("eventNotes")) == OP_ATOM_eventNotes);
  verify(DOM_StringToAtom(UNI_L("eventNotesA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("eventPhase")) == OP_ATOM_eventPhase);
  verify(DOM_StringToAtom(UNI_L("eventPhaseA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("eventRecurrence")) == OP_ATOM_eventRecurrence);
  verify(DOM_StringToAtom(UNI_L("eventRecurrenceA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("eventStartTime")) == OP_ATOM_eventStartTime);
  verify(DOM_StringToAtom(UNI_L("eventStartTimeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("exists")) == OP_ATOM_exists);
  verify(DOM_StringToAtom(UNI_L("existsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(DOM_StringToAtom(UNI_L("expandEntityReferences")) == OP_ATOM_expandEntityReferences);
  verify(DOM_StringToAtom(UNI_L("expandEntityReferencesA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_TRAVERSAL
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("exponent")) == OP_ATOM_exponent);
  verify(DOM_StringToAtom(UNI_L("exponentA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("extension")) == OP_ATOM_extension);
  verify(DOM_StringToAtom(UNI_L("extensionA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("extensions")) == OP_ATOM_extensions);
  verify(DOM_StringToAtom(UNI_L("extensionsA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("externalResourcesRequired")) == OP_ATOM_externalResourcesRequired);
  verify(DOM_StringToAtom(UNI_L("externalResourcesRequiredA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("f")) == OP_ATOM_f);
  verify(DOM_StringToAtom(UNI_L("fA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("face")) == OP_ATOM_face);
  verify(DOM_StringToAtom(UNI_L("faceA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("farthestViewportElement")) == OP_ATOM_farthestViewportElement);
  verify(DOM_StringToAtom(UNI_L("farthestViewportElementA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("favicon")) == OP_ATOM_favicon);
  verify(DOM_StringToAtom(UNI_L("faviconA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("faviconUrl")) == OP_ATOM_faviconUrl);
  verify(DOM_StringToAtom(UNI_L("faviconUrlA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("fgColor")) == OP_ATOM_fgColor);
  verify(DOM_StringToAtom(UNI_L("fgColorA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("fileInstance")) == OP_ATOM_fileInstance);
  verify(DOM_StringToAtom(UNI_L("fileInstanceA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("fileName")) == OP_ATOM_fileName);
  verify(DOM_StringToAtom(UNI_L("fileNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("filePath")) == OP_ATOM_filePath);
  verify(DOM_StringToAtom(UNI_L("filePathA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#if defined DOM_GADGET_FILE_API_SUPPORT || defined DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("fileSize")) == OP_ATOM_fileSize);
  verify(DOM_StringToAtom(UNI_L("fileSizeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT || DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("filename")) == OP_ATOM_filename);
  verify(DOM_StringToAtom(UNI_L("filenameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("files")) == OP_ATOM_files);
  verify(DOM_StringToAtom(UNI_L("filesA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("fill")) == OP_ATOM_fill);
  verify(DOM_StringToAtom(UNI_L("fillA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fillOpacity")) == OP_ATOM_fillOpacity);
  verify(DOM_StringToAtom(UNI_L("fillOpacityA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fillRule")) == OP_ATOM_fillRule);
  verify(DOM_StringToAtom(UNI_L("fillRuleA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("fillStyle")) == OP_ATOM_fillStyle);
  verify(DOM_StringToAtom(UNI_L("fillStyleA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
#if defined DOM2_TRAVERSAL || defined DOM3_LOAD || defined DOM3_SAVE || defined SVG_DOM
  verify(DOM_StringToAtom(UNI_L("filter")) == OP_ATOM_filter);
  verify(DOM_StringToAtom(UNI_L("filterA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_TRAVERSAL || DOM3_LOAD || DOM3_SAVE || SVG_DOM
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("filterResX")) == OP_ATOM_filterResX);
  verify(DOM_StringToAtom(UNI_L("filterResXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("filterResY")) == OP_ATOM_filterResY);
  verify(DOM_StringToAtom(UNI_L("filterResYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("filterUnits")) == OP_ATOM_filterUnits);
  verify(DOM_StringToAtom(UNI_L("filterUnitsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("firstChild")) == OP_ATOM_firstChild);
  verify(DOM_StringToAtom(UNI_L("firstChildA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("firstElementChild")) == OP_ATOM_firstElementChild);
  verify(DOM_StringToAtom(UNI_L("firstElementChildA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("flex")) == OP_ATOM_flex);
  verify(DOM_StringToAtom(UNI_L("flexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("flexBasis")) == OP_ATOM_flexBasis);
  verify(DOM_StringToAtom(UNI_L("flexBasisA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("flexDirection")) == OP_ATOM_flexDirection);
  verify(DOM_StringToAtom(UNI_L("flexDirectionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("flexFlow")) == OP_ATOM_flexFlow);
  verify(DOM_StringToAtom(UNI_L("flexFlowA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("flexGrow")) == OP_ATOM_flexGrow);
  verify(DOM_StringToAtom(UNI_L("flexGrowA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("flexShrink")) == OP_ATOM_flexShrink);
  verify(DOM_StringToAtom(UNI_L("flexShrinkA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("flexWrap")) == OP_ATOM_flexWrap);
  verify(DOM_StringToAtom(UNI_L("flexWrapA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("floodColor")) == OP_ATOM_floodColor);
  verify(DOM_StringToAtom(UNI_L("floodColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("floodOpacity")) == OP_ATOM_floodOpacity);
  verify(DOM_StringToAtom(UNI_L("floodOpacityA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("focus")) == OP_ATOM_focus);
  verify(DOM_StringToAtom(UNI_L("focusA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_SELECTION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("focusNode")) == OP_ATOM_focusNode);
  verify(DOM_StringToAtom(UNI_L("focusNodeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("focusOffset")) == OP_ATOM_focusOffset);
  verify(DOM_StringToAtom(UNI_L("focusOffsetA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_SELECTION_SUPPORT
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("focused")) == OP_ATOM_focused);
  verify(DOM_StringToAtom(UNI_L("focusedA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("font")) == OP_ATOM_font);
  verify(DOM_StringToAtom(UNI_L("fontA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fontFamily")) == OP_ATOM_fontFamily);
  verify(DOM_StringToAtom(UNI_L("fontFamilyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fontSize")) == OP_ATOM_fontSize);
  verify(DOM_StringToAtom(UNI_L("fontSizeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fontSizeAdjust")) == OP_ATOM_fontSizeAdjust);
  verify(DOM_StringToAtom(UNI_L("fontSizeAdjustA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fontStretch")) == OP_ATOM_fontStretch);
  verify(DOM_StringToAtom(UNI_L("fontStretchA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fontStyle")) == OP_ATOM_fontStyle);
  verify(DOM_StringToAtom(UNI_L("fontStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fontVariant")) == OP_ATOM_fontVariant);
  verify(DOM_StringToAtom(UNI_L("fontVariantA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fontWeight")) == OP_ATOM_fontWeight);
  verify(DOM_StringToAtom(UNI_L("fontWeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("for")) == OP_ATOM_for);
  verify(DOM_StringToAtom(UNI_L("forA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("form")) == OP_ATOM_form);
  verify(DOM_StringToAtom(UNI_L("formA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("formAction")) == OP_ATOM_formAction);
  verify(DOM_StringToAtom(UNI_L("formActionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("formEnctype")) == OP_ATOM_formEnctype);
  verify(DOM_StringToAtom(UNI_L("formEnctypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("formMethod")) == OP_ATOM_formMethod);
  verify(DOM_StringToAtom(UNI_L("formMethodA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("formNoValidate")) == OP_ATOM_formNoValidate);
  verify(DOM_StringToAtom(UNI_L("formNoValidateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("formTarget")) == OP_ATOM_formTarget);
  verify(DOM_StringToAtom(UNI_L("formTargetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("forms")) == OP_ATOM_forms);
  verify(DOM_StringToAtom(UNI_L("formsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("frame")) == OP_ATOM_frame);
  verify(DOM_StringToAtom(UNI_L("frameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("frameBorder")) == OP_ATOM_frameBorder);
  verify(DOM_StringToAtom(UNI_L("frameBorderA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("frameElement")) == OP_ATOM_frameElement);
  verify(DOM_StringToAtom(UNI_L("frameElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("frames")) == OP_ATOM_frames);
  verify(DOM_StringToAtom(UNI_L("framesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fromElement")) == OP_ATOM_fromElement);
  verify(DOM_StringToAtom(UNI_L("fromElementA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("fullName")) == OP_ATOM_fullName);
  verify(DOM_StringToAtom(UNI_L("fullNameA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_FULLSCREEN_MODE
  verify(DOM_StringToAtom(UNI_L("fullscreenElement")) == OP_ATOM_fullscreenElement);
  verify(DOM_StringToAtom(UNI_L("fullscreenElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fullscreenEnabled")) == OP_ATOM_fullscreenEnabled);
  verify(DOM_StringToAtom(UNI_L("fullscreenEnabledA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_FULLSCREEN_MODE
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("fx")) == OP_ATOM_fx);
  verify(DOM_StringToAtom(UNI_L("fxA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("fy")) == OP_ATOM_fy);
  verify(DOM_StringToAtom(UNI_L("fyA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("geolocation")) == OP_ATOM_geolocation);
  verify(DOM_StringToAtom(UNI_L("geolocationA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("getElementById")) == OP_ATOM_getElementById);
  verify(DOM_StringToAtom(UNI_L("getElementByIdA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("getElementsByClassName")) == OP_ATOM_getElementsByClassName);
  verify(DOM_StringToAtom(UNI_L("getElementsByClassNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("getElementsByTagName")) == OP_ATOM_getElementsByTagName);
  verify(DOM_StringToAtom(UNI_L("getElementsByTagNameA")) == OP_ATOM_UNASSIGNED);
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("globalAlpha")) == OP_ATOM_globalAlpha);
  verify(DOM_StringToAtom(UNI_L("globalAlphaA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("globalCompositeOperation")) == OP_ATOM_globalCompositeOperation);
  verify(DOM_StringToAtom(UNI_L("globalCompositeOperationA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("glyphOrientationHorizontal")) == OP_ATOM_glyphOrientationHorizontal);
  verify(DOM_StringToAtom(UNI_L("glyphOrientationHorizontalA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("glyphOrientationVertical")) == OP_ATOM_glyphOrientationVertical);
  verify(DOM_StringToAtom(UNI_L("glyphOrientationVerticalA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("gradientTransform")) == OP_ATOM_gradientTransform);
  verify(DOM_StringToAtom(UNI_L("gradientTransformA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("gradientUnits")) == OP_ATOM_gradientUnits);
  verify(DOM_StringToAtom(UNI_L("gradientUnitsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("green")) == OP_ATOM_green);
  verify(DOM_StringToAtom(UNI_L("greenA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("hash")) == OP_ATOM_hash);
  verify(DOM_StringToAtom(UNI_L("hashA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("head")) == OP_ATOM_head);
  verify(DOM_StringToAtom(UNI_L("headA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("headers")) == OP_ATOM_headers);
  verify(DOM_StringToAtom(UNI_L("headersA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("heading")) == OP_ATOM_heading);
  verify(DOM_StringToAtom(UNI_L("headingA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("height")) == OP_ATOM_height);
  verify(DOM_StringToAtom(UNI_L("heightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("hidden")) == OP_ATOM_hidden);
  verify(DOM_StringToAtom(UNI_L("hiddenA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("high")) == OP_ATOM_high);
  verify(DOM_StringToAtom(UNI_L("highA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("history")) == OP_ATOM_history);
  verify(DOM_StringToAtom(UNI_L("historyA")) == OP_ATOM_UNASSIGNED);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("hits")) == OP_ATOM_hits);
  verify(DOM_StringToAtom(UNI_L("hitsA")) == OP_ATOM_UNASSIGNED);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("home")) == OP_ATOM_home);
  verify(DOM_StringToAtom(UNI_L("homeA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("homePhone")) == OP_ATOM_homePhone);
  verify(DOM_StringToAtom(UNI_L("homePhoneA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("host")) == OP_ATOM_host);
  verify(DOM_StringToAtom(UNI_L("hostA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("hostName")) == OP_ATOM_hostName);
  verify(DOM_StringToAtom(UNI_L("hostNameA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("hostname")) == OP_ATOM_hostname);
  verify(DOM_StringToAtom(UNI_L("hostnameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("href")) == OP_ATOM_href);
  verify(DOM_StringToAtom(UNI_L("hrefA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("hreflang")) == OP_ATOM_hreflang);
  verify(DOM_StringToAtom(UNI_L("hreflangA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("hspace")) == OP_ATOM_hspace);
  verify(DOM_StringToAtom(UNI_L("hspaceA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("htmlFor")) == OP_ATOM_htmlFor);
  verify(DOM_StringToAtom(UNI_L("htmlForA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("httpEquiv")) == OP_ATOM_httpEquiv);
  verify(DOM_StringToAtom(UNI_L("httpEquivA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("icon")) == OP_ATOM_icon);
  verify(DOM_StringToAtom(UNI_L("iconA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("icons")) == OP_ATOM_icons);
  verify(DOM_StringToAtom(UNI_L("iconsA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("id")) == OP_ATOM_id);
  verify(DOM_StringToAtom(UNI_L("idA")) == OP_ATOM_UNASSIGNED);
#if defined GADGET_SUPPORT || defined TOUCH_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("identifier")) == OP_ATOM_identifier);
  verify(DOM_StringToAtom(UNI_L("identifierA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT || TOUCH_EVENTS_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("imageRendering")) == OP_ATOM_imageRendering);
  verify(DOM_StringToAtom(UNI_L("imageRenderingA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("images")) == OP_ATOM_images);
  verify(DOM_StringToAtom(UNI_L("imagesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("implementation")) == OP_ATOM_implementation);
  verify(DOM_StringToAtom(UNI_L("implementationA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("implicitFlush")) == OP_ATOM_implicitFlush);
  verify(DOM_StringToAtom(UNI_L("implicitFlushA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("in1")) == OP_ATOM_in1);
  verify(DOM_StringToAtom(UNI_L("in1A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("in2")) == OP_ATOM_in2);
  verify(DOM_StringToAtom(UNI_L("in2A")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("indeterminate")) == OP_ATOM_indeterminate);
  verify(DOM_StringToAtom(UNI_L("indeterminateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("index")) == OP_ATOM_index);
  verify(DOM_StringToAtom(UNI_L("indexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("innerHTML")) == OP_ATOM_innerHTML);
  verify(DOM_StringToAtom(UNI_L("innerHTMLA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("innerHeight")) == OP_ATOM_innerHeight);
  verify(DOM_StringToAtom(UNI_L("innerHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("innerText")) == OP_ATOM_innerText);
  verify(DOM_StringToAtom(UNI_L("innerTextA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("innerWidth")) == OP_ATOM_innerWidth);
  verify(DOM_StringToAtom(UNI_L("innerWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("input")) == OP_ATOM_input);
  verify(DOM_StringToAtom(UNI_L("inputA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("inputFormat")) == OP_ATOM_inputFormat);
  verify(DOM_StringToAtom(UNI_L("inputFormatA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("inputMethod")) == OP_ATOM_inputMethod);
  verify(DOM_StringToAtom(UNI_L("inputMethodA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("inputmode")) == OP_ATOM_inputmode);
  verify(DOM_StringToAtom(UNI_L("inputmodeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("insertAdjacentHTML")) == OP_ATOM_insertAdjacentHTML);
  verify(DOM_StringToAtom(UNI_L("insertAdjacentHTMLA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("insertAdjacentText")) == OP_ATOM_insertAdjacentText);
  verify(DOM_StringToAtom(UNI_L("insertAdjacentTextA")) == OP_ATOM_UNASSIGNED);
#ifdef DATABASE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("insertId")) == OP_ATOM_insertId);
  verify(DOM_StringToAtom(UNI_L("insertIdA")) == OP_ATOM_UNASSIGNED);
#endif // DATABASE_STORAGE_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("instanceRoot")) == OP_ATOM_instanceRoot);
  verify(DOM_StringToAtom(UNI_L("instanceRootA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("intercept")) == OP_ATOM_intercept);
  verify(DOM_StringToAtom(UNI_L("interceptA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("internalSubset")) == OP_ATOM_internalSubset);
  verify(DOM_StringToAtom(UNI_L("internalSubsetA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("invalidIteratorState")) == OP_ATOM_invalidIteratorState);
  verify(DOM_StringToAtom(UNI_L("invalidIteratorStateA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_XPATH
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("ip")) == OP_ATOM_ip);
  verify(DOM_StringToAtom(UNI_L("ipA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isArchive")) == OP_ATOM_isArchive);
  verify(DOM_StringToAtom(UNI_L("isArchiveA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isAudioPlaying")) == OP_ATOM_isAudioPlaying);
  verify(DOM_StringToAtom(UNI_L("isAudioPlayingA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isBinary")) == OP_ATOM_isBinary);
  verify(DOM_StringToAtom(UNI_L("isBinaryA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isCharging")) == OP_ATOM_isCharging);
  verify(DOM_StringToAtom(UNI_L("isChargingA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_SELECTION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isCollapsed")) == OP_ATOM_isCollapsed);
  verify(DOM_StringToAtom(UNI_L("isCollapsedA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_SELECTION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isContentEditable")) == OP_ATOM_isContentEditable);
  verify(DOM_StringToAtom(UNI_L("isContentEditableA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isDataNetworkConnected")) == OP_ATOM_isDataNetworkConnected);
  verify(DOM_StringToAtom(UNI_L("isDataNetworkConnectedA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#if defined DOM_GADGET_FILE_API_SUPPORT || defined DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isDirectory")) == OP_ATOM_isDirectory);
  verify(DOM_StringToAtom(UNI_L("isDirectoryA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT || DOM_JIL_API_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isEditable")) == OP_ATOM_isEditable);
  verify(DOM_StringToAtom(UNI_L("isEditableA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isElementContentWhitespace")) == OP_ATOM_isElementContentWhitespace);
  verify(DOM_StringToAtom(UNI_L("isElementContentWhitespaceA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isFile")) == OP_ATOM_isFile);
  verify(DOM_StringToAtom(UNI_L("isFileA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("isHidden")) == OP_ATOM_isHidden);
  verify(DOM_StringToAtom(UNI_L("isHiddenA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isLocal")) == OP_ATOM_isLocal);
  verify(DOM_StringToAtom(UNI_L("isLocalA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isMap")) == OP_ATOM_isMap);
  verify(DOM_StringToAtom(UNI_L("isMapA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isMarkup")) == OP_ATOM_isMarkup);
  verify(DOM_StringToAtom(UNI_L("isMarkupA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isOwner")) == OP_ATOM_isOwner);
  verify(DOM_StringToAtom(UNI_L("isOwnerA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("isPaused")) == OP_ATOM_isPaused);
  verify(DOM_StringToAtom(UNI_L("isPausedA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isPlainText")) == OP_ATOM_isPlainText);
  verify(DOM_StringToAtom(UNI_L("isPlainTextA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isProxied")) == OP_ATOM_isProxied);
  verify(DOM_StringToAtom(UNI_L("isProxiedA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isRadioEnabled")) == OP_ATOM_isRadioEnabled);
  verify(DOM_StringToAtom(UNI_L("isRadioEnabledA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("isRead")) == OP_ATOM_isRead);
  verify(DOM_StringToAtom(UNI_L("isReadA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("isRoaming")) == OP_ATOM_isRoaming);
  verify(DOM_StringToAtom(UNI_L("isRoamingA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isSubscribed")) == OP_ATOM_isSubscribed);
  verify(DOM_StringToAtom(UNI_L("isSubscribedA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isTrusted")) == OP_ATOM_isTrusted);
  verify(DOM_StringToAtom(UNI_L("isTrustedA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("isVideoPlaying")) == OP_ATOM_isVideoPlaying);
  verify(DOM_StringToAtom(UNI_L("isVideoPlayingA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("item")) == OP_ATOM_item);
  verify(DOM_StringToAtom(UNI_L("itemA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("itemId")) == OP_ATOM_itemId);
  verify(DOM_StringToAtom(UNI_L("itemIdA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("itemProp")) == OP_ATOM_itemProp);
  verify(DOM_StringToAtom(UNI_L("itemPropA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("itemRef")) == OP_ATOM_itemRef);
  verify(DOM_StringToAtom(UNI_L("itemRefA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("itemScope")) == OP_ATOM_itemScope);
  verify(DOM_StringToAtom(UNI_L("itemScopeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("itemType")) == OP_ATOM_itemType);
  verify(DOM_StringToAtom(UNI_L("itemTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("itemValue")) == OP_ATOM_itemValue);
  verify(DOM_StringToAtom(UNI_L("itemValueA")) == OP_ATOM_UNASSIGNED);
#if defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(DOM_StringToAtom(UNI_L("items")) == OP_ATOM_items);
  verify(DOM_StringToAtom(UNI_L("itemsA")) == OP_ATOM_UNASSIGNED);
#endif // DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(DOM_StringToAtom(UNI_L("justifyContent")) == OP_ATOM_justifyContent);
  verify(DOM_StringToAtom(UNI_L("justifyContentA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("k1")) == OP_ATOM_k1);
  verify(DOM_StringToAtom(UNI_L("k1A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("k2")) == OP_ATOM_k2);
  verify(DOM_StringToAtom(UNI_L("k2A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("k3")) == OP_ATOM_k3);
  verify(DOM_StringToAtom(UNI_L("k3A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("k4")) == OP_ATOM_k4);
  verify(DOM_StringToAtom(UNI_L("k4A")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("keep")) == OP_ATOM_keep);
  verify(DOM_StringToAtom(UNI_L("keepA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("kernelMatrix")) == OP_ATOM_kernelMatrix);
  verify(DOM_StringToAtom(UNI_L("kernelMatrixA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("kernelUnitLengthX")) == OP_ATOM_kernelUnitLengthX);
  verify(DOM_StringToAtom(UNI_L("kernelUnitLengthXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("kernelUnitLengthY")) == OP_ATOM_kernelUnitLengthY);
  verify(DOM_StringToAtom(UNI_L("kernelUnitLengthYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("kerning")) == OP_ATOM_kerning);
  verify(DOM_StringToAtom(UNI_L("kerningA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("key")) == OP_ATOM_key);
  verify(DOM_StringToAtom(UNI_L("keyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("keyCode")) == OP_ATOM_keyCode);
  verify(DOM_StringToAtom(UNI_L("keyCodeA")) == OP_ATOM_UNASSIGNED);
#ifdef CSS_ANIMATIONS
  verify(DOM_StringToAtom(UNI_L("keyText")) == OP_ATOM_keyText);
  verify(DOM_StringToAtom(UNI_L("keyTextA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_ANIMATIONS
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("keypadLightOn")) == OP_ATOM_keypadLightOn);
  verify(DOM_StringToAtom(UNI_L("keypadLightOnA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("keytype")) == OP_ATOM_keytype);
  verify(DOM_StringToAtom(UNI_L("keytypeA")) == OP_ATOM_UNASSIGNED);
#if defined MEDIA_HTML_SUPPORT || defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(DOM_StringToAtom(UNI_L("kind")) == OP_ATOM_kind);
  verify(DOM_StringToAtom(UNI_L("kindA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT || DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(DOM_StringToAtom(UNI_L("label")) == OP_ATOM_label);
  verify(DOM_StringToAtom(UNI_L("labelA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("labels")) == OP_ATOM_labels);
  verify(DOM_StringToAtom(UNI_L("labelsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("lang")) == OP_ATOM_lang);
  verify(DOM_StringToAtom(UNI_L("langA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("language")) == OP_ATOM_language);
  verify(DOM_StringToAtom(UNI_L("languageA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("largeArcFlag")) == OP_ATOM_largeArcFlag);
  verify(DOM_StringToAtom(UNI_L("largeArcFlagA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("lastChild")) == OP_ATOM_lastChild);
  verify(DOM_StringToAtom(UNI_L("lastChildA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("lastElementChild")) == OP_ATOM_lastElementChild);
  verify(DOM_StringToAtom(UNI_L("lastElementChildA")) == OP_ATOM_UNASSIGNED);
#if defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lastEventId")) == OP_ATOM_lastEventId);
  verify(DOM_StringToAtom(UNI_L("lastEventIdA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lastModified")) == OP_ATOM_lastModified);
  verify(DOM_StringToAtom(UNI_L("lastModifiedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("lastModifiedDate")) == OP_ATOM_lastModifiedDate);
  verify(DOM_StringToAtom(UNI_L("lastModifiedDateA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lastModifyDate")) == OP_ATOM_lastModifyDate);
  verify(DOM_StringToAtom(UNI_L("lastModifyDateA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lastPosition")) == OP_ATOM_lastPosition);
  verify(DOM_StringToAtom(UNI_L("lastPositionA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lastUpdate")) == OP_ATOM_lastUpdate);
  verify(DOM_StringToAtom(UNI_L("lastUpdateA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("latitude")) == OP_ATOM_latitude);
  verify(DOM_StringToAtom(UNI_L("latitudeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("left")) == OP_ATOM_left);
  verify(DOM_StringToAtom(UNI_L("leftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("length")) == OP_ATOM_length);
  verify(DOM_StringToAtom(UNI_L("lengthA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("lengthAdjust")) == OP_ATOM_lengthAdjust);
  verify(DOM_StringToAtom(UNI_L("lengthAdjustA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef PROGRESS_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lengthComputable")) == OP_ATOM_lengthComputable);
  verify(DOM_StringToAtom(UNI_L("lengthComputableA")) == OP_ATOM_UNASSIGNED);
#endif // PROGRESS_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("letterSpacing")) == OP_ATOM_letterSpacing);
  verify(DOM_StringToAtom(UNI_L("letterSpacingA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("lightingColor")) == OP_ATOM_lightingColor);
  verify(DOM_StringToAtom(UNI_L("lightingColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("limitingConeAngle")) == OP_ATOM_limitingConeAngle);
  verify(DOM_StringToAtom(UNI_L("limitingConeAngleA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("line")) == OP_ATOM_line);
  verify(DOM_StringToAtom(UNI_L("lineA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lineCap")) == OP_ATOM_lineCap);
  verify(DOM_StringToAtom(UNI_L("lineCapA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lineHeight")) == OP_ATOM_lineHeight);
  verify(DOM_StringToAtom(UNI_L("lineHeightA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("lineIncrement")) == OP_ATOM_lineIncrement);
  verify(DOM_StringToAtom(UNI_L("lineIncrementA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lineJoin")) == OP_ATOM_lineJoin);
  verify(DOM_StringToAtom(UNI_L("lineJoinA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("lineWidth")) == OP_ATOM_lineWidth);
  verify(DOM_StringToAtom(UNI_L("lineWidthA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lineno")) == OP_ATOM_lineno);
  verify(DOM_StringToAtom(UNI_L("linenoA")) == OP_ATOM_UNASSIGNED);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("lines")) == OP_ATOM_lines);
  verify(DOM_StringToAtom(UNI_L("linesA")) == OP_ATOM_UNASSIGNED);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("link")) == OP_ATOM_link);
  verify(DOM_StringToAtom(UNI_L("linkA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("linkColor")) == OP_ATOM_linkColor);
  verify(DOM_StringToAtom(UNI_L("linkColorA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("linkURL")) == OP_ATOM_linkURL);
  verify(DOM_StringToAtom(UNI_L("linkURLA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("links")) == OP_ATOM_links);
  verify(DOM_StringToAtom(UNI_L("linksA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("list")) == OP_ATOM_list);
  verify(DOM_StringToAtom(UNI_L("listA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("listStyle")) == OP_ATOM_listStyle);
  verify(DOM_StringToAtom(UNI_L("listStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("listStyleImage")) == OP_ATOM_listStyleImage);
  verify(DOM_StringToAtom(UNI_L("listStyleImageA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("listStylePosition")) == OP_ATOM_listStylePosition);
  verify(DOM_StringToAtom(UNI_L("listStylePositionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("listStyleType")) == OP_ATOM_listStyleType);
  verify(DOM_StringToAtom(UNI_L("listStyleTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("listener")) == OP_ATOM_listener);
  verify(DOM_StringToAtom(UNI_L("listenerA")) == OP_ATOM_UNASSIGNED);
#ifdef PROGRESS_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("loaded")) == OP_ATOM_loaded);
  verify(DOM_StringToAtom(UNI_L("loadedA")) == OP_ATOM_UNASSIGNED);
#endif // PROGRESS_EVENTS_SUPPORT
#if defined USE_SPDY && defined DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("loadedWithSPDY")) == OP_ATOM_loadedWithSPDY);
  verify(DOM_StringToAtom(UNI_L("loadedWithSPDYA")) == OP_ATOM_UNASSIGNED);
#endif // USE_SPDY && DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("localName")) == OP_ATOM_localName);
  verify(DOM_StringToAtom(UNI_L("localNameA")) == OP_ATOM_UNASSIGNED);
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("localStorage")) == OP_ATOM_localStorage);
  verify(DOM_StringToAtom(UNI_L("localStorageA")) == OP_ATOM_UNASSIGNED);
#endif // CLIENTSIDE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("locale")) == OP_ATOM_locale);
  verify(DOM_StringToAtom(UNI_L("localeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("location")) == OP_ATOM_location);
  verify(DOM_StringToAtom(UNI_L("locationA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("locked")) == OP_ATOM_locked);
  verify(DOM_StringToAtom(UNI_L("lockedA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("logo")) == OP_ATOM_logo);
  verify(DOM_StringToAtom(UNI_L("logoA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("longDesc")) == OP_ATOM_longDesc);
  verify(DOM_StringToAtom(UNI_L("longDescA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("longitude")) == OP_ATOM_longitude);
  verify(DOM_StringToAtom(UNI_L("longitudeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("loop")) == OP_ATOM_loop);
  verify(DOM_StringToAtom(UNI_L("loopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("low")) == OP_ATOM_low);
  verify(DOM_StringToAtom(UNI_L("lowA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("lowsrc")) == OP_ATOM_lowsrc);
  verify(DOM_StringToAtom(UNI_L("lowsrcA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("margin")) == OP_ATOM_margin);
  verify(DOM_StringToAtom(UNI_L("marginA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("marginBottom")) == OP_ATOM_marginBottom);
  verify(DOM_StringToAtom(UNI_L("marginBottomA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("marginHeight")) == OP_ATOM_marginHeight);
  verify(DOM_StringToAtom(UNI_L("marginHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("marginLeft")) == OP_ATOM_marginLeft);
  verify(DOM_StringToAtom(UNI_L("marginLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("marginRight")) == OP_ATOM_marginRight);
  verify(DOM_StringToAtom(UNI_L("marginRightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("marginTop")) == OP_ATOM_marginTop);
  verify(DOM_StringToAtom(UNI_L("marginTopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("marginWidth")) == OP_ATOM_marginWidth);
  verify(DOM_StringToAtom(UNI_L("marginWidthA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("marker")) == OP_ATOM_marker);
  verify(DOM_StringToAtom(UNI_L("markerA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("markerEnd")) == OP_ATOM_markerEnd);
  verify(DOM_StringToAtom(UNI_L("markerEndA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("markerHeight")) == OP_ATOM_markerHeight);
  verify(DOM_StringToAtom(UNI_L("markerHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("markerMid")) == OP_ATOM_markerMid);
  verify(DOM_StringToAtom(UNI_L("markerMidA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("markerOffset")) == OP_ATOM_markerOffset);
  verify(DOM_StringToAtom(UNI_L("markerOffsetA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("markerStart")) == OP_ATOM_markerStart);
  verify(DOM_StringToAtom(UNI_L("markerStartA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("markerUnits")) == OP_ATOM_markerUnits);
  verify(DOM_StringToAtom(UNI_L("markerUnitsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("markerWidth")) == OP_ATOM_markerWidth);
  verify(DOM_StringToAtom(UNI_L("markerWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("mask")) == OP_ATOM_mask);
  verify(DOM_StringToAtom(UNI_L("maskA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("maskContentUnits")) == OP_ATOM_maskContentUnits);
  verify(DOM_StringToAtom(UNI_L("maskContentUnitsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("maskUnits")) == OP_ATOM_maskUnits);
  verify(DOM_StringToAtom(UNI_L("maskUnitsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("matches")) == OP_ATOM_matches);
  verify(DOM_StringToAtom(UNI_L("matchesA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("matrix")) == OP_ATOM_matrix);
  verify(DOM_StringToAtom(UNI_L("matrixA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("max")) == OP_ATOM_max);
  verify(DOM_StringToAtom(UNI_L("maxA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("maxAge")) == OP_ATOM_maxAge);
  verify(DOM_StringToAtom(UNI_L("maxAgeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("maxEntries")) == OP_ATOM_maxEntries);
  verify(DOM_StringToAtom(UNI_L("maxEntriesA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("maxHeight")) == OP_ATOM_maxHeight);
  verify(DOM_StringToAtom(UNI_L("maxHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("maxLength")) == OP_ATOM_maxLength);
  verify(DOM_StringToAtom(UNI_L("maxLengthA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("maxPathLength")) == OP_ATOM_maxPathLength);
  verify(DOM_StringToAtom(UNI_L("maxPathLengthA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("maxSize")) == OP_ATOM_maxSize);
  verify(DOM_StringToAtom(UNI_L("maxSizeA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined UPNP_SUPPORT || (defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL)
  verify(DOM_StringToAtom(UNI_L("maxUploadRate")) == OP_ATOM_maxUploadRate);
  verify(DOM_StringToAtom(UNI_L("maxUploadRateA")) == OP_ATOM_UNASSIGNED);
#endif // UPNP_SUPPORT || GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("maxWidth")) == OP_ATOM_maxWidth);
  verify(DOM_StringToAtom(UNI_L("maxWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("maxZoom")) == OP_ATOM_maxZoom);
  verify(DOM_StringToAtom(UNI_L("maxZoomA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("media")) == OP_ATOM_media);
  verify(DOM_StringToAtom(UNI_L("mediaA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("mediaText")) == OP_ATOM_mediaText);
  verify(DOM_StringToAtom(UNI_L("mediaTextA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("mediaType")) == OP_ATOM_mediaType);
  verify(DOM_StringToAtom(UNI_L("mediaTypeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("meetOrSlice")) == OP_ATOM_meetOrSlice);
  verify(DOM_StringToAtom(UNI_L("meetOrSliceA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("menu")) == OP_ATOM_menu);
  verify(DOM_StringToAtom(UNI_L("menuA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("menubar")) == OP_ATOM_menubar);
  verify(DOM_StringToAtom(UNI_L("menubarA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("message")) == OP_ATOM_message);
  verify(DOM_StringToAtom(UNI_L("messageA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("messageId")) == OP_ATOM_messageId);
  verify(DOM_StringToAtom(UNI_L("messageIdA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("messagePriority")) == OP_ATOM_messagePriority);
  verify(DOM_StringToAtom(UNI_L("messagePriorityA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("messageType")) == OP_ATOM_messageType);
  verify(DOM_StringToAtom(UNI_L("messageTypeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("metaData")) == OP_ATOM_metaData);
  verify(DOM_StringToAtom(UNI_L("metaDataA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("metaKey")) == OP_ATOM_metaKey);
  verify(DOM_StringToAtom(UNI_L("metaKeyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("method")) == OP_ATOM_method);
  verify(DOM_StringToAtom(UNI_L("methodA")) == OP_ATOM_UNASSIGNED);
#ifdef ESUTILS_PROFILER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("millisecondsSelf")) == OP_ATOM_millisecondsSelf);
  verify(DOM_StringToAtom(UNI_L("millisecondsSelfA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("millisecondsTotal")) == OP_ATOM_millisecondsTotal);
  verify(DOM_StringToAtom(UNI_L("millisecondsTotalA")) == OP_ATOM_UNASSIGNED);
#endif // ESUTILS_PROFILER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("mimeTypes")) == OP_ATOM_mimeTypes);
  verify(DOM_StringToAtom(UNI_L("mimeTypesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("min")) == OP_ATOM_min);
  verify(DOM_StringToAtom(UNI_L("minA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("minHeight")) == OP_ATOM_minHeight);
  verify(DOM_StringToAtom(UNI_L("minHeightA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("minUpdateInterval")) == OP_ATOM_minUpdateInterval);
  verify(DOM_StringToAtom(UNI_L("minUpdateIntervalA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("minWidth")) == OP_ATOM_minWidth);
  verify(DOM_StringToAtom(UNI_L("minWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("minZoom")) == OP_ATOM_minZoom);
  verify(DOM_StringToAtom(UNI_L("minZoomA")) == OP_ATOM_UNASSIGNED);
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("miterLimit")) == OP_ATOM_miterLimit);
  verify(DOM_StringToAtom(UNI_L("miterLimitA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("mobilePhone")) == OP_ATOM_mobilePhone);
  verify(DOM_StringToAtom(UNI_L("mobilePhoneA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("mode")) == OP_ATOM_mode);
  verify(DOM_StringToAtom(UNI_L("modeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("modified")) == OP_ATOM_modified);
  verify(DOM_StringToAtom(UNI_L("modifiedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("mountPoints")) == OP_ATOM_mountPoints);
  verify(DOM_StringToAtom(UNI_L("mountPointsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("moveBy")) == OP_ATOM_moveBy);
  verify(DOM_StringToAtom(UNI_L("moveByA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("moveTo")) == OP_ATOM_moveTo);
  verify(DOM_StringToAtom(UNI_L("moveToA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("msgRingtoneVolume")) == OP_ATOM_msgRingtoneVolume);
  verify(DOM_StringToAtom(UNI_L("msgRingtoneVolumeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("multiple")) == OP_ATOM_multiple);
  verify(DOM_StringToAtom(UNI_L("multipleA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("muted")) == OP_ATOM_muted);
  verify(DOM_StringToAtom(UNI_L("mutedA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("name")) == OP_ATOM_name);
  verify(DOM_StringToAtom(UNI_L("nameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("namedItem")) == OP_ATOM_namedItem);
  verify(DOM_StringToAtom(UNI_L("namedItemA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("names")) == OP_ATOM_names);
  verify(DOM_StringToAtom(UNI_L("namesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("namespaceURI")) == OP_ATOM_namespaceURI);
  verify(DOM_StringToAtom(UNI_L("namespaceURIA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("nativePath")) == OP_ATOM_nativePath);
  verify(DOM_StringToAtom(UNI_L("nativePathA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("naturalHeight")) == OP_ATOM_naturalHeight);
  verify(DOM_StringToAtom(UNI_L("naturalHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("naturalWidth")) == OP_ATOM_naturalWidth);
  verify(DOM_StringToAtom(UNI_L("naturalWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("navDown")) == OP_ATOM_navDown);
  verify(DOM_StringToAtom(UNI_L("navDownA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("navIndex")) == OP_ATOM_navIndex);
  verify(DOM_StringToAtom(UNI_L("navIndexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("navLeft")) == OP_ATOM_navLeft);
  verify(DOM_StringToAtom(UNI_L("navLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("navRight")) == OP_ATOM_navRight);
  verify(DOM_StringToAtom(UNI_L("navRightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("navUp")) == OP_ATOM_navUp);
  verify(DOM_StringToAtom(UNI_L("navUpA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("navigationMode")) == OP_ATOM_navigationMode);
  verify(DOM_StringToAtom(UNI_L("navigationModeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("navigator")) == OP_ATOM_navigator);
  verify(DOM_StringToAtom(UNI_L("navigatorA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("nearestViewportElement")) == OP_ATOM_nearestViewportElement);
  verify(DOM_StringToAtom(UNI_L("nearestViewportElementA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("networkConnectionType")) == OP_ATOM_networkConnectionType);
  verify(DOM_StringToAtom(UNI_L("networkConnectionTypeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("networkState")) == OP_ATOM_networkState);
  verify(DOM_StringToAtom(UNI_L("networkStateA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM3_LOAD
  verify(DOM_StringToAtom(UNI_L("newDocument")) == OP_ATOM_newDocument);
  verify(DOM_StringToAtom(UNI_L("newDocumentA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_LOAD
#if defined DOM3_SAVE || defined DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("newLine")) == OP_ATOM_newLine);
  verify(DOM_StringToAtom(UNI_L("newLineA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_SAVE || DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("newURL")) == OP_ATOM_newURL);
  verify(DOM_StringToAtom(UNI_L("newURLA")) == OP_ATOM_UNASSIGNED);
#if defined DOM2_MUTATION_EVENTS || defined CLIENTSIDE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("newValue")) == OP_ATOM_newValue);
  verify(DOM_StringToAtom(UNI_L("newValueA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_MUTATION_EVENTS || CLIENTSIDE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("next")) == OP_ATOM_next);
  verify(DOM_StringToAtom(UNI_L("nextA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("nextElementSibling")) == OP_ATOM_nextElementSibling);
  verify(DOM_StringToAtom(UNI_L("nextElementSiblingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("nextSibling")) == OP_ATOM_nextSibling);
  verify(DOM_StringToAtom(UNI_L("nextSiblingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("noHref")) == OP_ATOM_noHref);
  verify(DOM_StringToAtom(UNI_L("noHrefA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("noResize")) == OP_ATOM_noResize);
  verify(DOM_StringToAtom(UNI_L("noResizeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("noShade")) == OP_ATOM_noShade);
  verify(DOM_StringToAtom(UNI_L("noShadeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("noValidate")) == OP_ATOM_noValidate);
  verify(DOM_StringToAtom(UNI_L("noValidateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("noWrap")) == OP_ATOM_noWrap);
  verify(DOM_StringToAtom(UNI_L("noWrapA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("nodeName")) == OP_ATOM_nodeName);
  verify(DOM_StringToAtom(UNI_L("nodeNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("nodeType")) == OP_ATOM_nodeType);
  verify(DOM_StringToAtom(UNI_L("nodeTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("nodeValue")) == OP_ATOM_nodeValue);
  verify(DOM_StringToAtom(UNI_L("nodeValueA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("normalizedPathSegList")) == OP_ATOM_normalizedPathSegList);
  verify(DOM_StringToAtom(UNI_L("normalizedPathSegListA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("notationName")) == OP_ATOM_notationName);
  verify(DOM_StringToAtom(UNI_L("notationNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("notations")) == OP_ATOM_notations);
  verify(DOM_StringToAtom(UNI_L("notationsA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("numOctaves")) == OP_ATOM_numOctaves);
  verify(DOM_StringToAtom(UNI_L("numOctavesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("numberOfItems")) == OP_ATOM_numberOfItems);
  verify(DOM_StringToAtom(UNI_L("numberOfItemsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("numberOfSegments")) == OP_ATOM_numberOfSegments);
  verify(DOM_StringToAtom(UNI_L("numberOfSegmentsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("numberValue")) == OP_ATOM_numberValue);
  verify(DOM_StringToAtom(UNI_L("numberValueA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("object")) == OP_ATOM_object);
  verify(DOM_StringToAtom(UNI_L("objectA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("offset")) == OP_ATOM_offset);
  verify(DOM_StringToAtom(UNI_L("offsetA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("offsetHeight")) == OP_ATOM_offsetHeight);
  verify(DOM_StringToAtom(UNI_L("offsetHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("offsetLeft")) == OP_ATOM_offsetLeft);
  verify(DOM_StringToAtom(UNI_L("offsetLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("offsetParent")) == OP_ATOM_offsetParent);
  verify(DOM_StringToAtom(UNI_L("offsetParentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("offsetTop")) == OP_ATOM_offsetTop);
  verify(DOM_StringToAtom(UNI_L("offsetTopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("offsetWidth")) == OP_ATOM_offsetWidth);
  verify(DOM_StringToAtom(UNI_L("offsetWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("offsetX")) == OP_ATOM_offsetX);
  verify(DOM_StringToAtom(UNI_L("offsetXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("offsetY")) == OP_ATOM_offsetY);
  verify(DOM_StringToAtom(UNI_L("offsetYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("oldURL")) == OP_ATOM_oldURL);
  verify(DOM_StringToAtom(UNI_L("oldURLA")) == OP_ATOM_UNASSIGNED);
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("oldValue")) == OP_ATOM_oldValue);
  verify(DOM_StringToAtom(UNI_L("oldValueA")) == OP_ATOM_UNASSIGNED);
#endif // CLIENTSIDE_STORAGE_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onAddressBookItemsFound")) == OP_ATOM_onAddressBookItemsFound);
  verify(DOM_StringToAtom(UNI_L("onAddressBookItemsFoundA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onCalendarItemAlert")) == OP_ATOM_onCalendarItemAlert);
  verify(DOM_StringToAtom(UNI_L("onCalendarItemAlertA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onCalendarItemsFound")) == OP_ATOM_onCalendarItemsFound);
  verify(DOM_StringToAtom(UNI_L("onCalendarItemsFoundA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onCallEvent")) == OP_ATOM_onCallEvent);
  verify(DOM_StringToAtom(UNI_L("onCallEventA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onCallRecordsFound")) == OP_ATOM_onCallRecordsFound);
  verify(DOM_StringToAtom(UNI_L("onCallRecordsFoundA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onCameraCaptured")) == OP_ATOM_onCameraCaptured);
  verify(DOM_StringToAtom(UNI_L("onCameraCapturedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onChargeLevelChange")) == OP_ATOM_onChargeLevelChange);
  verify(DOM_StringToAtom(UNI_L("onChargeLevelChangeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onChargeStateChange")) == OP_ATOM_onChargeStateChange);
  verify(DOM_StringToAtom(UNI_L("onChargeStateChangeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onFilesFound")) == OP_ATOM_onFilesFound);
  verify(DOM_StringToAtom(UNI_L("onFilesFoundA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onFocus")) == OP_ATOM_onFocus);
  verify(DOM_StringToAtom(UNI_L("onFocusA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onLine")) == OP_ATOM_onLine);
  verify(DOM_StringToAtom(UNI_L("onLineA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onLowBattery")) == OP_ATOM_onLowBattery);
  verify(DOM_StringToAtom(UNI_L("onLowBatteryA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onMaximize")) == OP_ATOM_onMaximize);
  verify(DOM_StringToAtom(UNI_L("onMaximizeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onMessageArrived")) == OP_ATOM_onMessageArrived);
  verify(DOM_StringToAtom(UNI_L("onMessageArrivedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onMessageSendingFailure")) == OP_ATOM_onMessageSendingFailure);
  verify(DOM_StringToAtom(UNI_L("onMessageSendingFailureA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onMessagesFound")) == OP_ATOM_onMessagesFound);
  verify(DOM_StringToAtom(UNI_L("onMessagesFoundA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onNetworkConnectionChanged")) == OP_ATOM_onNetworkConnectionChanged);
  verify(DOM_StringToAtom(UNI_L("onNetworkConnectionChangedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onPositionRetrieved")) == OP_ATOM_onPositionRetrieved);
  verify(DOM_StringToAtom(UNI_L("onPositionRetrievedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onRestore")) == OP_ATOM_onRestore);
  verify(DOM_StringToAtom(UNI_L("onRestoreA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onScreenChangeDimensions")) == OP_ATOM_onScreenChangeDimensions);
  verify(DOM_StringToAtom(UNI_L("onScreenChangeDimensionsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onSignalSourceChange")) == OP_ATOM_onSignalSourceChange);
  verify(DOM_StringToAtom(UNI_L("onSignalSourceChangeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onStateChange")) == OP_ATOM_onStateChange);
  verify(DOM_StringToAtom(UNI_L("onStateChangeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onVCardExportingFinish")) == OP_ATOM_onVCardExportingFinish);
  verify(DOM_StringToAtom(UNI_L("onVCardExportingFinishA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("onWakeup")) == OP_ATOM_onWakeup);
  verify(DOM_StringToAtom(UNI_L("onWakeupA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onaddtrack")) == OP_ATOM_onaddtrack);
  verify(DOM_StringToAtom(UNI_L("onaddtrackA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onafterupdate")) == OP_ATOM_onafterupdate);
  verify(DOM_StringToAtom(UNI_L("onafterupdateA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef OPERA_AUTH_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onauthenticationchange")) == OP_ATOM_onauthenticationchange);
  verify(DOM_StringToAtom(UNI_L("onauthenticationchangeA")) == OP_ATOM_UNASSIGNED);
#endif // OPERA_AUTH_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onbeforeupdate")) == OP_ATOM_onbeforeupdate);
  verify(DOM_StringToAtom(UNI_L("onbeforeupdateA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onclose")) == OP_ATOM_onclose);
  verify(DOM_StringToAtom(UNI_L("oncloseA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSOCKETS_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onconnect")) == OP_ATOM_onconnect);
  verify(DOM_StringToAtom(UNI_L("onconnectA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("oncreate")) == OP_ATOM_oncreate);
  verify(DOM_StringToAtom(UNI_L("oncreateA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("oncuechange")) == OP_ATOM_oncuechange);
  verify(DOM_StringToAtom(UNI_L("oncuechangeA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("ondisconnect")) == OP_ATOM_ondisconnect);
  verify(DOM_StringToAtom(UNI_L("ondisconnectA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("ondragstart")) == OP_ATOM_ondragstart);
  verify(DOM_StringToAtom(UNI_L("ondragstartA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ondragstop")) == OP_ATOM_ondragstop);
  verify(DOM_StringToAtom(UNI_L("ondragstopA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onenter")) == OP_ATOM_onenter);
  verify(DOM_StringToAtom(UNI_L("onenterA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onerror")) == OP_ATOM_onerror);
  verify(DOM_StringToAtom(UNI_L("onerrorA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onexit")) == OP_ATOM_onexit);
  verify(DOM_StringToAtom(UNI_L("onexitA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onfocus")) == OP_ATOM_onfocus);
  verify(DOM_StringToAtom(UNI_L("onfocusA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onhide")) == OP_ATOM_onhide);
  verify(DOM_StringToAtom(UNI_L("onhideA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onload")) == OP_ATOM_onload);
  verify(DOM_StringToAtom(UNI_L("onloadA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onmessage")) == OP_ATOM_onmessage);
  verify(DOM_StringToAtom(UNI_L("onmessageA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_WEBWORKERS_SUPPORT || DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onmove")) == OP_ATOM_onmove);
  verify(DOM_StringToAtom(UNI_L("onmoveA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onopen")) == OP_ATOM_onopen);
  verify(DOM_StringToAtom(UNI_L("onopenA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSOCKETS_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("onrangechange")) == OP_ATOM_onrangechange);
  verify(DOM_StringToAtom(UNI_L("onrangechangeA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onrefresh")) == OP_ATOM_onrefresh);
  verify(DOM_StringToAtom(UNI_L("onrefreshA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onremove")) == OP_ATOM_onremove);
  verify(DOM_StringToAtom(UNI_L("onremoveA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onremovetrack")) == OP_ATOM_onremovetrack);
  verify(DOM_StringToAtom(UNI_L("onremovetrackA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onshow")) == OP_ATOM_onshow);
  verify(DOM_StringToAtom(UNI_L("onshowA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onthread")) == OP_ATOM_onthread);
  verify(DOM_StringToAtom(UNI_L("onthreadA")) == OP_ATOM_UNASSIGNED);
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onupdate")) == OP_ATOM_onupdate);
  verify(DOM_StringToAtom(UNI_L("onupdateA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("onviewstatechanged")) == OP_ATOM_onviewstatechanged);
  verify(DOM_StringToAtom(UNI_L("onviewstatechangedA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("opacity")) == OP_ATOM_opacity);
  verify(DOM_StringToAtom(UNI_L("opacityA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("opener")) == OP_ATOM_opener);
  verify(DOM_StringToAtom(UNI_L("openerA")) == OP_ATOM_UNASSIGNED);
#ifdef CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("operationType")) == OP_ATOM_operationType);
  verify(DOM_StringToAtom(UNI_L("operationTypeA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_TRANSFORMS
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("operator")) == OP_ATOM_operator);
  verify(DOM_StringToAtom(UNI_L("operatorA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("optimum")) == OP_ATOM_optimum);
  verify(DOM_StringToAtom(UNI_L("optimumA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("options")) == OP_ATOM_options);
  verify(DOM_StringToAtom(UNI_L("optionsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("order")) == OP_ATOM_order);
  verify(DOM_StringToAtom(UNI_L("orderA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("orderX")) == OP_ATOM_orderX);
  verify(DOM_StringToAtom(UNI_L("orderXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("orderY")) == OP_ATOM_orderY);
  verify(DOM_StringToAtom(UNI_L("orderYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("orientAngle")) == OP_ATOM_orientAngle);
  verify(DOM_StringToAtom(UNI_L("orientAngleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("orientType")) == OP_ATOM_orientType);
  verify(DOM_StringToAtom(UNI_L("orientTypeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("orientation")) == OP_ATOM_orientation);
  verify(DOM_StringToAtom(UNI_L("orientationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("origin")) == OP_ATOM_origin);
  verify(DOM_StringToAtom(UNI_L("originA")) == OP_ATOM_UNASSIGNED);
#if defined(GADGET_SUPPORT) || defined(WEBSERVER_SUPPORT)
  verify(DOM_StringToAtom(UNI_L("originURL")) == OP_ATOM_originURL);
  verify(DOM_StringToAtom(UNI_L("originURLA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT || WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("orphans")) == OP_ATOM_orphans);
  verify(DOM_StringToAtom(UNI_L("orphansA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outerHTML")) == OP_ATOM_outerHTML);
  verify(DOM_StringToAtom(UNI_L("outerHTMLA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outerHeight")) == OP_ATOM_outerHeight);
  verify(DOM_StringToAtom(UNI_L("outerHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outerText")) == OP_ATOM_outerText);
  verify(DOM_StringToAtom(UNI_L("outerTextA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outerWidth")) == OP_ATOM_outerWidth);
  verify(DOM_StringToAtom(UNI_L("outerWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outline")) == OP_ATOM_outline);
  verify(DOM_StringToAtom(UNI_L("outlineA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outlineColor")) == OP_ATOM_outlineColor);
  verify(DOM_StringToAtom(UNI_L("outlineColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outlineOffset")) == OP_ATOM_outlineOffset);
  verify(DOM_StringToAtom(UNI_L("outlineOffsetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outlineStyle")) == OP_ATOM_outlineStyle);
  verify(DOM_StringToAtom(UNI_L("outlineStyleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("outlineWidth")) == OP_ATOM_outlineWidth);
  verify(DOM_StringToAtom(UNI_L("outlineWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("output")) == OP_ATOM_output);
  verify(DOM_StringToAtom(UNI_L("outputA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("overflow")) == OP_ATOM_overflow);
  verify(DOM_StringToAtom(UNI_L("overflowA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("overflowWrap")) == OP_ATOM_overflowWrap);
  verify(DOM_StringToAtom(UNI_L("overflowWrapA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("overflowX")) == OP_ATOM_overflowX);
  verify(DOM_StringToAtom(UNI_L("overflowXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("overflowY")) == OP_ATOM_overflowY);
  verify(DOM_StringToAtom(UNI_L("overflowYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ownerDocument")) == OP_ATOM_ownerDocument);
  verify(DOM_StringToAtom(UNI_L("ownerDocumentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ownerElement")) == OP_ATOM_ownerElement);
  verify(DOM_StringToAtom(UNI_L("ownerElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ownerNode")) == OP_ATOM_ownerNode);
  verify(DOM_StringToAtom(UNI_L("ownerNodeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ownerRule")) == OP_ATOM_ownerRule);
  verify(DOM_StringToAtom(UNI_L("ownerRuleA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("ownerSVGElement")) == OP_ATOM_ownerSVGElement);
  verify(DOM_StringToAtom(UNI_L("ownerSVGElementA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("padding")) == OP_ATOM_padding);
  verify(DOM_StringToAtom(UNI_L("paddingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("paddingBottom")) == OP_ATOM_paddingBottom);
  verify(DOM_StringToAtom(UNI_L("paddingBottomA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("paddingLeft")) == OP_ATOM_paddingLeft);
  verify(DOM_StringToAtom(UNI_L("paddingLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("paddingRight")) == OP_ATOM_paddingRight);
  verify(DOM_StringToAtom(UNI_L("paddingRightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("paddingTop")) == OP_ATOM_paddingTop);
  verify(DOM_StringToAtom(UNI_L("paddingTopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("page")) == OP_ATOM_page);
  verify(DOM_StringToAtom(UNI_L("pageA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pageBreakAfter")) == OP_ATOM_pageBreakAfter);
  verify(DOM_StringToAtom(UNI_L("pageBreakAfterA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pageBreakBefore")) == OP_ATOM_pageBreakBefore);
  verify(DOM_StringToAtom(UNI_L("pageBreakBeforeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pageBreakInside")) == OP_ATOM_pageBreakInside);
  verify(DOM_StringToAtom(UNI_L("pageBreakInsideA")) == OP_ATOM_UNASSIGNED);
#ifdef PAGED_MEDIA_SUPPORT
  verify(DOM_StringToAtom(UNI_L("pageCount")) == OP_ATOM_pageCount);
  verify(DOM_StringToAtom(UNI_L("pageCountA")) == OP_ATOM_UNASSIGNED);
#endif // PAGED_MEDIA_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("pageURL")) == OP_ATOM_pageURL);
  verify(DOM_StringToAtom(UNI_L("pageURLA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("pageX")) == OP_ATOM_pageX);
  verify(DOM_StringToAtom(UNI_L("pageXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pageXOffset")) == OP_ATOM_pageXOffset);
  verify(DOM_StringToAtom(UNI_L("pageXOffsetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pageY")) == OP_ATOM_pageY);
  verify(DOM_StringToAtom(UNI_L("pageYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pageYOffset")) == OP_ATOM_pageYOffset);
  verify(DOM_StringToAtom(UNI_L("pageYOffsetA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("paintType")) == OP_ATOM_paintType);
  verify(DOM_StringToAtom(UNI_L("paintTypeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("parameterNames")) == OP_ATOM_parameterNames);
  verify(DOM_StringToAtom(UNI_L("parameterNamesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("parent")) == OP_ATOM_parent);
  verify(DOM_StringToAtom(UNI_L("parentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("parentElement")) == OP_ATOM_parentElement);
  verify(DOM_StringToAtom(UNI_L("parentElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("parentNode")) == OP_ATOM_parentNode);
  verify(DOM_StringToAtom(UNI_L("parentNodeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("parentRule")) == OP_ATOM_parentRule);
  verify(DOM_StringToAtom(UNI_L("parentRuleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("parentStyleSheet")) == OP_ATOM_parentStyleSheet);
  verify(DOM_StringToAtom(UNI_L("parentStyleSheetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("parentWindow")) == OP_ATOM_parentWindow);
  verify(DOM_StringToAtom(UNI_L("parentWindowA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("passwordProtected")) == OP_ATOM_passwordProtected);
  verify(DOM_StringToAtom(UNI_L("passwordProtectedA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("path")) == OP_ATOM_path);
  verify(DOM_StringToAtom(UNI_L("pathA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("pathLength")) == OP_ATOM_pathLength);
  verify(DOM_StringToAtom(UNI_L("pathLengthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pathSegList")) == OP_ATOM_pathSegList);
  verify(DOM_StringToAtom(UNI_L("pathSegListA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pathSegType")) == OP_ATOM_pathSegType);
  verify(DOM_StringToAtom(UNI_L("pathSegTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pathSegTypeAsLetter")) == OP_ATOM_pathSegTypeAsLetter);
  verify(DOM_StringToAtom(UNI_L("pathSegTypeAsLetterA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("pathname")) == OP_ATOM_pathname);
  verify(DOM_StringToAtom(UNI_L("pathnameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pattern")) == OP_ATOM_pattern);
  verify(DOM_StringToAtom(UNI_L("patternA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("patternContentUnits")) == OP_ATOM_patternContentUnits);
  verify(DOM_StringToAtom(UNI_L("patternContentUnitsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("patternMismatch")) == OP_ATOM_patternMismatch);
  verify(DOM_StringToAtom(UNI_L("patternMismatchA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("patternTransform")) == OP_ATOM_patternTransform);
  verify(DOM_StringToAtom(UNI_L("patternTransformA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("patternUnits")) == OP_ATOM_patternUnits);
  verify(DOM_StringToAtom(UNI_L("patternUnitsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("pauseOnExit")) == OP_ATOM_pauseOnExit);
  verify(DOM_StringToAtom(UNI_L("pauseOnExitA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("paused")) == OP_ATOM_paused);
  verify(DOM_StringToAtom(UNI_L("pausedA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("percentRemaining")) == OP_ATOM_percentRemaining);
  verify(DOM_StringToAtom(UNI_L("percentRemainingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneColorDepthDefault")) == OP_ATOM_phoneColorDepthDefault);
  verify(DOM_StringToAtom(UNI_L("phoneColorDepthDefaultA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneFirmware")) == OP_ATOM_phoneFirmware);
  verify(DOM_StringToAtom(UNI_L("phoneFirmwareA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneMSISDN")) == OP_ATOM_phoneMSISDN);
  verify(DOM_StringToAtom(UNI_L("phoneMSISDNA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneManufacturer")) == OP_ATOM_phoneManufacturer);
  verify(DOM_StringToAtom(UNI_L("phoneManufacturerA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneModel")) == OP_ATOM_phoneModel);
  verify(DOM_StringToAtom(UNI_L("phoneModelA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneOS")) == OP_ATOM_phoneOS);
  verify(DOM_StringToAtom(UNI_L("phoneOSA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneOperatorName")) == OP_ATOM_phoneOperatorName);
  verify(DOM_StringToAtom(UNI_L("phoneOperatorNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneScreenHeightDefault")) == OP_ATOM_phoneScreenHeightDefault);
  verify(DOM_StringToAtom(UNI_L("phoneScreenHeightDefaultA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneScreenWidthDefault")) == OP_ATOM_phoneScreenWidthDefault);
  verify(DOM_StringToAtom(UNI_L("phoneScreenWidthDefaultA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneSoftware")) == OP_ATOM_phoneSoftware);
  verify(DOM_StringToAtom(UNI_L("phoneSoftwareA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("phoneUserUniqueId")) == OP_ATOM_phoneUserUniqueId);
  verify(DOM_StringToAtom(UNI_L("phoneUserUniqueIdA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("pixelBottom")) == OP_ATOM_pixelBottom);
  verify(DOM_StringToAtom(UNI_L("pixelBottomA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pixelDepth")) == OP_ATOM_pixelDepth);
  verify(DOM_StringToAtom(UNI_L("pixelDepthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pixelHeight")) == OP_ATOM_pixelHeight);
  verify(DOM_StringToAtom(UNI_L("pixelHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pixelLeft")) == OP_ATOM_pixelLeft);
  verify(DOM_StringToAtom(UNI_L("pixelLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pixelRight")) == OP_ATOM_pixelRight);
  verify(DOM_StringToAtom(UNI_L("pixelRightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pixelTop")) == OP_ATOM_pixelTop);
  verify(DOM_StringToAtom(UNI_L("pixelTopA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("pixelUnitToMillimeterX")) == OP_ATOM_pixelUnitToMillimeterX);
  verify(DOM_StringToAtom(UNI_L("pixelUnitToMillimeterXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pixelUnitToMillimeterY")) == OP_ATOM_pixelUnitToMillimeterY);
  verify(DOM_StringToAtom(UNI_L("pixelUnitToMillimeterYA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("pixelWidth")) == OP_ATOM_pixelWidth);
  verify(DOM_StringToAtom(UNI_L("pixelWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("placeholder")) == OP_ATOM_placeholder);
  verify(DOM_StringToAtom(UNI_L("placeholderA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("platform")) == OP_ATOM_platform);
  verify(DOM_StringToAtom(UNI_L("platformA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("playbackRate")) == OP_ATOM_playbackRate);
  verify(DOM_StringToAtom(UNI_L("playbackRateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("played")) == OP_ATOM_played);
  verify(DOM_StringToAtom(UNI_L("playedA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("plugins")) == OP_ATOM_plugins);
  verify(DOM_StringToAtom(UNI_L("pluginsA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("pointerEvents")) == OP_ATOM_pointerEvents);
  verify(DOM_StringToAtom(UNI_L("pointerEventsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("points")) == OP_ATOM_points);
  verify(DOM_StringToAtom(UNI_L("pointsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pointsAtX")) == OP_ATOM_pointsAtX);
  verify(DOM_StringToAtom(UNI_L("pointsAtXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pointsAtY")) == OP_ATOM_pointsAtY);
  verify(DOM_StringToAtom(UNI_L("pointsAtYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("pointsAtZ")) == OP_ATOM_pointsAtZ);
  verify(DOM_StringToAtom(UNI_L("pointsAtZA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("popup")) == OP_ATOM_popup);
  verify(DOM_StringToAtom(UNI_L("popupA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("port")) == OP_ATOM_port);
  verify(DOM_StringToAtom(UNI_L("portA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(DOM_StringToAtom(UNI_L("port1")) == OP_ATOM_port1);
  verify(DOM_StringToAtom(UNI_L("port1A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("port2")) == OP_ATOM_port2);
  verify(DOM_StringToAtom(UNI_L("port2A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ports")) == OP_ATOM_ports);
  verify(DOM_StringToAtom(UNI_L("portsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_CROSSDOCUMENT_MESSAGING_SUPPORT
  verify(DOM_StringToAtom(UNI_L("posBottom")) == OP_ATOM_posBottom);
  verify(DOM_StringToAtom(UNI_L("posBottomA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("posHeight")) == OP_ATOM_posHeight);
  verify(DOM_StringToAtom(UNI_L("posHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("posLeft")) == OP_ATOM_posLeft);
  verify(DOM_StringToAtom(UNI_L("posLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("posRight")) == OP_ATOM_posRight);
  verify(DOM_StringToAtom(UNI_L("posRightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("posTop")) == OP_ATOM_posTop);
  verify(DOM_StringToAtom(UNI_L("posTopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("posWidth")) == OP_ATOM_posWidth);
  verify(DOM_StringToAtom(UNI_L("posWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("position")) == OP_ATOM_position);
  verify(DOM_StringToAtom(UNI_L("positionA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("poster")) == OP_ATOM_poster);
  verify(DOM_StringToAtom(UNI_L("posterA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("preferences")) == OP_ATOM_preferences);
  verify(DOM_StringToAtom(UNI_L("preferencesA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("prefetchPrimaryLink")) == OP_ATOM_prefetchPrimaryLink);
  verify(DOM_StringToAtom(UNI_L("prefetchPrimaryLinkA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("prefix")) == OP_ATOM_prefix);
  verify(DOM_StringToAtom(UNI_L("prefixA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("preload")) == OP_ATOM_preload);
  verify(DOM_StringToAtom(UNI_L("preloadA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("premultipliedAlpha")) == OP_ATOM_premultipliedAlpha);
  verify(DOM_StringToAtom(UNI_L("premultipliedAlphaA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS3D_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("preserveAlpha")) == OP_ATOM_preserveAlpha);
  verify(DOM_StringToAtom(UNI_L("preserveAlphaA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("preserveAspectRatio")) == OP_ATOM_preserveAspectRatio);
  verify(DOM_StringToAtom(UNI_L("preserveAspectRatioA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("preserveDrawingBuffer")) == OP_ATOM_preserveDrawingBuffer);
  verify(DOM_StringToAtom(UNI_L("preserveDrawingBufferA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS3D_SUPPORT
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("prevPosition")) == OP_ATOM_prevPosition);
  verify(DOM_StringToAtom(UNI_L("prevPositionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("prevTabGroup")) == OP_ATOM_prevTabGroup);
  verify(DOM_StringToAtom(UNI_L("prevTabGroupA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef DOM2_MUTATION_EVENTS
  verify(DOM_StringToAtom(UNI_L("prevValue")) == OP_ATOM_prevValue);
  verify(DOM_StringToAtom(UNI_L("prevValueA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_MUTATION_EVENTS
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("prevWindow")) == OP_ATOM_prevWindow);
  verify(DOM_StringToAtom(UNI_L("prevWindowA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("previous")) == OP_ATOM_previous);
  verify(DOM_StringToAtom(UNI_L("previousA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("previousElementSibling")) == OP_ATOM_previousElementSibling);
  verify(DOM_StringToAtom(UNI_L("previousElementSiblingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("previousSibling")) == OP_ATOM_previousSibling);
  verify(DOM_StringToAtom(UNI_L("previousSiblingA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("primitiveUnits")) == OP_ATOM_primitiveUnits);
  verify(DOM_StringToAtom(UNI_L("primitiveUnitsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("private")) == OP_ATOM_private);
  verify(DOM_StringToAtom(UNI_L("privateA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("processorUtilizationPercent")) == OP_ATOM_processorUtilizationPercent);
  verify(DOM_StringToAtom(UNI_L("processorUtilizationPercentA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("prompt")) == OP_ATOM_prompt);
  verify(DOM_StringToAtom(UNI_L("promptA")) == OP_ATOM_UNASSIGNED);
#ifdef USER_JAVASCRIPT
  verify(DOM_StringToAtom(UNI_L("propagationStopped")) == OP_ATOM_propagationStopped);
  verify(DOM_StringToAtom(UNI_L("propagationStoppedA")) == OP_ATOM_UNASSIGNED);
#endif // USER_JAVASCRIPT
  verify(DOM_StringToAtom(UNI_L("properties")) == OP_ATOM_properties);
  verify(DOM_StringToAtom(UNI_L("propertiesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("propertyName")) == OP_ATOM_propertyName);
  verify(DOM_StringToAtom(UNI_L("propertyNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("protocol")) == OP_ATOM_protocol);
  verify(DOM_StringToAtom(UNI_L("protocolA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("prototype")) == OP_ATOM_prototype);
  verify(DOM_StringToAtom(UNI_L("prototypeA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("proxyName")) == OP_ATOM_proxyName);
  verify(DOM_StringToAtom(UNI_L("proxyNameA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("pubDate")) == OP_ATOM_pubDate);
  verify(DOM_StringToAtom(UNI_L("pubDateA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("publicIP")) == OP_ATOM_publicIP);
  verify(DOM_StringToAtom(UNI_L("publicIPA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("publicId")) == OP_ATOM_publicId);
  verify(DOM_StringToAtom(UNI_L("publicIdA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("publicPort")) == OP_ATOM_publicPort);
  verify(DOM_StringToAtom(UNI_L("publicPortA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("publicationDate")) == OP_ATOM_publicationDate);
  verify(DOM_StringToAtom(UNI_L("publicationDateA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("queryItems")) == OP_ATOM_queryItems);
  verify(DOM_StringToAtom(UNI_L("queryItemsA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("quotes")) == OP_ATOM_quotes);
  verify(DOM_StringToAtom(UNI_L("quotesA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("r")) == OP_ATOM_r);
  verify(DOM_StringToAtom(UNI_L("rA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("r1")) == OP_ATOM_r1);
  verify(DOM_StringToAtom(UNI_L("r1A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("r2")) == OP_ATOM_r2);
  verify(DOM_StringToAtom(UNI_L("r2A")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("radioSignalSource")) == OP_ATOM_radioSignalSource);
  verify(DOM_StringToAtom(UNI_L("radioSignalSourceA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("radioSignalStrengthPercent")) == OP_ATOM_radioSignalStrengthPercent);
  verify(DOM_StringToAtom(UNI_L("radioSignalStrengthPercentA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("radiusX")) == OP_ATOM_radiusX);
  verify(DOM_StringToAtom(UNI_L("radiusXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("radiusY")) == OP_ATOM_radiusY);
  verify(DOM_StringToAtom(UNI_L("radiusYA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("range")) == OP_ATOM_range);
  verify(DOM_StringToAtom(UNI_L("rangeA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
#ifdef DOM_SELECTION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("rangeCount")) == OP_ATOM_rangeCount);
  verify(DOM_StringToAtom(UNI_L("rangeCountA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_SELECTION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("rangeOverflow")) == OP_ATOM_rangeOverflow);
  verify(DOM_StringToAtom(UNI_L("rangeOverflowA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("rangeUnderflow")) == OP_ATOM_rangeUnderflow);
  verify(DOM_StringToAtom(UNI_L("rangeUnderflowA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("readOnly")) == OP_ATOM_readOnly);
  verify(DOM_StringToAtom(UNI_L("readOnlyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("readyState")) == OP_ATOM_readyState);
  verify(DOM_StringToAtom(UNI_L("readyStateA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("reason")) == OP_ATOM_reason);
  verify(DOM_StringToAtom(UNI_L("reasonA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("red")) == OP_ATOM_red);
  verify(DOM_StringToAtom(UNI_L("redA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("refX")) == OP_ATOM_refX);
  verify(DOM_StringToAtom(UNI_L("refXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("refY")) == OP_ATOM_refY);
  verify(DOM_StringToAtom(UNI_L("refYA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("referrer")) == OP_ATOM_referrer);
  verify(DOM_StringToAtom(UNI_L("referrerA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("rel")) == OP_ATOM_rel);
  verify(DOM_StringToAtom(UNI_L("relA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM2_MUTATION_EVENTS
  verify(DOM_StringToAtom(UNI_L("relatedNode")) == OP_ATOM_relatedNode);
  verify(DOM_StringToAtom(UNI_L("relatedNodeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_MUTATION_EVENTS
  verify(DOM_StringToAtom(UNI_L("relatedTarget")) == OP_ATOM_relatedTarget);
  verify(DOM_StringToAtom(UNI_L("relatedTargetA")) == OP_ATOM_UNASSIGNED);
#ifdef OPERA_AUTH_SUPPORT
  verify(DOM_StringToAtom(UNI_L("rememberMe")) == OP_ATOM_rememberMe);
  verify(DOM_StringToAtom(UNI_L("rememberMeA")) == OP_ATOM_UNASSIGNED);
#endif // OPERA_AUTH_SUPPORT
  verify(DOM_StringToAtom(UNI_L("renderingMode")) == OP_ATOM_renderingMode);
  verify(DOM_StringToAtom(UNI_L("renderingModeA")) == OP_ATOM_UNASSIGNED);
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("rendezvous")) == OP_ATOM_rendezvous);
  verify(DOM_StringToAtom(UNI_L("rendezvousA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("repeat")) == OP_ATOM_repeat);
  verify(DOM_StringToAtom(UNI_L("repeatA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("request")) == OP_ATOM_request);
  verify(DOM_StringToAtom(UNI_L("requestA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("required")) == OP_ATOM_required);
  verify(DOM_StringToAtom(UNI_L("requiredA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("requiredExtensions")) == OP_ATOM_requiredExtensions);
  verify(DOM_StringToAtom(UNI_L("requiredExtensionsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("requiredFeatures")) == OP_ATOM_requiredFeatures);
  verify(DOM_StringToAtom(UNI_L("requiredFeaturesA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("resize")) == OP_ATOM_resize);
  verify(DOM_StringToAtom(UNI_L("resizeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("resizeBy")) == OP_ATOM_resizeBy);
  verify(DOM_StringToAtom(UNI_L("resizeByA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("resizeTo")) == OP_ATOM_resizeTo);
  verify(DOM_StringToAtom(UNI_L("resizeToA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("response")) == OP_ATOM_response);
  verify(DOM_StringToAtom(UNI_L("responseA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("responseText")) == OP_ATOM_responseText);
  verify(DOM_StringToAtom(UNI_L("responseTextA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("responseType")) == OP_ATOM_responseType);
  verify(DOM_StringToAtom(UNI_L("responseTypeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("responseXML")) == OP_ATOM_responseXML);
  verify(DOM_StringToAtom(UNI_L("responseXMLA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("result")) == OP_ATOM_result);
  verify(DOM_StringToAtom(UNI_L("resultA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("resultType")) == OP_ATOM_resultType);
  verify(DOM_StringToAtom(UNI_L("resultTypeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("returnValue")) == OP_ATOM_returnValue);
  verify(DOM_StringToAtom(UNI_L("returnValueA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("rev")) == OP_ATOM_rev);
  verify(DOM_StringToAtom(UNI_L("revA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("reversed")) == OP_ATOM_reversed);
  verify(DOM_StringToAtom(UNI_L("reversedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("rgbColor")) == OP_ATOM_rgbColor);
  verify(DOM_StringToAtom(UNI_L("rgbColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("right")) == OP_ATOM_right);
  verify(DOM_StringToAtom(UNI_L("rightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("rightMargin")) == OP_ATOM_rightMargin);
  verify(DOM_StringToAtom(UNI_L("rightMarginA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("ringtoneVolume")) == OP_ATOM_ringtoneVolume);
  verify(DOM_StringToAtom(UNI_L("ringtoneVolumeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("robotstxtEnabled")) == OP_ATOM_robotstxtEnabled);
  verify(DOM_StringToAtom(UNI_L("robotstxtEnabledA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("root")) == OP_ATOM_root);
  verify(DOM_StringToAtom(UNI_L("rootA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("rootElement")) == OP_ATOM_rootElement);
  verify(DOM_StringToAtom(UNI_L("rootElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("rotate")) == OP_ATOM_rotate);
  verify(DOM_StringToAtom(UNI_L("rotateA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef TOUCH_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("rotation")) == OP_ATOM_rotation);
  verify(DOM_StringToAtom(UNI_L("rotationA")) == OP_ATOM_UNASSIGNED);
#endif // TOUCH_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("rowIndex")) == OP_ATOM_rowIndex);
  verify(DOM_StringToAtom(UNI_L("rowIndexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("rowSpan")) == OP_ATOM_rowSpan);
  verify(DOM_StringToAtom(UNI_L("rowSpanA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("rows")) == OP_ATOM_rows);
  verify(DOM_StringToAtom(UNI_L("rowsA")) == OP_ATOM_UNASSIGNED);
#ifdef DATABASE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("rowsAffected")) == OP_ATOM_rowsAffected);
  verify(DOM_StringToAtom(UNI_L("rowsAffectedA")) == OP_ATOM_UNASSIGNED);
#endif // DATABASE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("rules")) == OP_ATOM_rules);
  verify(DOM_StringToAtom(UNI_L("rulesA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("rx")) == OP_ATOM_rx);
  verify(DOM_StringToAtom(UNI_L("rxA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("ry")) == OP_ATOM_ry);
  verify(DOM_StringToAtom(UNI_L("ryA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#if defined(SVG_DOM) || defined(TOUCH_EVENTS_SUPPORT)
  verify(DOM_StringToAtom(UNI_L("scale")) == OP_ATOM_scale);
  verify(DOM_StringToAtom(UNI_L("scaleA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM || TOUCH_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("scheme")) == OP_ATOM_scheme);
  verify(DOM_StringToAtom(UNI_L("schemeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scope")) == OP_ATOM_scope);
  verify(DOM_StringToAtom(UNI_L("scopeA")) == OP_ATOM_UNASSIGNED);
#ifdef SCOPE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("scopeListenerAddress")) == OP_ATOM_scopeListenerAddress);
  verify(DOM_StringToAtom(UNI_L("scopeListenerAddressA")) == OP_ATOM_UNASSIGNED);
#endif // SCOPE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("screen")) == OP_ATOM_screen);
  verify(DOM_StringToAtom(UNI_L("screenA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("screenLeft")) == OP_ATOM_screenLeft);
  verify(DOM_StringToAtom(UNI_L("screenLeftA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("screenPixelToMillimeterX")) == OP_ATOM_screenPixelToMillimeterX);
  verify(DOM_StringToAtom(UNI_L("screenPixelToMillimeterXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("screenPixelToMillimeterY")) == OP_ATOM_screenPixelToMillimeterY);
  verify(DOM_StringToAtom(UNI_L("screenPixelToMillimeterYA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("screenTop")) == OP_ATOM_screenTop);
  verify(DOM_StringToAtom(UNI_L("screenTopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("screenX")) == OP_ATOM_screenX);
  verify(DOM_StringToAtom(UNI_L("screenXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("screenY")) == OP_ATOM_screenY);
  verify(DOM_StringToAtom(UNI_L("screenYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scripts")) == OP_ATOM_scripts);
  verify(DOM_StringToAtom(UNI_L("scriptsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scroll")) == OP_ATOM_scroll);
  verify(DOM_StringToAtom(UNI_L("scrollA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollAmount")) == OP_ATOM_scrollAmount);
  verify(DOM_StringToAtom(UNI_L("scrollAmountA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollBy")) == OP_ATOM_scrollBy);
  verify(DOM_StringToAtom(UNI_L("scrollByA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollDelay")) == OP_ATOM_scrollDelay);
  verify(DOM_StringToAtom(UNI_L("scrollDelayA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollHeight")) == OP_ATOM_scrollHeight);
  verify(DOM_StringToAtom(UNI_L("scrollHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollLeft")) == OP_ATOM_scrollLeft);
  verify(DOM_StringToAtom(UNI_L("scrollLeftA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollTo")) == OP_ATOM_scrollTo);
  verify(DOM_StringToAtom(UNI_L("scrollToA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollTop")) == OP_ATOM_scrollTop);
  verify(DOM_StringToAtom(UNI_L("scrollTopA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollWidth")) == OP_ATOM_scrollWidth);
  verify(DOM_StringToAtom(UNI_L("scrollWidthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollX")) == OP_ATOM_scrollX);
  verify(DOM_StringToAtom(UNI_L("scrollXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollY")) == OP_ATOM_scrollY);
  verify(DOM_StringToAtom(UNI_L("scrollYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollbar3dlightColor")) == OP_ATOM_scrollbar3dlightColor);
  verify(DOM_StringToAtom(UNI_L("scrollbar3dlightColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollbarArrowColor")) == OP_ATOM_scrollbarArrowColor);
  verify(DOM_StringToAtom(UNI_L("scrollbarArrowColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollbarBaseColor")) == OP_ATOM_scrollbarBaseColor);
  verify(DOM_StringToAtom(UNI_L("scrollbarBaseColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollbarDarkshadowColor")) == OP_ATOM_scrollbarDarkshadowColor);
  verify(DOM_StringToAtom(UNI_L("scrollbarDarkshadowColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollbarFaceColor")) == OP_ATOM_scrollbarFaceColor);
  verify(DOM_StringToAtom(UNI_L("scrollbarFaceColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollbarHighlightColor")) == OP_ATOM_scrollbarHighlightColor);
  verify(DOM_StringToAtom(UNI_L("scrollbarHighlightColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollbarShadowColor")) == OP_ATOM_scrollbarShadowColor);
  verify(DOM_StringToAtom(UNI_L("scrollbarShadowColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrollbarTrackColor")) == OP_ATOM_scrollbarTrackColor);
  verify(DOM_StringToAtom(UNI_L("scrollbarTrackColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("scrolling")) == OP_ATOM_scrolling);
  verify(DOM_StringToAtom(UNI_L("scrollingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("search")) == OP_ATOM_search);
  verify(DOM_StringToAtom(UNI_L("searchA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("sectionRowIndex")) == OP_ATOM_sectionRowIndex);
  verify(DOM_StringToAtom(UNI_L("sectionRowIndexA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("seed")) == OP_ATOM_seed);
  verify(DOM_StringToAtom(UNI_L("seedA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("seekable")) == OP_ATOM_seekable);
  verify(DOM_StringToAtom(UNI_L("seekableA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("seeking")) == OP_ATOM_seeking);
  verify(DOM_StringToAtom(UNI_L("seekingA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("selected")) == OP_ATOM_selected);
  verify(DOM_StringToAtom(UNI_L("selectedA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("selectedIndex")) == OP_ATOM_selectedIndex);
  verify(DOM_StringToAtom(UNI_L("selectedIndexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("selectedOptions")) == OP_ATOM_selectedOptions);
  verify(DOM_StringToAtom(UNI_L("selectedOptionsA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_SELECTION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("selectionDirection")) == OP_ATOM_selectionDirection);
  verify(DOM_StringToAtom(UNI_L("selectionDirectionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("selectionEnd")) == OP_ATOM_selectionEnd);
  verify(DOM_StringToAtom(UNI_L("selectionEndA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("selectionStart")) == OP_ATOM_selectionStart);
  verify(DOM_StringToAtom(UNI_L("selectionStartA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_SELECTION_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("selectionText")) == OP_ATOM_selectionText);
  verify(DOM_StringToAtom(UNI_L("selectionTextA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("selectorText")) == OP_ATOM_selectorText);
  verify(DOM_StringToAtom(UNI_L("selectorTextA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("self")) == OP_ATOM_self);
  verify(DOM_StringToAtom(UNI_L("selfA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("servicePath")) == OP_ATOM_servicePath);
  verify(DOM_StringToAtom(UNI_L("servicePathA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("services")) == OP_ATOM_services);
  verify(DOM_StringToAtom(UNI_L("servicesA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("session")) == OP_ATOM_session);
  verify(DOM_StringToAtom(UNI_L("sessionA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("sessionStorage")) == OP_ATOM_sessionStorage);
  verify(DOM_StringToAtom(UNI_L("sessionStorageA")) == OP_ATOM_UNASSIGNED);
#endif // CLIENTSIDE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("setInterval")) == OP_ATOM_setInterval);
  verify(DOM_StringToAtom(UNI_L("setIntervalA")) == OP_ATOM_UNASSIGNED);
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("shadowBlur")) == OP_ATOM_shadowBlur);
  verify(DOM_StringToAtom(UNI_L("shadowBlurA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("shadowColor")) == OP_ATOM_shadowColor);
  verify(DOM_StringToAtom(UNI_L("shadowColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("shadowOffsetX")) == OP_ATOM_shadowOffsetX);
  verify(DOM_StringToAtom(UNI_L("shadowOffsetXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("shadowOffsetY")) == OP_ATOM_shadowOffsetY);
  verify(DOM_StringToAtom(UNI_L("shadowOffsetYA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("shape")) == OP_ATOM_shape);
  verify(DOM_StringToAtom(UNI_L("shapeA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("shapeRendering")) == OP_ATOM_shapeRendering);
  verify(DOM_StringToAtom(UNI_L("shapeRenderingA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("sharedFolder")) == OP_ATOM_sharedFolder);
  verify(DOM_StringToAtom(UNI_L("sharedFolderA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("sheet")) == OP_ATOM_sheet);
  verify(DOM_StringToAtom(UNI_L("sheetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("shiftKey")) == OP_ATOM_shiftKey);
  verify(DOM_StringToAtom(UNI_L("shiftKeyA")) == OP_ATOM_UNASSIGNED);
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("shortName")) == OP_ATOM_shortName);
  verify(DOM_StringToAtom(UNI_L("shortNameA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("showImages")) == OP_ATOM_showImages);
  verify(DOM_StringToAtom(UNI_L("showImagesA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#ifdef DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("singleNodeValue")) == OP_ATOM_singleNodeValue);
  verify(DOM_StringToAtom(UNI_L("singleNodeValueA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("size")) == OP_ATOM_size);
  verify(DOM_StringToAtom(UNI_L("sizeA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("slope")) == OP_ATOM_slope);
  verify(DOM_StringToAtom(UNI_L("slopeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("snapToLines")) == OP_ATOM_snapToLines);
  verify(DOM_StringToAtom(UNI_L("snapToLinesA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#ifdef DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("snapshotLength")) == OP_ATOM_snapshotLength);
  verify(DOM_StringToAtom(UNI_L("snapshotLengthA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_XPATH
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("solidColor")) == OP_ATOM_solidColor);
  verify(DOM_StringToAtom(UNI_L("solidColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("solidOpacity")) == OP_ATOM_solidOpacity);
  verify(DOM_StringToAtom(UNI_L("solidOpacityA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("source")) == OP_ATOM_source);
  verify(DOM_StringToAtom(UNI_L("sourceA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("sourceAddress")) == OP_ATOM_sourceAddress);
  verify(DOM_StringToAtom(UNI_L("sourceAddressA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("spacing")) == OP_ATOM_spacing);
  verify(DOM_StringToAtom(UNI_L("spacingA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("span")) == OP_ATOM_span);
  verify(DOM_StringToAtom(UNI_L("spanA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("speakNumeral")) == OP_ATOM_speakNumeral);
  verify(DOM_StringToAtom(UNI_L("speakNumeralA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("specified")) == OP_ATOM_specified);
  verify(DOM_StringToAtom(UNI_L("specifiedA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("specularConstant")) == OP_ATOM_specularConstant);
  verify(DOM_StringToAtom(UNI_L("specularConstantA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("specularExponent")) == OP_ATOM_specularExponent);
  verify(DOM_StringToAtom(UNI_L("specularExponentA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("speed")) == OP_ATOM_speed);
  verify(DOM_StringToAtom(UNI_L("speedA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("speeddial")) == OP_ATOM_speeddial);
  verify(DOM_StringToAtom(UNI_L("speeddialA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef INTERNAL_SPELLCHECK_SUPPORT
  verify(DOM_StringToAtom(UNI_L("spellcheck")) == OP_ATOM_spellcheck);
  verify(DOM_StringToAtom(UNI_L("spellcheckA")) == OP_ATOM_UNASSIGNED);
#endif // INTERNAL_SPELLCHECK_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("spreadMethod")) == OP_ATOM_spreadMethod);
  verify(DOM_StringToAtom(UNI_L("spreadMethodA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("src")) == OP_ATOM_src);
  verify(DOM_StringToAtom(UNI_L("srcA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("srcElement")) == OP_ATOM_srcElement);
  verify(DOM_StringToAtom(UNI_L("srcElementA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("srcURL")) == OP_ATOM_srcURL);
  verify(DOM_StringToAtom(UNI_L("srcURLA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("srclang")) == OP_ATOM_srclang);
  verify(DOM_StringToAtom(UNI_L("srclangA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("standby")) == OP_ATOM_standby);
  verify(DOM_StringToAtom(UNI_L("standbyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("start")) == OP_ATOM_start);
  verify(DOM_StringToAtom(UNI_L("startA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM2_RANGE
  verify(DOM_StringToAtom(UNI_L("startContainer")) == OP_ATOM_startContainer);
  verify(DOM_StringToAtom(UNI_L("startContainerA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_RANGE
#if defined(DOM2_RANGE) || defined(SVG_DOM)
  verify(DOM_StringToAtom(UNI_L("startOffset")) == OP_ATOM_startOffset);
  verify(DOM_StringToAtom(UNI_L("startOffsetA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_RANGE || SVG_DOM
#if defined(MEDIA_HTML_SUPPORT) || defined(DOM_JIL_API_SUPPORT)
  verify(DOM_StringToAtom(UNI_L("startTime")) == OP_ATOM_startTime);
  verify(DOM_StringToAtom(UNI_L("startTimeA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT || DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("state")) == OP_ATOM_state);
  verify(DOM_StringToAtom(UNI_L("stateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("status")) == OP_ATOM_status);
  verify(DOM_StringToAtom(UNI_L("statusA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_HTTP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("statusText")) == OP_ATOM_statusText);
  verify(DOM_StringToAtom(UNI_L("statusTextA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_HTTP_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("stdDeviationX")) == OP_ATOM_stdDeviationX);
  verify(DOM_StringToAtom(UNI_L("stdDeviationXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("stdDeviationY")) == OP_ATOM_stdDeviationY);
  verify(DOM_StringToAtom(UNI_L("stdDeviationYA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("stencil")) == OP_ATOM_stencil);
  verify(DOM_StringToAtom(UNI_L("stencilA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS3D_SUPPORT
  verify(DOM_StringToAtom(UNI_L("step")) == OP_ATOM_step);
  verify(DOM_StringToAtom(UNI_L("stepA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("stepMismatch")) == OP_ATOM_stepMismatch);
  verify(DOM_StringToAtom(UNI_L("stepMismatchA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("stitchTiles")) == OP_ATOM_stitchTiles);
  verify(DOM_StringToAtom(UNI_L("stitchTilesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("stopColor")) == OP_ATOM_stopColor);
  verify(DOM_StringToAtom(UNI_L("stopColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("stopOpacity")) == OP_ATOM_stopOpacity);
  verify(DOM_StringToAtom(UNI_L("stopOpacityA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef CLIENTSIDE_STORAGE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("storageArea")) == OP_ATOM_storageArea);
  verify(DOM_StringToAtom(UNI_L("storageAreaA")) == OP_ATOM_UNASSIGNED);
#endif // CLIENTSIDE_STORAGE_SUPPORT
#ifdef SCOPE_SUPPORT
  verify(DOM_StringToAtom(UNI_L("stpVersion")) == OP_ATOM_stpVersion);
  verify(DOM_StringToAtom(UNI_L("stpVersionA")) == OP_ATOM_UNASSIGNED);
#endif // SCOPE_SUPPORT
#ifdef DOM3_XPATH
  verify(DOM_StringToAtom(UNI_L("stringValue")) == OP_ATOM_stringValue);
  verify(DOM_StringToAtom(UNI_L("stringValueA")) == OP_ATOM_UNASSIGNED);
#endif // DOM3_XPATH
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("stroke")) == OP_ATOM_stroke);
  verify(DOM_StringToAtom(UNI_L("strokeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("strokeDasharray")) == OP_ATOM_strokeDasharray);
  verify(DOM_StringToAtom(UNI_L("strokeDasharrayA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("strokeDashoffset")) == OP_ATOM_strokeDashoffset);
  verify(DOM_StringToAtom(UNI_L("strokeDashoffsetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("strokeLinecap")) == OP_ATOM_strokeLinecap);
  verify(DOM_StringToAtom(UNI_L("strokeLinecapA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("strokeLinejoin")) == OP_ATOM_strokeLinejoin);
  verify(DOM_StringToAtom(UNI_L("strokeLinejoinA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("strokeMiterlimit")) == OP_ATOM_strokeMiterlimit);
  verify(DOM_StringToAtom(UNI_L("strokeMiterlimitA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("strokeOpacity")) == OP_ATOM_strokeOpacity);
  verify(DOM_StringToAtom(UNI_L("strokeOpacityA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("strokeStyle")) == OP_ATOM_strokeStyle);
  verify(DOM_StringToAtom(UNI_L("strokeStyleA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("strokeWidth")) == OP_ATOM_strokeWidth);
  verify(DOM_StringToAtom(UNI_L("strokeWidthA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("style")) == OP_ATOM_style);
  verify(DOM_StringToAtom(UNI_L("styleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("styleFloat")) == OP_ATOM_styleFloat);
  verify(DOM_StringToAtom(UNI_L("styleFloatA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("styleSheet")) == OP_ATOM_styleSheet);
  verify(DOM_StringToAtom(UNI_L("styleSheetA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("styleSheets")) == OP_ATOM_styleSheets);
  verify(DOM_StringToAtom(UNI_L("styleSheetsA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("subject")) == OP_ATOM_subject);
  verify(DOM_StringToAtom(UNI_L("subjectA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("subscribedFeeds")) == OP_ATOM_subscribedFeeds);
  verify(DOM_StringToAtom(UNI_L("subscribedFeedsA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("suffixes")) == OP_ATOM_suffixes);
  verify(DOM_StringToAtom(UNI_L("suffixesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("summary")) == OP_ATOM_summary);
  verify(DOM_StringToAtom(UNI_L("summaryA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("surfaceScale")) == OP_ATOM_surfaceScale);
  verify(DOM_StringToAtom(UNI_L("surfaceScaleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("sweepFlag")) == OP_ATOM_sweepFlag);
  verify(DOM_StringToAtom(UNI_L("sweepFlagA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("systemId")) == OP_ATOM_systemId);
  verify(DOM_StringToAtom(UNI_L("systemIdA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("systemLanguage")) == OP_ATOM_systemLanguage);
  verify(DOM_StringToAtom(UNI_L("systemLanguageA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("systemNewLine")) == OP_ATOM_systemNewLine);
  verify(DOM_StringToAtom(UNI_L("systemNewLineA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GADGET_FILE_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("tBodies")) == OP_ATOM_tBodies);
  verify(DOM_StringToAtom(UNI_L("tBodiesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("tFoot")) == OP_ATOM_tFoot);
  verify(DOM_StringToAtom(UNI_L("tFootA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("tHead")) == OP_ATOM_tHead);
  verify(DOM_StringToAtom(UNI_L("tHeadA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("tab")) == OP_ATOM_tab);
  verify(DOM_StringToAtom(UNI_L("tabA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("tabGroup")) == OP_ATOM_tabGroup);
  verify(DOM_StringToAtom(UNI_L("tabGroupA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("tabGroups")) == OP_ATOM_tabGroups);
  verify(DOM_StringToAtom(UNI_L("tabGroupsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("tabIndex")) == OP_ATOM_tabIndex);
  verify(DOM_StringToAtom(UNI_L("tabIndexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("tableLayout")) == OP_ATOM_tableLayout);
  verify(DOM_StringToAtom(UNI_L("tableLayoutA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("tableValues")) == OP_ATOM_tableValues);
  verify(DOM_StringToAtom(UNI_L("tableValuesA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("tabs")) == OP_ATOM_tabs);
  verify(DOM_StringToAtom(UNI_L("tabsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_TAB_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("tagName")) == OP_ATOM_tagName);
  verify(DOM_StringToAtom(UNI_L("tagNameA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("target")) == OP_ATOM_target);
  verify(DOM_StringToAtom(UNI_L("targetA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("targetElement")) == OP_ATOM_targetElement);
  verify(DOM_StringToAtom(UNI_L("targetElementA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef SVG_SUPPORT
  verify(DOM_StringToAtom(UNI_L("targetFps")) == OP_ATOM_targetFps);
  verify(DOM_StringToAtom(UNI_L("targetFpsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_SUPPORT
#ifdef TOUCH_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("targetTouches")) == OP_ATOM_targetTouches);
  verify(DOM_StringToAtom(UNI_L("targetTouchesA")) == OP_ATOM_UNASSIGNED);
#endif // TOUCH_EVENTS_SUPPORT
#ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("targetURLPatterns")) == OP_ATOM_targetURLPatterns);
  verify(DOM_StringToAtom(UNI_L("targetURLPatternsA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("targetX")) == OP_ATOM_targetX);
  verify(DOM_StringToAtom(UNI_L("targetXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("targetY")) == OP_ATOM_targetY);
  verify(DOM_StringToAtom(UNI_L("targetYA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("text")) == OP_ATOM_text);
  verify(DOM_StringToAtom(UNI_L("textA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("textAlign")) == OP_ATOM_textAlign);
  verify(DOM_StringToAtom(UNI_L("textAlignA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("textAnchor")) == OP_ATOM_textAnchor);
  verify(DOM_StringToAtom(UNI_L("textAnchorA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("textBaseline")) == OP_ATOM_textBaseline);
  verify(DOM_StringToAtom(UNI_L("textBaselineA")) == OP_ATOM_UNASSIGNED);
#endif // CANVAS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("textContent")) == OP_ATOM_textContent);
  verify(DOM_StringToAtom(UNI_L("textContentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("textDecoration")) == OP_ATOM_textDecoration);
  verify(DOM_StringToAtom(UNI_L("textDecorationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("textIndent")) == OP_ATOM_textIndent);
  verify(DOM_StringToAtom(UNI_L("textIndentA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("textLength")) == OP_ATOM_textLength);
  verify(DOM_StringToAtom(UNI_L("textLengthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("textOverflow")) == OP_ATOM_textOverflow);
  verify(DOM_StringToAtom(UNI_L("textOverflowA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("textRendering")) == OP_ATOM_textRendering);
  verify(DOM_StringToAtom(UNI_L("textRenderingA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("textShadow")) == OP_ATOM_textShadow);
  verify(DOM_StringToAtom(UNI_L("textShadowA")) == OP_ATOM_UNASSIGNED);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("textTracks")) == OP_ATOM_textTracks);
  verify(DOM_StringToAtom(UNI_L("textTracksA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("textTransform")) == OP_ATOM_textTransform);
  verify(DOM_StringToAtom(UNI_L("textTransformA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("time")) == OP_ATOM_time);
  verify(DOM_StringToAtom(UNI_L("timeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("timeStamp")) == OP_ATOM_timeStamp);
  verify(DOM_StringToAtom(UNI_L("timeStampA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_HTTP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("timeout")) == OP_ATOM_timeout);
  verify(DOM_StringToAtom(UNI_L("timeoutA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_HTTP_SUPPORT
#ifdef DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("timestamp")) == OP_ATOM_timestamp);
  verify(DOM_StringToAtom(UNI_L("timestampA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_GEOLOCATION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("title")) == OP_ATOM_title);
  verify(DOM_StringToAtom(UNI_L("titleA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("toElement")) == OP_ATOM_toElement);
  verify(DOM_StringToAtom(UNI_L("toElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("tooLong")) == OP_ATOM_tooLong);
  verify(DOM_StringToAtom(UNI_L("tooLongA")) == OP_ATOM_UNASSIGNED);
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("toolbar")) == OP_ATOM_toolbar);
  verify(DOM_StringToAtom(UNI_L("toolbarA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("top")) == OP_ATOM_top);
  verify(DOM_StringToAtom(UNI_L("topA")) == OP_ATOM_UNASSIGNED);
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("topWindow")) == OP_ATOM_topWindow);
  verify(DOM_StringToAtom(UNI_L("topWindowA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("total")) == OP_ATOM_total);
  verify(DOM_StringToAtom(UNI_L("totalA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("totalMemory")) == OP_ATOM_totalMemory);
  verify(DOM_StringToAtom(UNI_L("totalMemoryA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef TOUCH_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("touches")) == OP_ATOM_touches);
  verify(DOM_StringToAtom(UNI_L("touchesA")) == OP_ATOM_UNASSIGNED);
#endif // TOUCH_EVENTS_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("track")) == OP_ATOM_track);
  verify(DOM_StringToAtom(UNI_L("trackA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("transform")) == OP_ATOM_transform);
  verify(DOM_StringToAtom(UNI_L("transformA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef CSS_TRANSFORMS
  verify(DOM_StringToAtom(UNI_L("transformOrigin")) == OP_ATOM_transformOrigin);
  verify(DOM_StringToAtom(UNI_L("transformOriginA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(DOM_StringToAtom(UNI_L("transition")) == OP_ATOM_transition);
  verify(DOM_StringToAtom(UNI_L("transitionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("transitionDelay")) == OP_ATOM_transitionDelay);
  verify(DOM_StringToAtom(UNI_L("transitionDelayA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("transitionDuration")) == OP_ATOM_transitionDuration);
  verify(DOM_StringToAtom(UNI_L("transitionDurationA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("transitionProperty")) == OP_ATOM_transitionProperty);
  verify(DOM_StringToAtom(UNI_L("transitionPropertyA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("transitionTimingFunction")) == OP_ATOM_transitionTimingFunction);
  verify(DOM_StringToAtom(UNI_L("transitionTimingFunctionA")) == OP_ATOM_UNASSIGNED);
#endif // CSS_TRANSITIONS
  verify(DOM_StringToAtom(UNI_L("type")) == OP_ATOM_type);
  verify(DOM_StringToAtom(UNI_L("typeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("typeMismatch")) == OP_ATOM_typeMismatch);
  verify(DOM_StringToAtom(UNI_L("typeMismatchA")) == OP_ATOM_UNASSIGNED);
#if defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(DOM_StringToAtom(UNI_L("types")) == OP_ATOM_types);
  verify(DOM_StringToAtom(UNI_L("typesA")) == OP_ATOM_UNASSIGNED);
#endif // DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(DOM_StringToAtom(UNI_L("unicodeBidi")) == OP_ATOM_unicodeBidi);
  verify(DOM_StringToAtom(UNI_L("unicodeBidiA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("unitType")) == OP_ATOM_unitType);
  verify(DOM_StringToAtom(UNI_L("unitTypeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("uniteDeviceName")) == OP_ATOM_uniteDeviceName);
  verify(DOM_StringToAtom(UNI_L("uniteDeviceNameA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef UPNP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("uniteServiceName")) == OP_ATOM_uniteServiceName);
  verify(DOM_StringToAtom(UNI_L("uniteServiceNameA")) == OP_ATOM_UNASSIGNED);
#endif // UPNP_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("uniteUser")) == OP_ATOM_uniteUser);
  verify(DOM_StringToAtom(UNI_L("uniteUserA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("unread")) == OP_ATOM_unread);
  verify(DOM_StringToAtom(UNI_L("unreadA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("unselectable")) == OP_ATOM_unselectable);
  verify(DOM_StringToAtom(UNI_L("unselectableA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("updateInterval")) == OP_ATOM_updateInterval);
  verify(DOM_StringToAtom(UNI_L("updateIntervalA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
#if defined DOM_HTTP_SUPPORT && defined PROGRESS_EVENTS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("upload")) == OP_ATOM_upload);
  verify(DOM_StringToAtom(UNI_L("uploadA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_HTTP_SUPPORT && PROGRESS_EVENTS_SUPPORT
#if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT
  verify(DOM_StringToAtom(UNI_L("upnpDeviceIcon")) == OP_ATOM_upnpDeviceIcon);
  verify(DOM_StringToAtom(UNI_L("upnpDeviceIconA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("upnpDevicePayload")) == OP_ATOM_upnpDevicePayload);
  verify(DOM_StringToAtom(UNI_L("upnpDevicePayloadA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT || UPNP_SUPPORT
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("upnpEnabled")) == OP_ATOM_upnpEnabled);
  verify(DOM_StringToAtom(UNI_L("upnpEnabledA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT && OPERAUNITE_URL
  verify(DOM_StringToAtom(UNI_L("uri")) == OP_ATOM_uri);
  verify(DOM_StringToAtom(UNI_L("uriA")) == OP_ATOM_UNASSIGNED);
#if defined CLIENTSIDE_STORAGE_SUPPORT || defined UPNP_SUPPORT || defined WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("url")) == OP_ATOM_url);
  verify(DOM_StringToAtom(UNI_L("urlA")) == OP_ATOM_UNASSIGNED);
#endif // CLIENTSIDE_STORAGE_SUPPORT || UPNP_SUPPORT || WEBSOCKETS_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("useCurrentView")) == OP_ATOM_useCurrentView);
  verify(DOM_StringToAtom(UNI_L("useCurrentViewA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("useMap")) == OP_ATOM_useMap);
  verify(DOM_StringToAtom(UNI_L("useMapA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("userAccountBalance")) == OP_ATOM_userAccountBalance);
  verify(DOM_StringToAtom(UNI_L("userAccountBalanceA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("userAgent")) == OP_ATOM_userAgent);
  verify(DOM_StringToAtom(UNI_L("userAgentA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("userDefinedTitle")) == OP_ATOM_userDefinedTitle);
  verify(DOM_StringToAtom(UNI_L("userDefinedTitleA")) == OP_ATOM_UNASSIGNED);
#endif // WEBFEEDS_BACKEND_SUPPORT
  verify(DOM_StringToAtom(UNI_L("userLanguage")) == OP_ATOM_userLanguage);
  verify(DOM_StringToAtom(UNI_L("userLanguageA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("userName")) == OP_ATOM_userName);
  verify(DOM_StringToAtom(UNI_L("userNameA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("userSubscriptionType")) == OP_ATOM_userSubscriptionType);
  verify(DOM_StringToAtom(UNI_L("userSubscriptionTypeA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("userZoom")) == OP_ATOM_userZoom);
  verify(DOM_StringToAtom(UNI_L("userZoomA")) == OP_ATOM_UNASSIGNED);
#ifdef OPERA_AUTH_SUPPORT
  verify(DOM_StringToAtom(UNI_L("username")) == OP_ATOM_username);
  verify(DOM_StringToAtom(UNI_L("usernameA")) == OP_ATOM_UNASSIGNED);
#endif // OPERA_AUTH_SUPPORT
#ifdef WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("users")) == OP_ATOM_users);
  verify(DOM_StringToAtom(UNI_L("usersA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("vAlign")) == OP_ATOM_vAlign);
  verify(DOM_StringToAtom(UNI_L("vAlignA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("vLink")) == OP_ATOM_vLink);
  verify(DOM_StringToAtom(UNI_L("vLinkA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("valid")) == OP_ATOM_valid);
  verify(DOM_StringToAtom(UNI_L("validA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("validationMessage")) == OP_ATOM_validationMessage);
  verify(DOM_StringToAtom(UNI_L("validationMessageA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("validity")) == OP_ATOM_validity);
  verify(DOM_StringToAtom(UNI_L("validityA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("validityPeriodHours")) == OP_ATOM_validityPeriodHours);
  verify(DOM_StringToAtom(UNI_L("validityPeriodHoursA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("value")) == OP_ATOM_value);
  verify(DOM_StringToAtom(UNI_L("valueA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("valueAsDate")) == OP_ATOM_valueAsDate);
  verify(DOM_StringToAtom(UNI_L("valueAsDateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("valueAsNumber")) == OP_ATOM_valueAsNumber);
  verify(DOM_StringToAtom(UNI_L("valueAsNumberA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("valueAsString")) == OP_ATOM_valueAsString);
  verify(DOM_StringToAtom(UNI_L("valueAsStringA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("valueInSpecifiedUnits")) == OP_ATOM_valueInSpecifiedUnits);
  verify(DOM_StringToAtom(UNI_L("valueInSpecifiedUnitsA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("valueMissing")) == OP_ATOM_valueMissing);
  verify(DOM_StringToAtom(UNI_L("valueMissingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("valueType")) == OP_ATOM_valueType);
  verify(DOM_StringToAtom(UNI_L("valueTypeA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("values")) == OP_ATOM_values);
  verify(DOM_StringToAtom(UNI_L("valuesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("vectorEffect")) == OP_ATOM_vectorEffect);
  verify(DOM_StringToAtom(UNI_L("vectorEffectA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("version")) == OP_ATOM_version);
  verify(DOM_StringToAtom(UNI_L("versionA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("verticalAlign")) == OP_ATOM_verticalAlign);
  verify(DOM_StringToAtom(UNI_L("verticalAlignA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("vibrationSetting")) == OP_ATOM_vibrationSetting);
  verify(DOM_StringToAtom(UNI_L("vibrationSettingA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("videoHeight")) == OP_ATOM_videoHeight);
  verify(DOM_StringToAtom(UNI_L("videoHeightA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("videoWidth")) == OP_ATOM_videoWidth);
  verify(DOM_StringToAtom(UNI_L("videoWidthA")) == OP_ATOM_UNASSIGNED);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_StringToAtom(UNI_L("view")) == OP_ATOM_view);
  verify(DOM_StringToAtom(UNI_L("viewA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("viewBox")) == OP_ATOM_viewBox);
  verify(DOM_StringToAtom(UNI_L("viewBoxA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("viewport")) == OP_ATOM_viewport);
  verify(DOM_StringToAtom(UNI_L("viewportA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("viewportElement")) == OP_ATOM_viewportElement);
  verify(DOM_StringToAtom(UNI_L("viewportElementA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("viewportFill")) == OP_ATOM_viewportFill);
  verify(DOM_StringToAtom(UNI_L("viewportFillA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("viewportFillOpacity")) == OP_ATOM_viewportFillOpacity);
  verify(DOM_StringToAtom(UNI_L("viewportFillOpacityA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("visibility")) == OP_ATOM_visibility);
  verify(DOM_StringToAtom(UNI_L("visibilityA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("visibilityState")) == OP_ATOM_visibilityState);
  verify(DOM_StringToAtom(UNI_L("visibilityStateA")) == OP_ATOM_UNASSIGNED);
#if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("visibleToLocalNetwork")) == OP_ATOM_visibleToLocalNetwork);
  verify(DOM_StringToAtom(UNI_L("visibleToLocalNetworkA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("visibleToSearchEngines")) == OP_ATOM_visibleToSearchEngines);
  verify(DOM_StringToAtom(UNI_L("visibleToSearchEnginesA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("visibleToServiceDiscovery")) == OP_ATOM_visibleToServiceDiscovery);
  verify(DOM_StringToAtom(UNI_L("visibleToServiceDiscoveryA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT && WEBSERVER_SUPPORT
  verify(DOM_StringToAtom(UNI_L("vlinkColor")) == OP_ATOM_vlinkColor);
  verify(DOM_StringToAtom(UNI_L("vlinkColorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("volume")) == OP_ATOM_volume);
  verify(DOM_StringToAtom(UNI_L("volumeA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("vspace")) == OP_ATOM_vspace);
  verify(DOM_StringToAtom(UNI_L("vspaceA")) == OP_ATOM_UNASSIGNED);
#ifdef WEBSOCKETS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("wasClean")) == OP_ATOM_wasClean);
  verify(DOM_StringToAtom(UNI_L("wasCleanA")) == OP_ATOM_UNASSIGNED);
#endif // WEBSOCKETS_SUPPORT
#ifdef DOM2_TRAVERSAL
  verify(DOM_StringToAtom(UNI_L("whatToShow")) == OP_ATOM_whatToShow);
  verify(DOM_StringToAtom(UNI_L("whatToShowA")) == OP_ATOM_UNASSIGNED);
#endif // DOM2_TRAVERSAL
  verify(DOM_StringToAtom(UNI_L("wheelDelta")) == OP_ATOM_wheelDelta);
  verify(DOM_StringToAtom(UNI_L("wheelDeltaA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("wheelDeltaX")) == OP_ATOM_wheelDeltaX);
  verify(DOM_StringToAtom(UNI_L("wheelDeltaXA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("wheelDeltaY")) == OP_ATOM_wheelDeltaY);
  verify(DOM_StringToAtom(UNI_L("wheelDeltaYA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("which")) == OP_ATOM_which);
  verify(DOM_StringToAtom(UNI_L("whichA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("whiteSpace")) == OP_ATOM_whiteSpace);
  verify(DOM_StringToAtom(UNI_L("whiteSpaceA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("wholeText")) == OP_ATOM_wholeText);
  verify(DOM_StringToAtom(UNI_L("wholeTextA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("widgetMode")) == OP_ATOM_widgetMode);
  verify(DOM_StringToAtom(UNI_L("widgetModeA")) == OP_ATOM_UNASSIGNED);
#ifdef GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("widgets")) == OP_ATOM_widgets);
  verify(DOM_StringToAtom(UNI_L("widgetsA")) == OP_ATOM_UNASSIGNED);
#endif // GADGET_SUPPORT
  verify(DOM_StringToAtom(UNI_L("widows")) == OP_ATOM_widows);
  verify(DOM_StringToAtom(UNI_L("widowsA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("width")) == OP_ATOM_width);
  verify(DOM_StringToAtom(UNI_L("widthA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("willValidate")) == OP_ATOM_willValidate);
  verify(DOM_StringToAtom(UNI_L("willValidateA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("window")) == OP_ATOM_window);
  verify(DOM_StringToAtom(UNI_L("windowA")) == OP_ATOM_UNASSIGNED);
#ifdef EXTENSION_SUPPORT
  verify(DOM_StringToAtom(UNI_L("windows")) == OP_ATOM_windows);
  verify(DOM_StringToAtom(UNI_L("windowsA")) == OP_ATOM_UNASSIGNED);
#endif // EXTENSION_SUPPORT
#ifdef CORS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("withCredentials")) == OP_ATOM_withCredentials);
  verify(DOM_StringToAtom(UNI_L("withCredentialsA")) == OP_ATOM_UNASSIGNED);
#endif // CORS_SUPPORT
  verify(DOM_StringToAtom(UNI_L("wordSpacing")) == OP_ATOM_wordSpacing);
  verify(DOM_StringToAtom(UNI_L("wordSpacingA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("wordWrap")) == OP_ATOM_wordWrap);
  verify(DOM_StringToAtom(UNI_L("wordWrapA")) == OP_ATOM_UNASSIGNED);
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("workPhone")) == OP_ATOM_workPhone);
  verify(DOM_StringToAtom(UNI_L("workPhoneA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("wrap")) == OP_ATOM_wrap);
  verify(DOM_StringToAtom(UNI_L("wrapA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("writingMode")) == OP_ATOM_writingMode);
  verify(DOM_StringToAtom(UNI_L("writingModeA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("x")) == OP_ATOM_x);
  verify(DOM_StringToAtom(UNI_L("xA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("x1")) == OP_ATOM_x1);
  verify(DOM_StringToAtom(UNI_L("x1A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("x2")) == OP_ATOM_x2);
  verify(DOM_StringToAtom(UNI_L("x2A")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("xAxis")) == OP_ATOM_xAxis);
  verify(DOM_StringToAtom(UNI_L("xAxisA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("xChannelSelector")) == OP_ATOM_xChannelSelector);
  verify(DOM_StringToAtom(UNI_L("xChannelSelectorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("xmlbase")) == OP_ATOM_xmlbase);
  verify(DOM_StringToAtom(UNI_L("xmlbaseA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("xmlspace")) == OP_ATOM_xmlspace);
  verify(DOM_StringToAtom(UNI_L("xmlspaceA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("y")) == OP_ATOM_y);
  verify(DOM_StringToAtom(UNI_L("yA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("y1")) == OP_ATOM_y1);
  verify(DOM_StringToAtom(UNI_L("y1A")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("y2")) == OP_ATOM_y2);
  verify(DOM_StringToAtom(UNI_L("y2A")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("yAxis")) == OP_ATOM_yAxis);
  verify(DOM_StringToAtom(UNI_L("yAxisA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("yChannelSelector")) == OP_ATOM_yChannelSelector);
  verify(DOM_StringToAtom(UNI_L("yChannelSelectorA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("z")) == OP_ATOM_z);
  verify(DOM_StringToAtom(UNI_L("zA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
#ifdef DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("zAxis")) == OP_ATOM_zAxis);
  verify(DOM_StringToAtom(UNI_L("zAxisA")) == OP_ATOM_UNASSIGNED);
#endif // DOM_JIL_API_SUPPORT
  verify(DOM_StringToAtom(UNI_L("zIndex")) == OP_ATOM_zIndex);
  verify(DOM_StringToAtom(UNI_L("zIndexA")) == OP_ATOM_UNASSIGNED);
  verify(DOM_StringToAtom(UNI_L("zoom")) == OP_ATOM_zoom);
  verify(DOM_StringToAtom(UNI_L("zoomA")) == OP_ATOM_UNASSIGNED);
#ifdef SVG_DOM
  verify(DOM_StringToAtom(UNI_L("zoomAndPan")) == OP_ATOM_zoomAndPan);
  verify(DOM_StringToAtom(UNI_L("zoomAndPanA")) == OP_ATOM_UNASSIGNED);
#endif // SVG_DOM
  verify(DOM_StringToAtom(UNI_L("zzzzzz")) == OP_ATOM_UNASSIGNED);
}

test("Atom to HTML attribute conversion")
{
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_aLink) == ATTR_ALINK || ATTR_ALINK == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_abbr) == ATTR_ABBR || ATTR_ABBR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_accept) == ATTR_ACCEPT || ATTR_ACCEPT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_acceptCharset) == ATTR_ACCEPT_CHARSET || ATTR_ACCEPT_CHARSET == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_accessKey) == ATTR_ACCESSKEY || ATTR_ACCESSKEY == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_action) == ATTR_ACTION || ATTR_ACTION == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_align) == ATTR_ALIGN || ATTR_ALIGN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_alt) == ATTR_ALT || ATTR_ALT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_archive) == ATTR_ARCHIVE || ATTR_ARCHIVE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_autocomplete) == ATTR_AUTOCOMPLETE || ATTR_AUTOCOMPLETE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_autofocus) == ATTR_AUTOFOCUS || ATTR_AUTOFOCUS == USHRT_MAX);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_autoplay) == ATTR_AUTOPLAY || ATTR_AUTOPLAY == USHRT_MAX);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_axis) == ATTR_AXIS || ATTR_AXIS == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_background) == ATTR_BACKGROUND || ATTR_BACKGROUND == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_behavior) == ATTR_BEHAVIOR || ATTR_BEHAVIOR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_bgColor) == ATTR_BGCOLOR || ATTR_BGCOLOR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_border) == ATTR_BORDER || ATTR_BORDER == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_cellPadding) == ATTR_CELLPADDING || ATTR_CELLPADDING == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_cellSpacing) == ATTR_CELLSPACING || ATTR_CELLSPACING == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_ch) == ATTR_CHAR || ATTR_CHAR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_chOff) == ATTR_CHAROFF || ATTR_CHAROFF == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_challenge) == ATTR_CHALLENGE || ATTR_CHALLENGE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_charset) == ATTR_CHARSET || ATTR_CHARSET == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_checked) == ATTR_CHECKED || ATTR_CHECKED == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_cite) == ATTR_CITE || ATTR_CITE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_class) == ATTR_CLASS || ATTR_CLASS == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_classId) == ATTR_CLASSID || ATTR_CLASSID == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_className) == ATTR_CLASS || ATTR_CLASS == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_clear) == ATTR_CLEAR || ATTR_CLEAR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_code) == ATTR_CODE || ATTR_CODE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_codeBase) == ATTR_CODEBASE || ATTR_CODEBASE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_codeType) == ATTR_CODETYPE || ATTR_CODETYPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_colSpan) == ATTR_COLSPAN || ATTR_COLSPAN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_color) == ATTR_COLOR || ATTR_COLOR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_cols) == ATTR_COLS || ATTR_COLS == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_compact) == ATTR_COMPACT || ATTR_COMPACT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_content) == ATTR_CONTENT || ATTR_CONTENT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_contentEditable) == ATTR_CONTENTEDITABLE || ATTR_CONTENTEDITABLE == USHRT_MAX);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_controls) == ATTR_CONTROLS || ATTR_CONTROLS == USHRT_MAX);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_coords) == ATTR_COORDS || ATTR_COORDS == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_crossOrigin) == Markup::HA_CROSSORIGIN || Markup::HA_CROSSORIGIN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_data) == ATTR_DATA || ATTR_DATA == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_dateTime) == ATTR_DATETIME || ATTR_DATETIME == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_declare) == ATTR_DECLARE || ATTR_DECLARE == USHRT_MAX);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_default) == Markup::HA_DEFAULT || Markup::HA_DEFAULT == USHRT_MAX);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_defaultChecked) == ATTR_CHECKED || ATTR_CHECKED == USHRT_MAX);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_defaultMuted) == ATTR_MUTED || ATTR_MUTED == USHRT_MAX);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_defaultSelected) == ATTR_SELECTED || ATTR_SELECTED == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_defaultValue) == ATTR_VALUE || ATTR_VALUE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_defer) == ATTR_DEFER || ATTR_DEFER == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_dir) == ATTR_DIR || ATTR_DIR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_dirName) == ATTR_DIRNAME || ATTR_DIRNAME == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_direction) == ATTR_DIRECTION || ATTR_DIRECTION == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_disabled) == ATTR_DISABLED || ATTR_DISABLED == USHRT_MAX);
#ifdef DRAG_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_draggable) == Markup::HA_DRAGGABLE || Markup::HA_DRAGGABLE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_dropzone) == Markup::HA_DROPZONE || Markup::HA_DROPZONE == USHRT_MAX);
#endif // DRAG_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_encoding) == ATTR_ENCTYPE || ATTR_ENCTYPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_enctype) == ATTR_ENCTYPE || ATTR_ENCTYPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_event) == ATTR_EVENT || ATTR_EVENT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_face) == ATTR_FACE || ATTR_FACE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_for) == ATTR_FOR || ATTR_FOR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_formAction) == ATTR_FORMACTION || ATTR_FORMACTION == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_formEnctype) == ATTR_FORMENCTYPE || ATTR_FORMENCTYPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_formMethod) == ATTR_FORMMETHOD || ATTR_FORMMETHOD == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_formNoValidate) == ATTR_FORMNOVALIDATE || ATTR_FORMNOVALIDATE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_formTarget) == ATTR_FORMTARGET || ATTR_FORMTARGET == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_frame) == ATTR_FRAME || ATTR_FRAME == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_frameBorder) == ATTR_FRAMEBORDER || ATTR_FRAMEBORDER == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_headers) == ATTR_HEADERS || ATTR_HEADERS == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_height) == ATTR_HEIGHT || ATTR_HEIGHT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_hidden) == ATTR_HIDDEN || ATTR_HIDDEN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_high) == ATTR_HIGH || ATTR_HIGH == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_href) == ATTR_HREF || ATTR_HREF == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_hreflang) == ATTR_HREFLANG || ATTR_HREFLANG == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_hspace) == ATTR_HSPACE || ATTR_HSPACE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_htmlFor) == ATTR_FOR || ATTR_FOR == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_httpEquiv) == ATTR_HTTP_EQUIV || ATTR_HTTP_EQUIV == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_id) == ATTR_ID || ATTR_ID == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_inputmode) == ATTR_INPUTMODE || ATTR_INPUTMODE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_isMap) == ATTR_ISMAP || ATTR_ISMAP == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_itemId) == ATTR_ITEMID || ATTR_ITEMID == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_itemProp) == ATTR_ITEMPROP || ATTR_ITEMPROP == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_itemRef) == ATTR_ITEMREF || ATTR_ITEMREF == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_itemScope) == ATTR_ITEMSCOPE || ATTR_ITEMSCOPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_itemType) == ATTR_ITEMTYPE || ATTR_ITEMTYPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_keytype) == ATTR_KEYTYPE || ATTR_KEYTYPE == USHRT_MAX);
#if defined MEDIA_HTML_SUPPORT || defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_kind) == Markup::HA_KIND || Markup::HA_KIND == USHRT_MAX);
#endif // MEDIA_HTML_SUPPORT || DRAG_SUPPORT || USE_OP_CLIPBOARD
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_label) == ATTR_LABEL || ATTR_LABEL == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_lang) == ATTR_LANG || ATTR_LANG == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_language) == ATTR_LANGUAGE || ATTR_LANGUAGE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_link) == ATTR_LINK || ATTR_LINK == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_location) == ATTR_SRC || ATTR_SRC == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_longDesc) == ATTR_LONGDESC || ATTR_LONGDESC == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_loop) == ATTR_LOOP || ATTR_LOOP == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_low) == ATTR_LOW || ATTR_LOW == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_marginHeight) == ATTR_MARGINHEIGHT || ATTR_MARGINHEIGHT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_marginWidth) == ATTR_MARGINWIDTH || ATTR_MARGINWIDTH == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_max) == ATTR_MAX || ATTR_MAX == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_maxLength) == ATTR_MAXLENGTH || ATTR_MAXLENGTH == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_media) == ATTR_MEDIA || ATTR_MEDIA == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_method) == ATTR_METHOD || ATTR_METHOD == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_min) == ATTR_MIN || ATTR_MIN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_multiple) == ATTR_MULTIPLE || ATTR_MULTIPLE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_name) == ATTR_NAME || ATTR_NAME == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_noHref) == ATTR_NOHREF || ATTR_NOHREF == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_noResize) == ATTR_NORESIZE || ATTR_NORESIZE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_noShade) == ATTR_NOSHADE || ATTR_NOSHADE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_noValidate) == ATTR_NOVALIDATE || ATTR_NOVALIDATE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_noWrap) == ATTR_NOWRAP || ATTR_NOWRAP == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_object) == ATTR_OBJECT || ATTR_OBJECT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_optimum) == ATTR_OPTIMUM || ATTR_OPTIMUM == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_pattern) == ATTR_PATTERN || ATTR_PATTERN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_placeholder) == ATTR_PLACEHOLDER || ATTR_PLACEHOLDER == USHRT_MAX);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_poster) == ATTR_POSTER || ATTR_POSTER == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_preload) == ATTR_PRELOAD || ATTR_PRELOAD == USHRT_MAX);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_prompt) == ATTR_PROMPT || ATTR_PROMPT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_pubDate) == ATTR_PUBDATE || ATTR_PUBDATE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_readOnly) == ATTR_READONLY || ATTR_READONLY == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_rel) == ATTR_REL || ATTR_REL == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_required) == ATTR_REQUIRED || ATTR_REQUIRED == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_rev) == ATTR_REV || ATTR_REV == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_reversed) == Markup::HA_REVERSED || Markup::HA_REVERSED == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_rowSpan) == ATTR_ROWSPAN || ATTR_ROWSPAN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_rows) == ATTR_ROWS || ATTR_ROWS == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_rules) == ATTR_RULES || ATTR_RULES == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_scheme) == ATTR_SCHEME || ATTR_SCHEME == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_scope) == ATTR_SCOPE || ATTR_SCOPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_scrollAmount) == ATTR_SCROLLAMOUNT || ATTR_SCROLLAMOUNT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_scrollDelay) == ATTR_SCROLLDELAY || ATTR_SCROLLDELAY == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_scrolling) == ATTR_SCROLLING || ATTR_SCROLLING == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_shape) == ATTR_SHAPE || ATTR_SHAPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_size) == ATTR_SIZE || ATTR_SIZE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_span) == ATTR_SPAN || ATTR_SPAN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_src) == ATTR_SRC || ATTR_SRC == USHRT_MAX);
#ifdef MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_srclang) == Markup::HA_SRCLANG || Markup::HA_SRCLANG == USHRT_MAX);
#endif // MEDIA_HTML_SUPPORT
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_standby) == ATTR_STANDBY || ATTR_STANDBY == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_start) == ATTR_START || ATTR_START == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_step) == ATTR_STEP || ATTR_STEP == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_style) == ATTR_STYLE || ATTR_STYLE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_summary) == ATTR_SUMMARY || ATTR_SUMMARY == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_tabIndex) == ATTR_TABINDEX || ATTR_TABINDEX == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_target) == ATTR_TARGET || ATTR_TARGET == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_text) == ATTR_TEXT || ATTR_TEXT == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_title) == ATTR_TITLE || ATTR_TITLE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_type) == ATTR_TYPE || ATTR_TYPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_unselectable) == ATTR_UNSELECTABLE || ATTR_UNSELECTABLE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_useMap) == ATTR_USEMAP || ATTR_USEMAP == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_vAlign) == ATTR_VALIGN || ATTR_VALIGN == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_vLink) == ATTR_VLINK || ATTR_VLINK == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_value) == ATTR_VALUE || ATTR_VALUE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_valueType) == ATTR_VALUETYPE || ATTR_VALUETYPE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_version) == ATTR_VERSION || ATTR_VERSION == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_vspace) == ATTR_VSPACE || ATTR_VSPACE == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_width) == ATTR_WIDTH || ATTR_WIDTH == USHRT_MAX);
  verify(DOM_AtomToHtmlAttribute(OP_ATOM_wrap) == ATTR_WRAP || ATTR_WRAP == USHRT_MAX);
}

test("Atom to SVG attribute conversion")
	require SVG_SUPPORT;
	require SVG_DOM;
{
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_alignmentBaseline) == Markup::SVGA_ALIGNMENT_BASELINE || Markup::SVGA_ALIGNMENT_BASELINE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_amplitude) == Markup::SVGA_AMPLITUDE || Markup::SVGA_AMPLITUDE == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_azimuth) == Markup::SVGA_AZIMUTH || Markup::SVGA_AZIMUTH == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_baseFrequencyX) == Markup::SVGA_BASEFREQUENCY || Markup::SVGA_BASEFREQUENCY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_baseFrequencyY) == Markup::SVGA_BASEFREQUENCY || Markup::SVGA_BASEFREQUENCY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_baselineShift) == Markup::SVGA_BASELINE_SHIFT || Markup::SVGA_BASELINE_SHIFT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_bias) == Markup::SVGA_BIAS || Markup::SVGA_BIAS == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_className) == Markup::SVGA_CLASS || Markup::SVGA_CLASS == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_clipPath) == Markup::SVGA_CLIP_PATH || Markup::SVGA_CLIP_PATH == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_clipPathUnits) == Markup::SVGA_CLIPPATHUNITS || Markup::SVGA_CLIPPATHUNITS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_clipRule) == Markup::SVGA_CLIP_RULE || Markup::SVGA_CLIP_RULE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_colorInterpolation) == Markup::SVGA_COLOR_INTERPOLATION || Markup::SVGA_COLOR_INTERPOLATION == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_colorInterpolationFilters) == Markup::SVGA_COLOR_INTERPOLATION_FILTERS || Markup::SVGA_COLOR_INTERPOLATION_FILTERS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_colorProfile) == Markup::SVGA_COLOR_PROFILE || Markup::SVGA_COLOR_PROFILE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_colorRendering) == Markup::SVGA_COLOR_RENDERING || Markup::SVGA_COLOR_RENDERING == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_cx) == Markup::SVGA_CX || Markup::SVGA_CX == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_cy) == Markup::SVGA_CY || Markup::SVGA_CY == USHRT_MAX);
#endif // SVG_DOM
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_AtomToSvgAttribute(OP_ATOM_d) == Markup::SVGA_D || Markup::SVGA_D == USHRT_MAX);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_diffuseConstant) == Markup::SVGA_DIFFUSECONSTANT || Markup::SVGA_DIFFUSECONSTANT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_divisor) == Markup::SVGA_DIVISOR || Markup::SVGA_DIVISOR == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_dominantBaseline) == Markup::SVGA_DOMINANT_BASELINE || Markup::SVGA_DOMINANT_BASELINE == USHRT_MAX);
#endif // SVG_DOM
#ifdef DRAG_SUPPORT
  verify(DOM_AtomToSvgAttribute(OP_ATOM_draggable) == Markup::SVGA_DRAGGABLE || Markup::SVGA_DRAGGABLE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_dropzone) == Markup::SVGA_DROPZONE || Markup::SVGA_DROPZONE == USHRT_MAX);
#endif // DRAG_SUPPORT
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_dx) == Markup::SVGA_DX || Markup::SVGA_DX == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_dy) == Markup::SVGA_DY || Markup::SVGA_DY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_edgeMode) == Markup::SVGA_EDGEMODE || Markup::SVGA_EDGEMODE == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_elevation) == Markup::SVGA_ELEVATION || Markup::SVGA_ELEVATION == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_enableBackground) == Markup::SVGA_ENABLE_BACKGROUND || Markup::SVGA_ENABLE_BACKGROUND == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_exponent) == Markup::SVGA_EXPONENT || Markup::SVGA_EXPONENT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_externalResourcesRequired) == Markup::SVGA_EXTERNALRESOURCESREQUIRED || Markup::SVGA_EXTERNALRESOURCESREQUIRED == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_fill) == Markup::SVGA_FILL || Markup::SVGA_FILL == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_fillOpacity) == Markup::SVGA_FILL_OPACITY || Markup::SVGA_FILL_OPACITY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_fillRule) == Markup::SVGA_FILL_RULE || Markup::SVGA_FILL_RULE == USHRT_MAX);
#endif // SVG_DOM
#if defined DOM2_TRAVERSAL || defined DOM3_LOAD || defined DOM3_SAVE || defined SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_filter) == Markup::SVGA_FILTER || Markup::SVGA_FILTER == USHRT_MAX);
#endif // DOM2_TRAVERSAL || DOM3_LOAD || DOM3_SAVE || SVG_DOM
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_filterResX) == Markup::SVGA_FILTERRES || Markup::SVGA_FILTERRES == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_filterResY) == Markup::SVGA_FILTERRES || Markup::SVGA_FILTERRES == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_filterUnits) == Markup::SVGA_FILTERUNITS || Markup::SVGA_FILTERUNITS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_floodColor) == Markup::SVGA_FLOOD_COLOR || Markup::SVGA_FLOOD_COLOR == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_floodOpacity) == Markup::SVGA_FLOOD_OPACITY || Markup::SVGA_FLOOD_OPACITY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_fx) == Markup::SVGA_FX || Markup::SVGA_FX == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_fy) == Markup::SVGA_FY || Markup::SVGA_FY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_glyphOrientationHorizontal) == Markup::SVGA_GLYPH_ORIENTATION_HORIZONTAL || Markup::SVGA_GLYPH_ORIENTATION_HORIZONTAL == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_glyphOrientationVertical) == Markup::SVGA_GLYPH_ORIENTATION_VERTICAL || Markup::SVGA_GLYPH_ORIENTATION_VERTICAL == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_gradientTransform) == Markup::SVGA_TRANSFORM || Markup::SVGA_TRANSFORM == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_gradientUnits) == Markup::SVGA_GRADIENTUNITS || Markup::SVGA_GRADIENTUNITS == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_height) == Markup::SVGA_HEIGHT || Markup::SVGA_HEIGHT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_id) == Markup::SVGA_ID || Markup::SVGA_ID == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_imageRendering) == Markup::SVGA_IMAGE_RENDERING || Markup::SVGA_IMAGE_RENDERING == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_in1) == Markup::SVGA_IN || Markup::SVGA_IN == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_in2) == Markup::SVGA_IN2 || Markup::SVGA_IN2 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_intercept) == Markup::SVGA_INTERCEPT || Markup::SVGA_INTERCEPT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_k1) == Markup::SVGA_K1 || Markup::SVGA_K1 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_k2) == Markup::SVGA_K2 || Markup::SVGA_K2 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_k3) == Markup::SVGA_K3 || Markup::SVGA_K3 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_k4) == Markup::SVGA_K4 || Markup::SVGA_K4 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_kernelMatrix) == Markup::SVGA_KERNELMATRIX || Markup::SVGA_KERNELMATRIX == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_kernelUnitLengthX) == Markup::SVGA_KERNELUNITLENGTH || Markup::SVGA_KERNELUNITLENGTH == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_kernelUnitLengthY) == Markup::SVGA_KERNELUNITLENGTH || Markup::SVGA_KERNELUNITLENGTH == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_kerning) == Markup::SVGA_KERNING || Markup::SVGA_KERNING == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_lengthAdjust) == Markup::SVGA_LENGTHADJUST || Markup::SVGA_LENGTHADJUST == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_lightingColor) == Markup::SVGA_LIGHTING_COLOR || Markup::SVGA_LIGHTING_COLOR == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_limitingConeAngle) == Markup::SVGA_LIMITINGCONEANGLE || Markup::SVGA_LIMITINGCONEANGLE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_markerEnd) == Markup::SVGA_MARKER_END || Markup::SVGA_MARKER_END == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_markerHeight) == Markup::SVGA_MARKERHEIGHT || Markup::SVGA_MARKERHEIGHT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_markerMid) == Markup::SVGA_MARKER_MID || Markup::SVGA_MARKER_MID == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_markerStart) == Markup::SVGA_MARKER_START || Markup::SVGA_MARKER_START == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_markerUnits) == Markup::SVGA_MARKERUNITS || Markup::SVGA_MARKERUNITS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_markerWidth) == Markup::SVGA_MARKERWIDTH || Markup::SVGA_MARKERWIDTH == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_mask) == Markup::SVGA_MASK || Markup::SVGA_MASK == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_maskContentUnits) == Markup::SVGA_MASKCONTENTUNITS || Markup::SVGA_MASKCONTENTUNITS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_maskUnits) == Markup::SVGA_MASKUNITS || Markup::SVGA_MASKUNITS == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_media) == Markup::SVGA_MEDIA || Markup::SVGA_MEDIA == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_method) == Markup::SVGA_METHOD || Markup::SVGA_METHOD == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_mode) == Markup::SVGA_MODE || Markup::SVGA_MODE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_numOctaves) == Markup::SVGA_NUMOCTAVES || Markup::SVGA_NUMOCTAVES == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_offset) == Markup::SVGA_OFFSET || Markup::SVGA_OFFSET == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_operator) == Markup::SVGA_OPERATOR || Markup::SVGA_OPERATOR == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_orderX) == Markup::SVGA_ORDER || Markup::SVGA_ORDER == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_orderY) == Markup::SVGA_ORDER || Markup::SVGA_ORDER == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_orientAngle) == Markup::SVGA_ORIENT || Markup::SVGA_ORIENT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_orientType) == Markup::SVGA_ORIENT || Markup::SVGA_ORIENT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_pathLength) == Markup::SVGA_PATHLENGTH || Markup::SVGA_PATHLENGTH == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_patternContentUnits) == Markup::SVGA_PATTERNCONTENTUNITS || Markup::SVGA_PATTERNCONTENTUNITS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_patternTransform) == Markup::SVGA_PATTERNTRANSFORM || Markup::SVGA_PATTERNTRANSFORM == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_patternUnits) == Markup::SVGA_PATTERNUNITS || Markup::SVGA_PATTERNUNITS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_pointerEvents) == Markup::SVGA_POINTER_EVENTS || Markup::SVGA_POINTER_EVENTS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_pointsAtX) == Markup::SVGA_POINTSATX || Markup::SVGA_POINTSATX == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_pointsAtY) == Markup::SVGA_POINTSATY || Markup::SVGA_POINTSATY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_pointsAtZ) == Markup::SVGA_POINTSATZ || Markup::SVGA_POINTSATZ == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_preserveAlpha) == Markup::SVGA_PRESERVEALPHA || Markup::SVGA_PRESERVEALPHA == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_preserveAspectRatio) == Markup::SVGA_PRESERVEASPECTRATIO || Markup::SVGA_PRESERVEASPECTRATIO == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_primitiveUnits) == Markup::SVGA_PRIMITIVEUNITS || Markup::SVGA_PRIMITIVEUNITS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_r) == Markup::SVGA_R || Markup::SVGA_R == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_radiusX) == Markup::SVGA_RADIUS || Markup::SVGA_RADIUS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_radiusY) == Markup::SVGA_RADIUS || Markup::SVGA_RADIUS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_refX) == Markup::SVGA_REFX || Markup::SVGA_REFX == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_refY) == Markup::SVGA_REFY || Markup::SVGA_REFY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_requiredExtensions) == Markup::SVGA_REQUIREDEXTENSIONS || Markup::SVGA_REQUIREDEXTENSIONS == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_requiredFeatures) == Markup::SVGA_REQUIREDFEATURES || Markup::SVGA_REQUIREDFEATURES == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_result) == Markup::SVGA_RESULT || Markup::SVGA_RESULT == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_rotate) == Markup::SVGA_ROTATE || Markup::SVGA_ROTATE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_rx) == Markup::SVGA_RX || Markup::SVGA_RX == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_ry) == Markup::SVGA_RY || Markup::SVGA_RY == USHRT_MAX);
#endif // SVG_DOM
#if defined(SVG_DOM) || defined(TOUCH_EVENTS_SUPPORT)
  verify(DOM_AtomToSvgAttribute(OP_ATOM_scale) == Markup::SVGA_SCALE || Markup::SVGA_SCALE == USHRT_MAX);
#endif // SVG_DOM || TOUCH_EVENTS_SUPPORT
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_seed) == Markup::SVGA_SEED || Markup::SVGA_SEED == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_shapeRendering) == Markup::SVGA_SHAPE_RENDERING || Markup::SVGA_SHAPE_RENDERING == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_slope) == Markup::SVGA_SLOPE || Markup::SVGA_SLOPE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_spacing) == Markup::SVGA_SPACING || Markup::SVGA_SPACING == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_specularConstant) == Markup::SVGA_SPECULARCONSTANT || Markup::SVGA_SPECULARCONSTANT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_specularExponent) == Markup::SVGA_SPECULAREXPONENT || Markup::SVGA_SPECULAREXPONENT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_spreadMethod) == Markup::SVGA_SPREADMETHOD || Markup::SVGA_SPREADMETHOD == USHRT_MAX);
#endif // SVG_DOM
#if defined(DOM2_RANGE) || defined(SVG_DOM)
  verify(DOM_AtomToSvgAttribute(OP_ATOM_startOffset) == Markup::SVGA_STARTOFFSET || Markup::SVGA_STARTOFFSET == USHRT_MAX);
#endif // DOM2_RANGE || SVG_DOM
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_stdDeviationX) == Markup::SVGA_STDDEVIATION || Markup::SVGA_STDDEVIATION == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_stdDeviationY) == Markup::SVGA_STDDEVIATION || Markup::SVGA_STDDEVIATION == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_stitchTiles) == Markup::SVGA_STITCHTILES || Markup::SVGA_STITCHTILES == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_stopColor) == Markup::SVGA_STOP_COLOR || Markup::SVGA_STOP_COLOR == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_stopOpacity) == Markup::SVGA_STOP_OPACITY || Markup::SVGA_STOP_OPACITY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_stroke) == Markup::SVGA_STROKE || Markup::SVGA_STROKE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_strokeDasharray) == Markup::SVGA_STROKE_DASHARRAY || Markup::SVGA_STROKE_DASHARRAY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_strokeDashoffset) == Markup::SVGA_STROKE_DASHOFFSET || Markup::SVGA_STROKE_DASHOFFSET == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_strokeLinecap) == Markup::SVGA_STROKE_LINECAP || Markup::SVGA_STROKE_LINECAP == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_strokeLinejoin) == Markup::SVGA_STROKE_LINEJOIN || Markup::SVGA_STROKE_LINEJOIN == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_strokeMiterlimit) == Markup::SVGA_STROKE_MITERLIMIT || Markup::SVGA_STROKE_MITERLIMIT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_strokeOpacity) == Markup::SVGA_STROKE_OPACITY || Markup::SVGA_STROKE_OPACITY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_strokeWidth) == Markup::SVGA_STROKE_WIDTH || Markup::SVGA_STROKE_WIDTH == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_surfaceScale) == Markup::SVGA_SURFACESCALE || Markup::SVGA_SURFACESCALE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_systemLanguage) == Markup::SVGA_SYSTEMLANGUAGE || Markup::SVGA_SYSTEMLANGUAGE == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_tableValues) == Markup::SVGA_TABLEVALUES || Markup::SVGA_TABLEVALUES == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_target) == Markup::SVGA_TARGET || Markup::SVGA_TARGET == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_targetX) == Markup::SVGA_TARGETX || Markup::SVGA_TARGETX == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_targetY) == Markup::SVGA_TARGETY || Markup::SVGA_TARGETY == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_textAnchor) == Markup::SVGA_TEXT_ANCHOR || Markup::SVGA_TEXT_ANCHOR == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_textLength) == Markup::SVGA_TEXTLENGTH || Markup::SVGA_TEXTLENGTH == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_textRendering) == Markup::SVGA_TEXT_RENDERING || Markup::SVGA_TEXT_RENDERING == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_title) == Markup::SVGA_TITLE || Markup::SVGA_TITLE == USHRT_MAX);
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_AtomToSvgAttribute(OP_ATOM_transform) == Markup::SVGA_TRANSFORM || Markup::SVGA_TRANSFORM == USHRT_MAX);
#endif // SVG_DOM || CSS_TRANSFORMS
  verify(DOM_AtomToSvgAttribute(OP_ATOM_type) == Markup::SVGA_TYPE || Markup::SVGA_TYPE == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_values) == Markup::SVGA_VALUES || Markup::SVGA_VALUES == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_vectorEffect) == Markup::SVGA_VECTOR_EFFECT || Markup::SVGA_VECTOR_EFFECT == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_viewBox) == Markup::SVGA_VIEWBOX || Markup::SVGA_VIEWBOX == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_width) == Markup::SVGA_WIDTH || Markup::SVGA_WIDTH == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_writingMode) == Markup::SVGA_WRITING_MODE || Markup::SVGA_WRITING_MODE == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_x) == Markup::SVGA_X || Markup::SVGA_X == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_x1) == Markup::SVGA_X1 || Markup::SVGA_X1 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_x2) == Markup::SVGA_X2 || Markup::SVGA_X2 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_xChannelSelector) == Markup::SVGA_XCHANNELSELECTOR || Markup::SVGA_XCHANNELSELECTOR == USHRT_MAX);
#endif // SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_y) == Markup::SVGA_Y || Markup::SVGA_Y == USHRT_MAX);
#ifdef SVG_DOM
  verify(DOM_AtomToSvgAttribute(OP_ATOM_y1) == Markup::SVGA_Y1 || Markup::SVGA_Y1 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_y2) == Markup::SVGA_Y2 || Markup::SVGA_Y2 == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_yChannelSelector) == Markup::SVGA_YCHANNELSELECTOR || Markup::SVGA_YCHANNELSELECTOR == USHRT_MAX);
  verify(DOM_AtomToSvgAttribute(OP_ATOM_z) == Markup::SVGA_Z || Markup::SVGA_Z == USHRT_MAX);
#endif // SVG_DOM
}

test("Atom to CSS property conversion")
{
  verify(DOM_AtomToCssProperty(OP_ATOM_AppleDashboardRegion) == CSS_PROPERTY__apple_dashboard_region);
  verify(DOM_AtomToCssProperty(OP_ATOM_OBorderImage) == CSS_PROPERTY__o_border_image);
#ifdef CSS_MINI_EXTENSIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_OFocusOpacity) == CSS_PROPERTY__o_focus_opacity);
#endif // CSS_MINI_EXTENSIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_OLink) == CSS_PROPERTY__o_link);
  verify(DOM_AtomToCssProperty(OP_ATOM_OLinkSource) == CSS_PROPERTY__o_link_source);
#ifdef CSS_MINI_EXTENSIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_OMiniFold) == CSS_PROPERTY__o_mini_fold);
#endif // CSS_MINI_EXTENSIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_OObjectFit) == CSS_PROPERTY__o_object_fit);
  verify(DOM_AtomToCssProperty(OP_ATOM_OObjectPosition) == CSS_PROPERTY__o_object_position);
  verify(DOM_AtomToCssProperty(OP_ATOM_OTabSize) == CSS_PROPERTY__o_tab_size);
  verify(DOM_AtomToCssProperty(OP_ATOM_OTableBaseline) == CSS_PROPERTY__o_table_baseline);
#ifdef CSS_TRANSFORMS
  verify(DOM_AtomToCssProperty(OP_ATOM_OTransform) == CSS_PROPERTY_transform);
  verify(DOM_AtomToCssProperty(OP_ATOM_OTransformOrigin) == CSS_PROPERTY_transform_origin);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_OTransition) == CSS_PROPERTY_transition);
  verify(DOM_AtomToCssProperty(OP_ATOM_OTransitionDelay) == CSS_PROPERTY_transition_delay);
  verify(DOM_AtomToCssProperty(OP_ATOM_OTransitionDuration) == CSS_PROPERTY_transition_duration);
  verify(DOM_AtomToCssProperty(OP_ATOM_OTransitionProperty) == CSS_PROPERTY_transition_property);
  verify(DOM_AtomToCssProperty(OP_ATOM_OTransitionTimingFunction) == CSS_PROPERTY_transition_timing_function);
#endif // CSS_TRANSITIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_WapAccesskey) == CSS_PROPERTY__wap_accesskey);
  verify(DOM_AtomToCssProperty(OP_ATOM_WapInputFormat) == CSS_PROPERTY__wap_input_format);
  verify(DOM_AtomToCssProperty(OP_ATOM_WapInputRequired) == CSS_PROPERTY__wap_input_required);
  verify(DOM_AtomToCssProperty(OP_ATOM_WapMarqueeDir) == CSS_PROPERTY__wap_marquee_dir);
  verify(DOM_AtomToCssProperty(OP_ATOM_WapMarqueeLoop) == CSS_PROPERTY__wap_marquee_loop);
  verify(DOM_AtomToCssProperty(OP_ATOM_WapMarqueeSpeed) == CSS_PROPERTY__wap_marquee_speed);
  verify(DOM_AtomToCssProperty(OP_ATOM_WapMarqueeStyle) == CSS_PROPERTY__wap_marquee_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitBackgroundSize) == CSS_PROPERTY_background_size);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitBorderBottomLeftRadius) == CSS_PROPERTY_border_bottom_left_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitBorderBottomRightRadius) == CSS_PROPERTY_border_bottom_right_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitBorderRadius) == CSS_PROPERTY_border_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitBorderTopLeftRadius) == CSS_PROPERTY_border_top_left_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitBorderTopRightRadius) == CSS_PROPERTY_border_top_right_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitBoxShadow) == CSS_PROPERTY_box_shadow);
#ifdef CSS_TRANSFORMS
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitTransform) == CSS_PROPERTY_transform);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitTransformOrigin) == CSS_PROPERTY_transform_origin);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitTransition) == CSS_PROPERTY_transition);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitTransitionDelay) == CSS_PROPERTY_transition_delay);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitTransitionDuration) == CSS_PROPERTY_transition_duration);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitTransitionProperty) == CSS_PROPERTY_transition_property);
  verify(DOM_AtomToCssProperty(OP_ATOM_WebkitTransitionTimingFunction) == CSS_PROPERTY_transition_timing_function);
#endif // CSS_TRANSITIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_alignContent) == CSS_PROPERTY_align_content);
  verify(DOM_AtomToCssProperty(OP_ATOM_alignItems) == CSS_PROPERTY_align_items);
  verify(DOM_AtomToCssProperty(OP_ATOM_alignSelf) == CSS_PROPERTY_align_self);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_alignmentBaseline) == CSS_PROPERTY_alignment_baseline);
#endif // SVG_DOM
#ifdef CSS_ANIMATIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_animation) == CSS_PROPERTY_animation);
  verify(DOM_AtomToCssProperty(OP_ATOM_animationDelay) == CSS_PROPERTY_animation_delay);
  verify(DOM_AtomToCssProperty(OP_ATOM_animationDirection) == CSS_PROPERTY_animation_direction);
  verify(DOM_AtomToCssProperty(OP_ATOM_animationDuration) == CSS_PROPERTY_animation_duration);
  verify(DOM_AtomToCssProperty(OP_ATOM_animationFillMode) == CSS_PROPERTY_animation_fill_mode);
  verify(DOM_AtomToCssProperty(OP_ATOM_animationIterationCount) == CSS_PROPERTY_animation_iteration_count);
  verify(DOM_AtomToCssProperty(OP_ATOM_animationName) == CSS_PROPERTY_animation_name);
  verify(DOM_AtomToCssProperty(OP_ATOM_animationPlayState) == CSS_PROPERTY_animation_play_state);
  verify(DOM_AtomToCssProperty(OP_ATOM_animationTimingFunction) == CSS_PROPERTY_animation_timing_function);
#endif // CSS_ANIMATIONS
#if defined SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_audioLevel) == CSS_PROPERTY_audio_level);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_background) == CSS_PROPERTY_background);
  verify(DOM_AtomToCssProperty(OP_ATOM_backgroundAttachment) == CSS_PROPERTY_background_attachment);
  verify(DOM_AtomToCssProperty(OP_ATOM_backgroundClip) == CSS_PROPERTY_background_clip);
  verify(DOM_AtomToCssProperty(OP_ATOM_backgroundColor) == CSS_PROPERTY_background_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_backgroundImage) == CSS_PROPERTY_background_image);
  verify(DOM_AtomToCssProperty(OP_ATOM_backgroundOrigin) == CSS_PROPERTY_background_origin);
  verify(DOM_AtomToCssProperty(OP_ATOM_backgroundPosition) == CSS_PROPERTY_background_position);
  verify(DOM_AtomToCssProperty(OP_ATOM_backgroundRepeat) == CSS_PROPERTY_background_repeat);
  verify(DOM_AtomToCssProperty(OP_ATOM_backgroundSize) == CSS_PROPERTY_background_size);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_baselineShift) == CSS_PROPERTY_baseline_shift);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_border) == CSS_PROPERTY_border);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderBottom) == CSS_PROPERTY_border_bottom);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderBottomColor) == CSS_PROPERTY_border_bottom_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderBottomLeftRadius) == CSS_PROPERTY_border_bottom_left_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderBottomRightRadius) == CSS_PROPERTY_border_bottom_right_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderBottomStyle) == CSS_PROPERTY_border_bottom_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderBottomWidth) == CSS_PROPERTY_border_bottom_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderCollapse) == CSS_PROPERTY_border_collapse);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderColor) == CSS_PROPERTY_border_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderLeft) == CSS_PROPERTY_border_left);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderLeftColor) == CSS_PROPERTY_border_left_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderLeftStyle) == CSS_PROPERTY_border_left_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderLeftWidth) == CSS_PROPERTY_border_left_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderRadius) == CSS_PROPERTY_border_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderRight) == CSS_PROPERTY_border_right);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderRightColor) == CSS_PROPERTY_border_right_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderRightStyle) == CSS_PROPERTY_border_right_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderRightWidth) == CSS_PROPERTY_border_right_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderSpacing) == CSS_PROPERTY_border_spacing);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderStyle) == CSS_PROPERTY_border_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderTop) == CSS_PROPERTY_border_top);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderTopColor) == CSS_PROPERTY_border_top_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderTopLeftRadius) == CSS_PROPERTY_border_top_left_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderTopRightRadius) == CSS_PROPERTY_border_top_right_radius);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderTopStyle) == CSS_PROPERTY_border_top_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderTopWidth) == CSS_PROPERTY_border_top_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_borderWidth) == CSS_PROPERTY_border_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_bottom) == CSS_PROPERTY_bottom);
  verify(DOM_AtomToCssProperty(OP_ATOM_boxDecorationBreak) == CSS_PROPERTY_box_decoration_break);
  verify(DOM_AtomToCssProperty(OP_ATOM_boxShadow) == CSS_PROPERTY_box_shadow);
  verify(DOM_AtomToCssProperty(OP_ATOM_boxSizing) == CSS_PROPERTY_box_sizing);
  verify(DOM_AtomToCssProperty(OP_ATOM_breakAfter) == CSS_PROPERTY_break_after);
  verify(DOM_AtomToCssProperty(OP_ATOM_breakBefore) == CSS_PROPERTY_break_before);
  verify(DOM_AtomToCssProperty(OP_ATOM_breakInside) == CSS_PROPERTY_break_inside);
  verify(DOM_AtomToCssProperty(OP_ATOM_bufferedRendering) == CSS_PROPERTY_buffered_rendering);
  verify(DOM_AtomToCssProperty(OP_ATOM_captionSide) == CSS_PROPERTY_caption_side);
#ifdef CSS_CHARACTER_TYPE_SUPPORT
  verify(DOM_AtomToCssProperty(OP_ATOM_characterType) == CSS_PROPERTY_character_type);
#endif // CSS_CHARACTER_TYPE_SUPPORT
  verify(DOM_AtomToCssProperty(OP_ATOM_clear) == CSS_PROPERTY_clear);
  verify(DOM_AtomToCssProperty(OP_ATOM_clip) == CSS_PROPERTY_clip);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_clipPath) == CSS_PROPERTY_clip_path);
  verify(DOM_AtomToCssProperty(OP_ATOM_clipRule) == CSS_PROPERTY_clip_rule);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_color) == CSS_PROPERTY_color);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_colorInterpolation) == CSS_PROPERTY_color_interpolation);
  verify(DOM_AtomToCssProperty(OP_ATOM_colorInterpolationFilters) == CSS_PROPERTY_color_interpolation_filters);
  verify(DOM_AtomToCssProperty(OP_ATOM_colorProfile) == CSS_PROPERTY_color_profile);
  verify(DOM_AtomToCssProperty(OP_ATOM_colorRendering) == CSS_PROPERTY_color_rendering);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_columnCount) == CSS_PROPERTY_column_count);
  verify(DOM_AtomToCssProperty(OP_ATOM_columnFill) == CSS_PROPERTY_column_fill);
  verify(DOM_AtomToCssProperty(OP_ATOM_columnGap) == CSS_PROPERTY_column_gap);
  verify(DOM_AtomToCssProperty(OP_ATOM_columnRule) == CSS_PROPERTY_column_rule);
  verify(DOM_AtomToCssProperty(OP_ATOM_columnRuleColor) == CSS_PROPERTY_column_rule_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_columnRuleStyle) == CSS_PROPERTY_column_rule_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_columnRuleWidth) == CSS_PROPERTY_column_rule_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_columnSpan) == CSS_PROPERTY_column_span);
  verify(DOM_AtomToCssProperty(OP_ATOM_columnWidth) == CSS_PROPERTY_column_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_columns) == CSS_PROPERTY_columns);
  verify(DOM_AtomToCssProperty(OP_ATOM_content) == CSS_PROPERTY_content);
  verify(DOM_AtomToCssProperty(OP_ATOM_counterIncrement) == CSS_PROPERTY_counter_increment);
  verify(DOM_AtomToCssProperty(OP_ATOM_counterReset) == CSS_PROPERTY_counter_reset);
  verify(DOM_AtomToCssProperty(OP_ATOM_cssFloat) == CSS_PROPERTY_float);
  verify(DOM_AtomToCssProperty(OP_ATOM_cursor) == CSS_PROPERTY_cursor);
  verify(DOM_AtomToCssProperty(OP_ATOM_direction) == CSS_PROPERTY_direction);
  verify(DOM_AtomToCssProperty(OP_ATOM_display) == CSS_PROPERTY_display);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_displayAlign) == CSS_PROPERTY_display_align);
  verify(DOM_AtomToCssProperty(OP_ATOM_dominantBaseline) == CSS_PROPERTY_dominant_baseline);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_emptyCells) == CSS_PROPERTY_empty_cells);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_enableBackground) == CSS_PROPERTY_enable_background);
  verify(DOM_AtomToCssProperty(OP_ATOM_fill) == CSS_PROPERTY_fill);
  verify(DOM_AtomToCssProperty(OP_ATOM_fillOpacity) == CSS_PROPERTY_fill_opacity);
  verify(DOM_AtomToCssProperty(OP_ATOM_fillRule) == CSS_PROPERTY_fill_rule);
#endif // SVG_DOM
#if defined DOM2_TRAVERSAL || defined DOM3_LOAD || defined DOM3_SAVE || defined SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_filter) == CSS_PROPERTY_filter);
#endif // DOM2_TRAVERSAL || DOM3_LOAD || DOM3_SAVE || SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_flex) == CSS_PROPERTY_flex);
  verify(DOM_AtomToCssProperty(OP_ATOM_flexBasis) == CSS_PROPERTY_flex_basis);
  verify(DOM_AtomToCssProperty(OP_ATOM_flexDirection) == CSS_PROPERTY_flex_direction);
  verify(DOM_AtomToCssProperty(OP_ATOM_flexFlow) == CSS_PROPERTY_flex_flow);
  verify(DOM_AtomToCssProperty(OP_ATOM_flexGrow) == CSS_PROPERTY_flex_grow);
  verify(DOM_AtomToCssProperty(OP_ATOM_flexShrink) == CSS_PROPERTY_flex_shrink);
  verify(DOM_AtomToCssProperty(OP_ATOM_flexWrap) == CSS_PROPERTY_flex_wrap);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_floodColor) == CSS_PROPERTY_flood_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_floodOpacity) == CSS_PROPERTY_flood_opacity);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_font) == CSS_PROPERTY_font);
  verify(DOM_AtomToCssProperty(OP_ATOM_fontFamily) == CSS_PROPERTY_font_family);
  verify(DOM_AtomToCssProperty(OP_ATOM_fontSize) == CSS_PROPERTY_font_size);
  verify(DOM_AtomToCssProperty(OP_ATOM_fontSizeAdjust) == CSS_PROPERTY_font_size_adjust);
  verify(DOM_AtomToCssProperty(OP_ATOM_fontStretch) == CSS_PROPERTY_font_stretch);
  verify(DOM_AtomToCssProperty(OP_ATOM_fontStyle) == CSS_PROPERTY_font_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_fontVariant) == CSS_PROPERTY_font_variant);
  verify(DOM_AtomToCssProperty(OP_ATOM_fontWeight) == CSS_PROPERTY_font_weight);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_glyphOrientationHorizontal) == CSS_PROPERTY_glyph_orientation_horizontal);
  verify(DOM_AtomToCssProperty(OP_ATOM_glyphOrientationVertical) == CSS_PROPERTY_glyph_orientation_vertical);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_height) == CSS_PROPERTY_height);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_imageRendering) == CSS_PROPERTY_image_rendering);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_inputFormat) == CSS_PROPERTY_input_format);
  verify(DOM_AtomToCssProperty(OP_ATOM_justifyContent) == CSS_PROPERTY_justify_content);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_kerning) == CSS_PROPERTY_kerning);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_left) == CSS_PROPERTY_left);
  verify(DOM_AtomToCssProperty(OP_ATOM_letterSpacing) == CSS_PROPERTY_letter_spacing);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_lightingColor) == CSS_PROPERTY_lighting_color);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_lineHeight) == CSS_PROPERTY_line_height);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_lineIncrement) == CSS_PROPERTY_line_increment);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_listStyle) == CSS_PROPERTY_list_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_listStyleImage) == CSS_PROPERTY_list_style_image);
  verify(DOM_AtomToCssProperty(OP_ATOM_listStylePosition) == CSS_PROPERTY_list_style_position);
  verify(DOM_AtomToCssProperty(OP_ATOM_listStyleType) == CSS_PROPERTY_list_style_type);
  verify(DOM_AtomToCssProperty(OP_ATOM_margin) == CSS_PROPERTY_margin);
  verify(DOM_AtomToCssProperty(OP_ATOM_marginBottom) == CSS_PROPERTY_margin_bottom);
  verify(DOM_AtomToCssProperty(OP_ATOM_marginLeft) == CSS_PROPERTY_margin_left);
  verify(DOM_AtomToCssProperty(OP_ATOM_marginRight) == CSS_PROPERTY_margin_right);
  verify(DOM_AtomToCssProperty(OP_ATOM_marginTop) == CSS_PROPERTY_margin_top);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_marker) == CSS_PROPERTY_marker);
  verify(DOM_AtomToCssProperty(OP_ATOM_markerEnd) == CSS_PROPERTY_marker_end);
  verify(DOM_AtomToCssProperty(OP_ATOM_markerMid) == CSS_PROPERTY_marker_mid);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_markerOffset) == CSS_PROPERTY_marker_offset);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_markerStart) == CSS_PROPERTY_marker_start);
  verify(DOM_AtomToCssProperty(OP_ATOM_mask) == CSS_PROPERTY_mask);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_maxHeight) == CSS_PROPERTY_max_height);
  verify(DOM_AtomToCssProperty(OP_ATOM_maxWidth) == CSS_PROPERTY_max_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_maxZoom) == CSS_PROPERTY_max_zoom);
  verify(DOM_AtomToCssProperty(OP_ATOM_minHeight) == CSS_PROPERTY_min_height);
  verify(DOM_AtomToCssProperty(OP_ATOM_minWidth) == CSS_PROPERTY_min_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_minZoom) == CSS_PROPERTY_min_zoom);
  verify(DOM_AtomToCssProperty(OP_ATOM_navDown) == CSS_PROPERTY_nav_down);
  verify(DOM_AtomToCssProperty(OP_ATOM_navIndex) == CSS_PROPERTY_nav_index);
  verify(DOM_AtomToCssProperty(OP_ATOM_navLeft) == CSS_PROPERTY_nav_left);
  verify(DOM_AtomToCssProperty(OP_ATOM_navRight) == CSS_PROPERTY_nav_right);
  verify(DOM_AtomToCssProperty(OP_ATOM_navUp) == CSS_PROPERTY_nav_up);
  verify(DOM_AtomToCssProperty(OP_ATOM_opacity) == CSS_PROPERTY_opacity);
  verify(DOM_AtomToCssProperty(OP_ATOM_order) == CSS_PROPERTY_order);
  verify(DOM_AtomToCssProperty(OP_ATOM_orientation) == CSS_PROPERTY_orientation);
  verify(DOM_AtomToCssProperty(OP_ATOM_orphans) == CSS_PROPERTY_orphans);
  verify(DOM_AtomToCssProperty(OP_ATOM_outline) == CSS_PROPERTY_outline);
  verify(DOM_AtomToCssProperty(OP_ATOM_outlineColor) == CSS_PROPERTY_outline_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_outlineOffset) == CSS_PROPERTY_outline_offset);
  verify(DOM_AtomToCssProperty(OP_ATOM_outlineStyle) == CSS_PROPERTY_outline_style);
  verify(DOM_AtomToCssProperty(OP_ATOM_outlineWidth) == CSS_PROPERTY_outline_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_overflow) == CSS_PROPERTY_overflow);
  verify(DOM_AtomToCssProperty(OP_ATOM_overflowWrap) == CSS_PROPERTY_overflow_wrap);
  verify(DOM_AtomToCssProperty(OP_ATOM_overflowX) == CSS_PROPERTY_overflow_x);
  verify(DOM_AtomToCssProperty(OP_ATOM_overflowY) == CSS_PROPERTY_overflow_y);
  verify(DOM_AtomToCssProperty(OP_ATOM_padding) == CSS_PROPERTY_padding);
  verify(DOM_AtomToCssProperty(OP_ATOM_paddingBottom) == CSS_PROPERTY_padding_bottom);
  verify(DOM_AtomToCssProperty(OP_ATOM_paddingLeft) == CSS_PROPERTY_padding_left);
  verify(DOM_AtomToCssProperty(OP_ATOM_paddingRight) == CSS_PROPERTY_padding_right);
  verify(DOM_AtomToCssProperty(OP_ATOM_paddingTop) == CSS_PROPERTY_padding_top);
  verify(DOM_AtomToCssProperty(OP_ATOM_page) == CSS_PROPERTY_page);
  verify(DOM_AtomToCssProperty(OP_ATOM_pageBreakAfter) == CSS_PROPERTY_page_break_after);
  verify(DOM_AtomToCssProperty(OP_ATOM_pageBreakBefore) == CSS_PROPERTY_page_break_before);
  verify(DOM_AtomToCssProperty(OP_ATOM_pageBreakInside) == CSS_PROPERTY_page_break_inside);
  verify(DOM_AtomToCssProperty(OP_ATOM_pixelBottom) == CSS_PROPERTY_bottom);
  verify(DOM_AtomToCssProperty(OP_ATOM_pixelHeight) == CSS_PROPERTY_height);
  verify(DOM_AtomToCssProperty(OP_ATOM_pixelLeft) == CSS_PROPERTY_left);
  verify(DOM_AtomToCssProperty(OP_ATOM_pixelRight) == CSS_PROPERTY_right);
  verify(DOM_AtomToCssProperty(OP_ATOM_pixelTop) == CSS_PROPERTY_top);
  verify(DOM_AtomToCssProperty(OP_ATOM_pixelWidth) == CSS_PROPERTY_width);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_pointerEvents) == CSS_PROPERTY_pointer_events);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_posBottom) == CSS_PROPERTY_bottom);
  verify(DOM_AtomToCssProperty(OP_ATOM_posHeight) == CSS_PROPERTY_height);
  verify(DOM_AtomToCssProperty(OP_ATOM_posLeft) == CSS_PROPERTY_left);
  verify(DOM_AtomToCssProperty(OP_ATOM_posRight) == CSS_PROPERTY_right);
  verify(DOM_AtomToCssProperty(OP_ATOM_posTop) == CSS_PROPERTY_top);
  verify(DOM_AtomToCssProperty(OP_ATOM_posWidth) == CSS_PROPERTY_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_position) == CSS_PROPERTY_position);
  verify(DOM_AtomToCssProperty(OP_ATOM_quotes) == CSS_PROPERTY_quotes);
  verify(DOM_AtomToCssProperty(OP_ATOM_resize) == CSS_PROPERTY_resize);
  verify(DOM_AtomToCssProperty(OP_ATOM_right) == CSS_PROPERTY_right);
  verify(DOM_AtomToCssProperty(OP_ATOM_scrollbar3dlightColor) == CSS_PROPERTY_scrollbar_3dlight_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_scrollbarArrowColor) == CSS_PROPERTY_scrollbar_arrow_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_scrollbarBaseColor) == CSS_PROPERTY_scrollbar_base_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_scrollbarDarkshadowColor) == CSS_PROPERTY_scrollbar_darkshadow_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_scrollbarFaceColor) == CSS_PROPERTY_scrollbar_face_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_scrollbarHighlightColor) == CSS_PROPERTY_scrollbar_highlight_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_scrollbarShadowColor) == CSS_PROPERTY_scrollbar_shadow_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_scrollbarTrackColor) == CSS_PROPERTY_scrollbar_track_color);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_shapeRendering) == CSS_PROPERTY_shape_rendering);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_size) == CSS_PROPERTY_size);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_solidColor) == CSS_PROPERTY_solid_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_solidOpacity) == CSS_PROPERTY_solid_opacity);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_src) == CSS_PROPERTY_src);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_stopColor) == CSS_PROPERTY_stop_color);
  verify(DOM_AtomToCssProperty(OP_ATOM_stopOpacity) == CSS_PROPERTY_stop_opacity);
  verify(DOM_AtomToCssProperty(OP_ATOM_stroke) == CSS_PROPERTY_stroke);
  verify(DOM_AtomToCssProperty(OP_ATOM_strokeDasharray) == CSS_PROPERTY_stroke_dasharray);
  verify(DOM_AtomToCssProperty(OP_ATOM_strokeDashoffset) == CSS_PROPERTY_stroke_dashoffset);
  verify(DOM_AtomToCssProperty(OP_ATOM_strokeLinecap) == CSS_PROPERTY_stroke_linecap);
  verify(DOM_AtomToCssProperty(OP_ATOM_strokeLinejoin) == CSS_PROPERTY_stroke_linejoin);
  verify(DOM_AtomToCssProperty(OP_ATOM_strokeMiterlimit) == CSS_PROPERTY_stroke_miterlimit);
  verify(DOM_AtomToCssProperty(OP_ATOM_strokeOpacity) == CSS_PROPERTY_stroke_opacity);
  verify(DOM_AtomToCssProperty(OP_ATOM_strokeWidth) == CSS_PROPERTY_stroke_width);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_styleFloat) == CSS_PROPERTY_float);
  verify(DOM_AtomToCssProperty(OP_ATOM_tableLayout) == CSS_PROPERTY_table_layout);
  verify(DOM_AtomToCssProperty(OP_ATOM_textAlign) == CSS_PROPERTY_text_align);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_textAnchor) == CSS_PROPERTY_text_anchor);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_textDecoration) == CSS_PROPERTY_text_decoration);
  verify(DOM_AtomToCssProperty(OP_ATOM_textIndent) == CSS_PROPERTY_text_indent);
  verify(DOM_AtomToCssProperty(OP_ATOM_textOverflow) == CSS_PROPERTY_text_overflow);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_textRendering) == CSS_PROPERTY_text_rendering);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_textShadow) == CSS_PROPERTY_text_shadow);
  verify(DOM_AtomToCssProperty(OP_ATOM_textTransform) == CSS_PROPERTY_text_transform);
  verify(DOM_AtomToCssProperty(OP_ATOM_top) == CSS_PROPERTY_top);
#if defined SVG_DOM || defined CSS_TRANSFORMS
  verify(DOM_AtomToCssProperty(OP_ATOM_transform) == CSS_PROPERTY_transform);
#endif // SVG_DOM || CSS_TRANSFORMS
#ifdef CSS_TRANSFORMS
  verify(DOM_AtomToCssProperty(OP_ATOM_transformOrigin) == CSS_PROPERTY_transform_origin);
#endif // CSS_TRANSFORMS
#ifdef CSS_TRANSITIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_transition) == CSS_PROPERTY_transition);
  verify(DOM_AtomToCssProperty(OP_ATOM_transitionDelay) == CSS_PROPERTY_transition_delay);
  verify(DOM_AtomToCssProperty(OP_ATOM_transitionDuration) == CSS_PROPERTY_transition_duration);
  verify(DOM_AtomToCssProperty(OP_ATOM_transitionProperty) == CSS_PROPERTY_transition_property);
  verify(DOM_AtomToCssProperty(OP_ATOM_transitionTimingFunction) == CSS_PROPERTY_transition_timing_function);
#endif // CSS_TRANSITIONS
  verify(DOM_AtomToCssProperty(OP_ATOM_unicodeBidi) == CSS_PROPERTY_unicode_bidi);
  verify(DOM_AtomToCssProperty(OP_ATOM_userZoom) == CSS_PROPERTY_user_zoom);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_vectorEffect) == CSS_PROPERTY_vector_effect);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_verticalAlign) == CSS_PROPERTY_vertical_align);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_viewportFill) == CSS_PROPERTY_viewport_fill);
  verify(DOM_AtomToCssProperty(OP_ATOM_viewportFillOpacity) == CSS_PROPERTY_viewport_fill_opacity);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_visibility) == CSS_PROPERTY_visibility);
  verify(DOM_AtomToCssProperty(OP_ATOM_whiteSpace) == CSS_PROPERTY_white_space);
  verify(DOM_AtomToCssProperty(OP_ATOM_widows) == CSS_PROPERTY_widows);
  verify(DOM_AtomToCssProperty(OP_ATOM_width) == CSS_PROPERTY_width);
  verify(DOM_AtomToCssProperty(OP_ATOM_wordSpacing) == CSS_PROPERTY_word_spacing);
  verify(DOM_AtomToCssProperty(OP_ATOM_wordWrap) == CSS_PROPERTY_overflow_wrap);
#ifdef SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_writingMode) == CSS_PROPERTY_writing_mode);
#endif // SVG_DOM
  verify(DOM_AtomToCssProperty(OP_ATOM_zIndex) == CSS_PROPERTY_z_index);
  verify(DOM_AtomToCssProperty(OP_ATOM_zoom) == CSS_PROPERTY_zoom);
}

group "DOM.OpAtom.complicated";
require init;

include "modules/dom/src/domenvironmentimpl.h";
include "modules/dom/src/domobj.h";

global
{
  class AtomsTester : public DOM_Object
  {
  private:
    OpAtom expected, got;
    BOOL result, called;

  public:
    AtomsTester()
      : expected(OP_ATOM_UNASSIGNED), got(OP_ATOM_UNASSIGNED), result(FALSE), called(FALSE)
    {
    }

    virtual ES_GetState GetIndex(int property_index, ES_Value *value, ES_Runtime *)
    {
      expected = (OpAtom) property_index;
      DOMSetUndefined(value);
      return GET_SUCCESS;
    }

    virtual ES_GetState GetName(OpAtom property_name, ES_Value *value, ES_Runtime *)
    {
      result = (got = property_name) == expected;
      called = TRUE;
      DOMSetUndefined(value);
      return GET_SUCCESS;
    }

    virtual ES_PutState PutName(OpAtom property_name, ES_Value *, ES_Runtime *)
    {
      result = property_name == expected;
      called = TRUE;
      return PUT_SUCCESS;
    }

    virtual int Call(ES_Object *, ES_Value *, int, ES_Value *return_value, ES_Runtime *)
    {
      if (result)
        DOMSetBoolean(return_value, TRUE);
      else
      {
        TempBuffer *buffer = GetEmptyTempBuf();
        char expected_int[14]; /* ARRAY OK 2009-04-24 jl */
        char got_int[14]; /* ARRAY OK 2009-04-24 jl */
        const char *expected_string, *got_string;

        op_sprintf(expected_int, "%d", (int) expected);
        op_sprintf(got_int, "%d", (int) got);

        expected_string = (expected > OP_ATOM_UNASSIGNED && expected < OP_ATOM_ABSOLUTELY_LAST_ENUM) ? DOM_AtomToString(expected) : "<invalid>";
        got_string = (got > OP_ATOM_UNASSIGNED && got < OP_ATOM_ABSOLUTELY_LAST_ENUM) ? DOM_AtomToString(got) : "<invalid>";

        CALL_FAILED_IF_ERROR(buffer->Append("Expected "));
        CALL_FAILED_IF_ERROR(buffer->Append(expected_int));
        CALL_FAILED_IF_ERROR(buffer->Append(" ("));
        CALL_FAILED_IF_ERROR(buffer->Append(expected_string));
        if (called)
        {
          CALL_FAILED_IF_ERROR(buffer->Append("), got "));
          CALL_FAILED_IF_ERROR(buffer->Append(got_int));
          CALL_FAILED_IF_ERROR(buffer->Append(" ("));
          CALL_FAILED_IF_ERROR(buffer->Append(got_string));
          CALL_FAILED_IF_ERROR(buffer->Append(")"));
        }
        else
          CALL_FAILED_IF_ERROR(buffer->Append("), got nothing"));

        DOMSetString(return_value, buffer->GetStorage());
      }

      result = FALSE;
      called = FALSE;

      return ES_VALUE;
    }
  };
}

html "";

test("Setup (c++)")
{
  verify(state.doc);
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);
  verify(state.doc->GetDOMEnvironment());
  verify(state.doc->GetDOMEnvironment()->IsEnabled());

  DOM_Environment *env = state.doc->GetDOMEnvironment();

  DOM_Object *atomstester = OP_NEW(AtomsTester, ());
  verify(atomstester != NULL);
  verify(atomstester->SetFunctionRuntime(env->GetRuntime(), UNI_L("atomsTester"), NULL, NULL) == OpStatus::OK);
  verify(env->GetWindow()->Put(UNI_L("atomsTester"), *atomstester) == OpStatus::OK);
}

language ecmascript;

test("Setup (ecmascript)")
  disabled;
{
  atoms = [
    "AppleDashboardRegion",
    "MIMEType",
    "Multimedia",
    "OBorderImage",
    "OFocusOpacity",
    "OLink",
    "OLinkSource",
    "OMiniFold",
    "OObjectFit",
    "OObjectPosition",
    "OTabSize",
    "OTableBaseline",
    "OTransform",
    "OTransformOrigin",
    "OTransition",
    "OTransitionDelay",
    "OTransitionDuration",
    "OTransitionProperty",
    "OTransitionTimingFunction",
    "URL",
    "WapAccesskey",
    "WapInputFormat",
    "WapInputRequired",
    "WapMarqueeDir",
    "WapMarqueeLoop",
    "WapMarqueeSpeed",
    "WapMarqueeStyle",
    "WebkitBackgroundSize",
    "WebkitBorderBottomLeftRadius",
    "WebkitBorderBottomRightRadius",
    "WebkitBorderRadius",
    "WebkitBorderTopLeftRadius",
    "WebkitBorderTopRightRadius",
    "WebkitBoxAlign",
    "WebkitBoxDirection",
    "WebkitBoxFlex",
    "WebkitBoxLines",
    "WebkitBoxOrdinalGroup",
    "WebkitBoxOrient",
    "WebkitBoxPack",
    "WebkitBoxShadow",
    "WebkitTransform",
    "WebkitTransformOrigin",
    "WebkitTransition",
    "WebkitTransitionDelay",
    "WebkitTransitionDuration",
    "WebkitTransitionProperty",
    "WebkitTransitionTimingFunction",
    "a",
    "aLink",
    "abbr",
    "accept",
    "acceptCharset",
    "accessKey",
    "accountId",
    "accountName",
    "accuracy",
    "action",
    "active",
    "activeCues",
    "activeElement",
    "addEventListener",
    "address",
    "addressBookItemId",
    "alarmDate",
    "alarmed",
    "align",
    "alignContent",
    "alignItems",
    "alignSelf",
    "alignmentBaseline",
    "alinkColor",
    "all",
    "allFeeds",
    "allow",
    "alpha",
    "alt",
    "altKey",
    "alternateURL",
    "altitude",
    "altitudeAccuracy",
    "amplitude",
    "anchorNode",
    "anchorOffset",
    "anchors",
    "angle",
    "animVal",
    "animatedInstanceRoot",
    "animatedNormalizedPathSegList",
    "animatedPathSegList",
    "animatedPoints",
    "animation",
    "animationDelay",
    "animationDirection",
    "animationDuration",
    "animationFillMode",
    "animationIterationCount",
    "animationName",
    "animationPlayState",
    "animationTimingFunction",
    "antialias",
    "appCodeName",
    "appMinorVersion",
    "appName",
    "appVersion",
    "applets",
    "applicationCache",
    "archive",
    "areas",
    "async",
    "attached",
    "attachments",
    "attrChange",
    "attrName",
    "attributes",
    "audioLevel",
    "audioPath",
    "authState",
    "authStatus",
    "authentication",
    "author",
    "authorEmail",
    "authorHref",
    "autocomplete",
    "autofocus",
    "autoplay",
    "availHeight",
    "availWidth",
    "availableMemory",
    "axis",
    "azimuth",
    "b",
    "backLightOn",
    "background",
    "backgroundAttachment",
    "backgroundClip",
    "backgroundColor",
    "backgroundImage",
    "backgroundOrigin",
    "backgroundPosition",
    "backgroundRepeat",
    "backgroundSize",
    "badge",
    "baseFrequencyX",
    "baseFrequencyY",
    "baseURI",
    "baseVal",
    "baselineShift",
    "bccAddress",
    "behavior",
    "bgColor",
    "bgProcess",
    "bias",
    "binaryType",
    "block",
    "blue",
    "blur",
    "body",
    "bodyItems",
    "booleanValue",
    "border",
    "borderBottom",
    "borderBottomColor",
    "borderBottomLeftRadius",
    "borderBottomRightRadius",
    "borderBottomStyle",
    "borderBottomWidth",
    "borderCollapse",
    "borderColor",
    "borderLeft",
    "borderLeftColor",
    "borderLeftStyle",
    "borderLeftWidth",
    "borderRadius",
    "borderRight",
    "borderRightColor",
    "borderRightStyle",
    "borderRightWidth",
    "borderSpacing",
    "borderStyle",
    "borderTop",
    "borderTopColor",
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderTopStyle",
    "borderTopWidth",
    "borderWidth",
    "bottom",
    "boxDecorationBreak",
    "boxShadow",
    "boxSizing",
    "breakAfter",
    "breakBefore",
    "breakInside",
    "browserLanguage",
    "browserWindow",
    "bubbles",
    "buffered",
    "bufferedAmount",
    "bufferedRendering",
    "busy",
    "button",
    "bytesAvailable",
    "c",
    "calendarItemId",
    "callRecordAddress",
    "callRecordId",
    "callRecordName",
    "callRecordType",
    "callbackNumber",
    "cancelBubble",
    "cancelable",
    "canvas",
    "caption",
    "captionSide",
    "ccAddress",
    "cellIndex",
    "cellPadding",
    "cellSpacing",
    "cells",
    "ch",
    "chOff",
    "challenge",
    "changedTouches",
    "char",
    "charCode",
    "characterSet",
    "characterType",
    "charset",
    "checked",
    "childElementCount",
    "childNodes",
    "children",
    "chunked",
    "cite",
    "class",
    "classId",
    "classList",
    "className",
    "clear",
    "clientHeight",
    "clientLeft",
    "clientTop",
    "clientWidth",
    "clientX",
    "clientY",
    "clip",
    "clipPath",
    "clipPathUnits",
    "clipRule",
    "clipboardData",
    "clipboardString",
    "close",
    "closed",
    "code",
    "codeBase",
    "codeType",
    "colSpan",
    "collapsed",
    "color",
    "colorDepth",
    "colorInterpolation",
    "colorInterpolationFilters",
    "colorProfile",
    "colorRendering",
    "cols",
    "columnCount",
    "columnFill",
    "columnGap",
    "columnRule",
    "columnRuleColor",
    "columnRuleStyle",
    "columnRuleWidth",
    "columnSpan",
    "columnWidth",
    "columns",
    "commonAncestorContainer",
    "compact",
    "company",
    "compatMode",
    "complete",
    "connection",
    "content",
    "contentDocument",
    "contentEditable",
    "contentScriptType",
    "contentStyleType",
    "contentType",
    "contentWindow",
    "contexts",
    "control",
    "controls",
    "cookie",
    "cookieEnabled",
    "coords",
    "correspondingElement",
    "correspondingUseElement",
    "count",
    "counterIncrement",
    "counterReset",
    "createDate",
    "createDocumentFragment",
    "createElement",
    "createEvent",
    "createTextNode",
    "created",
    "crossOrigin",
    "cssFloat",
    "cssRules",
    "cssText",
    "ctrlKey",
    "cues",
    "current",
    "currentFps",
    "currentIcon",
    "currentNode",
    "currentPage",
    "currentRotate",
    "currentScale",
    "currentServiceName",
    "currentServicePath",
    "currentSrc",
    "currentStyle",
    "currentTarget",
    "currentTime",
    "currentTranslate",
    "cursor",
    "customError",
    "cx",
    "cy",
    "d",
    "data",
    "dataTransfer",
    "dataset",
    "dateTime",
    "declare",
    "default",
    "defaultChecked",
    "defaultMuted",
    "defaultPlaybackRate",
    "defaultPrevented",
    "defaultSelected",
    "defaultStatus",
    "defaultValue",
    "defaultView",
    "defer",
    "depth",
    "description",
    "designMode",
    "destinationAddress",
    "detail",
    "device",
    "deviceName",
    "devicePixelRatio",
    "dialogArguments",
    "diffuseConstant",
    "dir",
    "dirName",
    "direction",
    "disabled",
    "dispatchEvent",
    "display",
    "displayAlign",
    "divisor",
    "doNotTrack",
    "doctype",
    "document",
    "documentElement",
    "documentURI",
    "documentURL",
    "documentURLPatterns",
    "domConfig",
    "domain",
    "dominantBaseline",
    "draggable",
    "drawingBufferHeight",
    "drawingBufferWidth",
    "dropEffect",
    "dropzone",
    "dseEnabled",
    "dseRecovered",
    "duration",
    "durationSeconds",
    "dx",
    "dy",
    "e",
    "eMail",
    "edgeMode",
    "effectAllowed",
    "elapsedTime",
    "element",
    "elements",
    "elevation",
    "embeds",
    "emptyCells",
    "enableBackground",
    "enabledPlugin",
    "encoding",
    "enctype",
    "endContainer",
    "endOffset",
    "endTime",
    "ended",
    "entities",
    "entries",
    "eof",
    "error",
    "event",
    "eventCancelled",
    "eventEndTime",
    "eventName",
    "eventNotes",
    "eventPhase",
    "eventRecurrence",
    "eventStartTime",
    "exists",
    "expandEntityReferences",
    "exponent",
    "extension",
    "extensions",
    "externalResourcesRequired",
    "f",
    "face",
    "farthestViewportElement",
    "favicon",
    "faviconUrl",
    "fgColor",
    "fileInstance",
    "fileName",
    "filePath",
    "fileSize",
    "filename",
    "files",
    "fill",
    "fillOpacity",
    "fillRule",
    "fillStyle",
    "filter",
    "filterResX",
    "filterResY",
    "filterUnits",
    "firstChild",
    "firstElementChild",
    "flex",
    "flexBasis",
    "flexDirection",
    "flexFlow",
    "flexGrow",
    "flexShrink",
    "flexWrap",
    "floodColor",
    "floodOpacity",
    "focus",
    "focusNode",
    "focusOffset",
    "focused",
    "font",
    "fontFamily",
    "fontSize",
    "fontSizeAdjust",
    "fontStretch",
    "fontStyle",
    "fontVariant",
    "fontWeight",
    "for",
    "form",
    "formAction",
    "formEnctype",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "forms",
    "frame",
    "frameBorder",
    "frameElement",
    "frames",
    "fromElement",
    "fullName",
    "fullscreenElement",
    "fullscreenEnabled",
    "fx",
    "fy",
    "geolocation",
    "getElementById",
    "getElementsByClassName",
    "getElementsByTagName",
    "globalAlpha",
    "globalCompositeOperation",
    "glyphOrientationHorizontal",
    "glyphOrientationVertical",
    "gradientTransform",
    "gradientUnits",
    "green",
    "hash",
    "head",
    "headers",
    "heading",
    "height",
    "hidden",
    "high",
    "history",
    "hits",
    "home",
    "homePhone",
    "host",
    "hostName",
    "hostname",
    "href",
    "hreflang",
    "hspace",
    "htmlFor",
    "httpEquiv",
    "icon",
    "icons",
    "id",
    "identifier",
    "imageRendering",
    "images",
    "implementation",
    "implicitFlush",
    "in1",
    "in2",
    "indeterminate",
    "index",
    "innerHTML",
    "innerHeight",
    "innerText",
    "innerWidth",
    "input",
    "inputFormat",
    "inputMethod",
    "inputmode",
    "insertAdjacentHTML",
    "insertAdjacentText",
    "insertId",
    "instanceRoot",
    "intercept",
    "internalSubset",
    "invalidIteratorState",
    "ip",
    "isArchive",
    "isAudioPlaying",
    "isBinary",
    "isCharging",
    "isCollapsed",
    "isContentEditable",
    "isDataNetworkConnected",
    "isDirectory",
    "isEditable",
    "isElementContentWhitespace",
    "isFile",
    "isHidden",
    "isLocal",
    "isMap",
    "isMarkup",
    "isOwner",
    "isPaused",
    "isPlainText",
    "isProxied",
    "isRadioEnabled",
    "isRead",
    "isRoaming",
    "isSubscribed",
    "isTrusted",
    "isVideoPlaying",
    "item",
    "itemId",
    "itemProp",
    "itemRef",
    "itemScope",
    "itemType",
    "itemValue",
    "items",
    "justifyContent",
    "k1",
    "k2",
    "k3",
    "k4",
    "keep",
    "kernelMatrix",
    "kernelUnitLengthX",
    "kernelUnitLengthY",
    "kerning",
    "key",
    "keyCode",
    "keyText",
    "keypadLightOn",
    "keytype",
    "kind",
    "label",
    "labels",
    "lang",
    "language",
    "largeArcFlag",
    "lastChild",
    "lastElementChild",
    "lastEventId",
    "lastModified",
    "lastModifiedDate",
    "lastModifyDate",
    "lastPosition",
    "lastUpdate",
    "latitude",
    "left",
    "length",
    "lengthAdjust",
    "lengthComputable",
    "letterSpacing",
    "lightingColor",
    "limitingConeAngle",
    "line",
    "lineCap",
    "lineHeight",
    "lineIncrement",
    "lineJoin",
    "lineWidth",
    "lineno",
    "lines",
    "link",
    "linkColor",
    "linkURL",
    "links",
    "list",
    "listStyle",
    "listStyleImage",
    "listStylePosition",
    "listStyleType",
    "listener",
    "loaded",
    "loadedWithSPDY",
    "localName",
    "localStorage",
    "locale",
    "location",
    "locked",
    "logo",
    "longDesc",
    "longitude",
    "loop",
    "low",
    "lowsrc",
    "margin",
    "marginBottom",
    "marginHeight",
    "marginLeft",
    "marginRight",
    "marginTop",
    "marginWidth",
    "marker",
    "markerEnd",
    "markerHeight",
    "markerMid",
    "markerOffset",
    "markerStart",
    "markerUnits",
    "markerWidth",
    "mask",
    "maskContentUnits",
    "maskUnits",
    "matches",
    "matrix",
    "max",
    "maxAge",
    "maxEntries",
    "maxHeight",
    "maxLength",
    "maxPathLength",
    "maxSize",
    "maxUploadRate",
    "maxWidth",
    "maxZoom",
    "media",
    "mediaText",
    "mediaType",
    "meetOrSlice",
    "menu",
    "menubar",
    "message",
    "messageId",
    "messagePriority",
    "messageType",
    "metaData",
    "metaKey",
    "method",
    "millisecondsSelf",
    "millisecondsTotal",
    "mimeTypes",
    "min",
    "minHeight",
    "minUpdateInterval",
    "minWidth",
    "minZoom",
    "miterLimit",
    "mobilePhone",
    "mode",
    "modified",
    "mountPoints",
    "moveBy",
    "moveTo",
    "msgRingtoneVolume",
    "multiple",
    "muted",
    "name",
    "namedItem",
    "names",
    "namespaceURI",
    "nativePath",
    "naturalHeight",
    "naturalWidth",
    "navDown",
    "navIndex",
    "navLeft",
    "navRight",
    "navUp",
    "navigationMode",
    "navigator",
    "nearestViewportElement",
    "networkConnectionType",
    "networkState",
    "newDocument",
    "newLine",
    "newURL",
    "newValue",
    "next",
    "nextElementSibling",
    "nextSibling",
    "noHref",
    "noResize",
    "noShade",
    "noValidate",
    "noWrap",
    "nodeName",
    "nodeType",
    "nodeValue",
    "normalizedPathSegList",
    "notationName",
    "notations",
    "numOctaves",
    "numberOfItems",
    "numberOfSegments",
    "numberValue",
    "object",
    "offset",
    "offsetHeight",
    "offsetLeft",
    "offsetParent",
    "offsetTop",
    "offsetWidth",
    "offsetX",
    "offsetY",
    "oldURL",
    "oldValue",
    "onAddressBookItemsFound",
    "onCalendarItemAlert",
    "onCalendarItemsFound",
    "onCallEvent",
    "onCallRecordsFound",
    "onCameraCaptured",
    "onChargeLevelChange",
    "onChargeStateChange",
    "onFilesFound",
    "onFocus",
    "onLine",
    "onLowBattery",
    "onMaximize",
    "onMessageArrived",
    "onMessageSendingFailure",
    "onMessagesFound",
    "onNetworkConnectionChanged",
    "onPositionRetrieved",
    "onRestore",
    "onScreenChangeDimensions",
    "onSignalSourceChange",
    "onStateChange",
    "onVCardExportingFinish",
    "onWakeup",
    "onaddtrack",
    "onafterupdate",
    "onauthenticationchange",
    "onbeforeupdate",
    "onclose",
    "onconnect",
    "oncreate",
    "oncuechange",
    "ondisconnect",
    "ondragstart",
    "ondragstop",
    "onenter",
    "onerror",
    "onexit",
    "onfocus",
    "onhide",
    "onload",
    "onmessage",
    "onmove",
    "onopen",
    "onrangechange",
    "onrefresh",
    "onremove",
    "onremovetrack",
    "onshow",
    "onthread",
    "onupdate",
    "onviewstatechanged",
    "opacity",
    "opener",
    "operationType",
    "operator",
    "optimum",
    "options",
    "order",
    "orderX",
    "orderY",
    "orientAngle",
    "orientType",
    "orientation",
    "origin",
    "originURL",
    "orphans",
    "outerHTML",
    "outerHeight",
    "outerText",
    "outerWidth",
    "outline",
    "outlineColor",
    "outlineOffset",
    "outlineStyle",
    "outlineWidth",
    "output",
    "overflow",
    "overflowWrap",
    "overflowX",
    "overflowY",
    "ownerDocument",
    "ownerElement",
    "ownerNode",
    "ownerRule",
    "ownerSVGElement",
    "padding",
    "paddingBottom",
    "paddingLeft",
    "paddingRight",
    "paddingTop",
    "page",
    "pageBreakAfter",
    "pageBreakBefore",
    "pageBreakInside",
    "pageCount",
    "pageURL",
    "pageX",
    "pageXOffset",
    "pageY",
    "pageYOffset",
    "paintType",
    "parameterNames",
    "parent",
    "parentElement",
    "parentNode",
    "parentRule",
    "parentStyleSheet",
    "parentWindow",
    "passwordProtected",
    "path",
    "pathLength",
    "pathSegList",
    "pathSegType",
    "pathSegTypeAsLetter",
    "pathname",
    "pattern",
    "patternContentUnits",
    "patternMismatch",
    "patternTransform",
    "patternUnits",
    "pauseOnExit",
    "paused",
    "percentRemaining",
    "phoneColorDepthDefault",
    "phoneFirmware",
    "phoneMSISDN",
    "phoneManufacturer",
    "phoneModel",
    "phoneOS",
    "phoneOperatorName",
    "phoneScreenHeightDefault",
    "phoneScreenWidthDefault",
    "phoneSoftware",
    "phoneUserUniqueId",
    "pixelBottom",
    "pixelDepth",
    "pixelHeight",
    "pixelLeft",
    "pixelRight",
    "pixelTop",
    "pixelUnitToMillimeterX",
    "pixelUnitToMillimeterY",
    "pixelWidth",
    "placeholder",
    "platform",
    "playbackRate",
    "played",
    "plugins",
    "pointerEvents",
    "points",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "popup",
    "port",
    "port1",
    "port2",
    "ports",
    "posBottom",
    "posHeight",
    "posLeft",
    "posRight",
    "posTop",
    "posWidth",
    "position",
    "poster",
    "preferences",
    "prefetchPrimaryLink",
    "prefix",
    "preload",
    "premultipliedAlpha",
    "preserveAlpha",
    "preserveAspectRatio",
    "preserveDrawingBuffer",
    "prevPosition",
    "prevTabGroup",
    "prevValue",
    "prevWindow",
    "previous",
    "previousElementSibling",
    "previousSibling",
    "primitiveUnits",
    "private",
    "processorUtilizationPercent",
    "prompt",
    "propagationStopped",
    "properties",
    "propertyName",
    "protocol",
    "prototype",
    "proxyName",
    "pubDate",
    "publicIP",
    "publicId",
    "publicPort",
    "publicationDate",
    "queryItems",
    "quotes",
    "r",
    "r1",
    "r2",
    "radioSignalSource",
    "radioSignalStrengthPercent",
    "radiusX",
    "radiusY",
    "range",
    "rangeCount",
    "rangeOverflow",
    "rangeUnderflow",
    "readOnly",
    "readyState",
    "reason",
    "red",
    "refX",
    "refY",
    "referrer",
    "rel",
    "relatedNode",
    "relatedTarget",
    "rememberMe",
    "renderingMode",
    "rendezvous",
    "repeat",
    "request",
    "required",
    "requiredExtensions",
    "requiredFeatures",
    "resize",
    "resizeBy",
    "resizeTo",
    "response",
    "responseText",
    "responseType",
    "responseXML",
    "result",
    "resultType",
    "returnValue",
    "rev",
    "reversed",
    "rgbColor",
    "right",
    "rightMargin",
    "ringtoneVolume",
    "robotstxtEnabled",
    "root",
    "rootElement",
    "rotate",
    "rotation",
    "rowIndex",
    "rowSpan",
    "rows",
    "rowsAffected",
    "rules",
    "rx",
    "ry",
    "scale",
    "scheme",
    "scope",
    "scopeListenerAddress",
    "screen",
    "screenLeft",
    "screenPixelToMillimeterX",
    "screenPixelToMillimeterY",
    "screenTop",
    "screenX",
    "screenY",
    "scripts",
    "scroll",
    "scrollAmount",
    "scrollBy",
    "scrollDelay",
    "scrollHeight",
    "scrollLeft",
    "scrollTo",
    "scrollTop",
    "scrollWidth",
    "scrollX",
    "scrollY",
    "scrollbar3dlightColor",
    "scrollbarArrowColor",
    "scrollbarBaseColor",
    "scrollbarDarkshadowColor",
    "scrollbarFaceColor",
    "scrollbarHighlightColor",
    "scrollbarShadowColor",
    "scrollbarTrackColor",
    "scrolling",
    "search",
    "sectionRowIndex",
    "seed",
    "seekable",
    "seeking",
    "selected",
    "selectedIndex",
    "selectedOptions",
    "selectionDirection",
    "selectionEnd",
    "selectionStart",
    "selectionText",
    "selectorText",
    "self",
    "servicePath",
    "services",
    "session",
    "sessionStorage",
    "setInterval",
    "shadowBlur",
    "shadowColor",
    "shadowOffsetX",
    "shadowOffsetY",
    "shape",
    "shapeRendering",
    "sharedFolder",
    "sheet",
    "shiftKey",
    "shortName",
    "showImages",
    "singleNodeValue",
    "size",
    "slope",
    "snapToLines",
    "snapshotLength",
    "solidColor",
    "solidOpacity",
    "source",
    "sourceAddress",
    "spacing",
    "span",
    "speakNumeral",
    "specified",
    "specularConstant",
    "specularExponent",
    "speed",
    "speeddial",
    "spellcheck",
    "spreadMethod",
    "src",
    "srcElement",
    "srcURL",
    "srclang",
    "standby",
    "start",
    "startContainer",
    "startOffset",
    "startTime",
    "state",
    "status",
    "statusText",
    "stdDeviationX",
    "stdDeviationY",
    "stencil",
    "step",
    "stepMismatch",
    "stitchTiles",
    "stopColor",
    "stopOpacity",
    "storageArea",
    "stpVersion",
    "stringValue",
    "stroke",
    "strokeDasharray",
    "strokeDashoffset",
    "strokeLinecap",
    "strokeLinejoin",
    "strokeMiterlimit",
    "strokeOpacity",
    "strokeStyle",
    "strokeWidth",
    "style",
    "styleFloat",
    "styleSheet",
    "styleSheets",
    "subject",
    "subscribedFeeds",
    "suffixes",
    "summary",
    "surfaceScale",
    "sweepFlag",
    "systemId",
    "systemLanguage",
    "systemNewLine",
    "tBodies",
    "tFoot",
    "tHead",
    "tab",
    "tabGroup",
    "tabGroups",
    "tabIndex",
    "tableLayout",
    "tableValues",
    "tabs",
    "tagName",
    "target",
    "targetElement",
    "targetFps",
    "targetTouches",
    "targetURLPatterns",
    "targetX",
    "targetY",
    "text",
    "textAlign",
    "textAnchor",
    "textBaseline",
    "textContent",
    "textDecoration",
    "textIndent",
    "textLength",
    "textOverflow",
    "textRendering",
    "textShadow",
    "textTracks",
    "textTransform",
    "time",
    "timeStamp",
    "timeout",
    "timestamp",
    "title",
    "toElement",
    "tooLong",
    "toolbar",
    "top",
    "topWindow",
    "total",
    "totalMemory",
    "touches",
    "track",
    "transform",
    "transformOrigin",
    "transition",
    "transitionDelay",
    "transitionDuration",
    "transitionProperty",
    "transitionTimingFunction",
    "type",
    "typeMismatch",
    "types",
    "unicodeBidi",
    "unitType",
    "uniteDeviceName",
    "uniteServiceName",
    "uniteUser",
    "unread",
    "unselectable",
    "updateInterval",
    "upload",
    "upnpDeviceIcon",
    "upnpDevicePayload",
    "upnpEnabled",
    "uri",
    "url",
    "useCurrentView",
    "useMap",
    "userAccountBalance",
    "userAgent",
    "userDefinedTitle",
    "userLanguage",
    "userName",
    "userSubscriptionType",
    "userZoom",
    "username",
    "users",
    "vAlign",
    "vLink",
    "valid",
    "validationMessage",
    "validity",
    "validityPeriodHours",
    "value",
    "valueAsDate",
    "valueAsNumber",
    "valueAsString",
    "valueInSpecifiedUnits",
    "valueMissing",
    "valueType",
    "values",
    "vectorEffect",
    "version",
    "verticalAlign",
    "vibrationSetting",
    "videoHeight",
    "videoWidth",
    "view",
    "viewBox",
    "viewport",
    "viewportElement",
    "viewportFill",
    "viewportFillOpacity",
    "visibility",
    "visibilityState",
    "visibleToLocalNetwork",
    "visibleToSearchEngines",
    "visibleToServiceDiscovery",
    "vlinkColor",
    "volume",
    "vspace",
    "wasClean",
    "whatToShow",
    "wheelDelta",
    "wheelDeltaX",
    "wheelDeltaY",
    "which",
    "whiteSpace",
    "wholeText",
    "widgetMode",
    "widgets",
    "widows",
    "width",
    "willValidate",
    "window",
    "windows",
    "withCredentials",
    "wordSpacing",
    "wordWrap",
    "workPhone",
    "wrap",
    "writingMode",
    "x",
    "x1",
    "x2",
    "xAxis",
    "xChannelSelector",
    "xmlbase",
    "xmlspace",
    "y",
    "y1",
    "y2",
    "yAxis",
    "yChannelSelector",
    "z",
    "zAxis",
    "zIndex",
    "zoom",
    "zoomAndPan",
    null
  ];
}

test("GetName conversion")
  disabled;
{
  var index = 0;
  while (atoms[index])
  {
    var x = atomsTester[index];
    var y = atomsTester[atoms[index]];
    var result = atomsTester();
    if (result != true)
      throw result;
    ++index;
  }
}

test("PutName conversion")
  disabled;
{
  var index = 0;
  while (atoms[index])
  {
    var x = atomsTester[index];
    atomsTester[atoms[index]] = true;
    var result = atomsTester();
    if (result != true)
      throw result;
    ++index;
  }
}
