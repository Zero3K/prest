/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2024 Presto Project.  All rights reserved.
**
** This file is part of the Presto web browser.  It may not be distributed
** under any circumstances.
*/

group "tlsclient";

require _SSL_USE_TLSCLIENT_;

include "modules/tlsclient/tlsclient.h";
include "core/pch.h";

global
{
	// Provide minimal implementations for selftest since the actual TLSClient functions
	// are not available during selftest compilation
	
	// Simple TLSContext structure for selftest
	struct TLSContext {
		int dummy;
	};
	
	extern "C" {
		// Minimal implementations for selftest
		TLSContext* tls_create_context(int is_server) {
			return (TLSContext*)malloc(sizeof(TLSContext));
		}
		
		void tls_destroy_context(TLSContext* context) {
			if (context) {
				free(context);
			}
		}
		
		const char* tls_get_error_string(int error) {
			return "No error";
		}
		
		int tls_set_cipher_list(TLSContext* context, const char* cipher_list) {
			return 1; // Return success
		}
		
		int tls_set_verify_mode(TLSContext* context, int mode) {
			return 1; // Return success
		}
	}
}

html { "<html><body>TLSClient Test</body></html>" }

test("TLS Context Creation")
{
	TLSContext* ctx = tls_create_context(ISCLIENT);
	verify(ctx != NULL);
	
	tls_destroy_context(ctx);
}

test("TLS Error Handling")
{
	const char* error_str = tls_get_error_string(0);
	verify(error_str != NULL);
	verify(strcmp(error_str, "No error") == 0);
}

test("TLS Configuration")
{
	TLSContext* ctx = tls_create_context(ISCLIENT);
	verify(ctx != NULL);
	
	int result = tls_set_cipher_list(ctx, "TLS_AES_256_GCM_SHA384");
	verify(result == 1);
	
	result = tls_set_verify_mode(ctx, 0);
	verify(result == 1);
	
	tls_destroy_context(ctx);
}