// EncodePointer and DecodePointer functions (kernel32.dll) are not available
// in Win2k and WinXP without SP3, but builds generated by VS2010 depend
// on them (they are used by CRT code).
// This file overrides IAT symbols for EncodePointer and DecodePointer with
// code that uses these functions if kernel32.dll has them and simply returns
// input argument on older systems.

#include "core/pch.h"
#include <windows.h>

// Function pointers that will be used by the CRT through the import table
static PVOID (WINAPI *EncodePointerPtr)(PVOID) = nullptr;
static PVOID (WINAPI *DecodePointerPtr)(PVOID) = nullptr;

// Simple implementation that just returns the input pointer
static PVOID WINAPI DummyPointer(PVOID ptr) {
    return ptr;
}

// Function that initializes the function pointers on first call
static PVOID WINAPI EncodePointerFirstRun(PVOID ptr);
static PVOID WINAPI DecodePointerFirstRun(PVOID ptr);

// Initialize the function pointers to point to the first-run functions
static void InitializePointers() {
    // Set defaults to dummy implementations
    EncodePointerPtr = DummyPointer;
    DecodePointerPtr = DummyPointer;
    
    // Try to load the real functions from kernel32.dll
    HMODULE kernel32 = LoadLibraryA("KERNEL32.DLL");
    if (kernel32) {
        FARPROC encodeProc = GetProcAddress(kernel32, "EncodePointer");
        FARPROC decodeProc = GetProcAddress(kernel32, "DecodePointer");
        
        if (encodeProc && decodeProc) {
            EncodePointerPtr = reinterpret_cast<PVOID(WINAPI*)(PVOID)>(encodeProc);
            DecodePointerPtr = reinterpret_cast<PVOID(WINAPI*)(PVOID)>(decodeProc);
        }
        
        FreeLibrary(kernel32);
    }
}

// First-run functions that initialize and then call the real functions
static PVOID WINAPI EncodePointerFirstRun(PVOID ptr) {
    InitializePointers();
    return EncodePointerPtr(ptr);
}

static PVOID WINAPI DecodePointerFirstRun(PVOID ptr) {
    InitializePointers();
    return DecodePointerPtr(ptr);
}

// Export the import table symbols that the CRT will resolve
// These are the symbols that the linker expects in the import table
extern "C" {
    // Initialize these to point to first-run functions
    __declspec(dllexport) PVOID (WINAPI * __imp__EncodePointer_4)(PVOID) = EncodePointerFirstRun;
    __declspec(dllexport) PVOID (WINAPI * __imp__DecodePointer_4)(PVOID) = DecodePointerFirstRun;
}

// Use linker pragmas to create aliases with the expected decorated names
#pragma comment(linker, "/ALTERNATENAME:__imp__EncodePointer@4=___imp__EncodePointer_4")
#pragma comment(linker, "/ALTERNATENAME:__imp__DecodePointer@4=___imp__DecodePointer_4")